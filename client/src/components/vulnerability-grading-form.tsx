
import React, { useState } from 'react';
import { useMutation } from '@tanstack/react-query';
import { Loader2, CheckCircle, AlertTriangle, Bug } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useToast } from '@/hooks/use-toast';

const vulnerabilityFormSchema = z.object({
  vulnerabilityType: z.string().min(1, 'Please select a vulnerability type'),
  description: z.string().min(10, 'Description must be at least 10 characters'),
  affectsAdmin: z.boolean().default(false),
  allowsDataAccess: z.boolean().default(false),
  allowsCodeExecution: z.boolean().default(false),
});

type VulnerabilityFormValues = z.infer<typeof vulnerabilityFormSchema>;

interface GradingResult {
  severity: 'SV1' | 'SV2' | 'SV3' | 'SV4';
  suggestedReward: number;
  confidence: number;
  reasoning: string;
  matchedType: {
    name: string;
    description: string;
  } | null;
}

const vulnerabilityTypes = [
  'Remote Code Execution (RCE)',
  'SQL Injection',
  'Cross-Site Scripting (XSS)',
  'Cross-Site Request Forgery (CSRF)',
  'Authentication Bypass',
  'Authorization Bypass',
  'Privilege Escalation',
  'Server-Side Request Forgery (SSRF)',
  'XML External Entity (XXE)',
  'Information Disclosure',
  'Directory Traversal',
  'Business Logic Flaw',
  'Open Redirect',
  'Clickjacking',
  'Missing Security Headers',
  'Other'
];

export function VulnerabilityGradingForm() {
  const [gradingResult, setGradingResult] = useState<GradingResult | null>(null);
  const { toast } = useToast();

  const form = useForm<VulnerabilityFormValues>({
    resolver: zodResolver(vulnerabilityFormSchema),
    defaultValues: {
      vulnerabilityType: '',
      description: '',
      affectsAdmin: false,
      allowsDataAccess: false,
      allowsCodeExecution: false,
    },
  });

  const gradingMutation = useMutation({
    mutationFn: async (data: VulnerabilityFormValues) => {
      const response = await fetch('/api/grade-vulnerability', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        throw new Error('Failed to grade vulnerability');
      }

      return response.json();
    },
    onSuccess: (result: GradingResult) => {
      setGradingResult(result);
      toast({
        title: 'Vulnerability Graded',
        description: `Severity: ${result.severity} | Estimated Reward: $${result.suggestedReward}`,
        variant: 'default',
      });
    },
    onError: (error: Error) => {
      toast({
        title: 'Grading Failed',
        description: error.message,
        variant: 'destructive',
      });
    },
  });

  const onSubmit = (data: VulnerabilityFormValues) => {
    gradingMutation.mutate(data);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'SV1': return 'text-red-500 bg-red-900/20';
      case 'SV2': return 'text-orange-500 bg-orange-900/20';
      case 'SV3': return 'text-yellow-500 bg-yellow-900/20';
      case 'SV4': return 'text-blue-500 bg-blue-900/20';
      default: return 'text-gray-500 bg-gray-900/20';
    }
  };

  const resetForm = () => {
    form.reset();
    setGradingResult(null);
  };

  return (
    <div className="space-y-6">
      <div className="terminal-card p-6 rounded-lg">
        <div className="mb-6">
          <h3 className="text-lg font-mono font-bold text-light-gray mb-2 flex items-center">
            <Bug className="mr-2 h-5 w-5 text-matrix" />
            Vulnerability Assessment Tool
          </h3>
          <p className="text-dim-gray font-mono text-sm">
            Get instant grading and reward estimation for your vulnerability report
          </p>
        </div>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="vulnerabilityType"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-sm font-mono text-dim-gray">
                    Vulnerability Type
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="terminal-input">
                        <SelectValue placeholder="Select vulnerability type" />
                      </SelectTrigger>
                      <SelectContent className="bg-terminal border border-primary/30">
                        {vulnerabilityTypes.map((type) => (
                          <SelectItem key={type} value={type}>
                            {type}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                  <FormMessage className="text-alert-red text-xs" />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-sm font-mono text-dim-gray">
                    Description
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="terminal-input min-h-[100px]"
                      placeholder="Describe the vulnerability in detail..."
                    />
                  </FormControl>
                  <FormMessage className="text-alert-red text-xs" />
                </FormItem>
              )}
            />

            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <FormField
                control={form.control}
                name="affectsAdmin"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                        className="border-matrix/50"
                      />
                    </FormControl>
                    <div className="space-y-1 leading-none">
                      <FormLabel className="text-sm font-mono text-dim-gray">
                        Affects Admin
                      </FormLabel>
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="allowsDataAccess"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                        className="border-matrix/50"
                      />
                    </FormControl>
                    <div className="space-y-1 leading-none">
                      <FormLabel className="text-sm font-mono text-dim-gray">
                        Allows Data Access
                      </FormLabel>
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="allowsCodeExecution"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                        className="border-matrix/50"
                      />
                    </FormControl>
                    <div className="space-y-1 leading-none">
                      <FormLabel className="text-sm font-mono text-dim-gray">
                        Allows Code Execution
                      </FormLabel>
                    </div>
                  </FormItem>
                )}
              />
            </div>

            <div className="flex gap-3 pt-4">
              <Button
                type="submit"
                disabled={gradingMutation.isPending}
                className="glow-button flex items-center"
              >
                {gradingMutation.isPending ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    GRADING...
                  </>
                ) : (
                  <>
                    <CheckCircle className="mr-2 h-4 w-4" />
                    GRADE VULNERABILITY
                  </>
                )}
              </Button>

              {gradingResult && (
                <Button
                  type="button"
                  variant="outline"
                  onClick={resetForm}
                  className="border-matrix/30 hover:bg-matrix/10"
                >
                  RESET FORM
                </Button>
              )}
            </div>
          </form>
        </Form>
      </div>

      {gradingResult && (
        <div className="terminal-card p-6 rounded-lg border border-matrix/30">
          <div className="mb-4">
            <h4 className="text-lg font-mono font-bold text-light-gray mb-2 flex items-center">
              <AlertTriangle className="mr-2 h-5 w-5 text-matrix" />
              Grading Result
            </h4>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <div className="flex items-center justify-between p-3 bg-terminal rounded-md">
                <span className="text-dim-gray font-mono text-sm">Severity Level:</span>
                <span className={`px-3 py-1 rounded-full text-sm font-mono ${getSeverityColor(gradingResult.severity)}`}>
                  {gradingResult.severity}
                </span>
              </div>

              <div className="flex items-center justify-between p-3 bg-terminal rounded-md">
                <span className="text-dim-gray font-mono text-sm">Estimated Reward:</span>
                <span className="text-matrix font-mono font-bold">${gradingResult.suggestedReward}</span>
              </div>

              <div className="flex items-center justify-between p-3 bg-terminal rounded-md">
                <span className="text-dim-gray font-mono text-sm">Confidence:</span>
                <span className="text-light-gray font-mono">{Math.round(gradingResult.confidence * 100)}%</span>
              </div>
            </div>

            <div className="space-y-4">
              {gradingResult.matchedType && (
                <div className="p-3 bg-terminal rounded-md">
                  <h5 className="text-sm font-mono text-matrix mb-1">Matched Type:</h5>
                  <p className="text-light-gray font-mono text-sm">{gradingResult.matchedType.name}</p>
                  <p className="text-dim-gray font-mono text-xs mt-1">{gradingResult.matchedType.description}</p>
                </div>
              )}

              <div className="p-3 bg-terminal rounded-md">
                <h5 className="text-sm font-mono text-matrix mb-1">Reasoning:</h5>
                <p className="text-light-gray font-mono text-sm">{gradingResult.reasoning}</p>
              </div>
            </div>
          </div>

          <div className="mt-4 p-3 bg-terminal rounded-md border border-matrix/20">
            <p className="text-dim-gray font-mono text-xs">
              <span className="text-matrix">Note:</span> This is an automated assessment. Final rewards and severity 
              levels will be determined during manual review by our security team.
            </p>
          </div>
        </div>
      )}
    </div>
  );
}
