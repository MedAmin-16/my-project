interface VulnerabilityType {
  name: string;
  severity: "SV1" | "SV2" | "SV3" | "SV4";
  minReward: number;
  maxReward: number;
  description: string;
  keywords: string[];
  impactFactors: {
    adminAccess?: number;
    dataAccess?: number;
    codeExecution?: number;
  };
}

const VULNERABILITY_TYPES: VulnerabilityType[] = [
  // SV1 - Critical Severity Vulnerabilities
  {
    name: "Remote Code Execution (RCE)",
    severity: "SV1",
    minReward: 1500,
    maxReward: 5000,
    description: "Allows execution of arbitrary code on the server",
    keywords: ["rce", "remote code execution", "code execution", "command injection"],
    impactFactors: { adminAccess: 1.5, dataAccess: 1.3, codeExecution: 1.0 }
  },
  {
    name: "SQL Injection (Critical)",
    severity: "SV1",
    minReward: 1000,
    maxReward: 3000,
    description: "Critical SQL injection affecting admin or sensitive data",
    keywords: ["sql injection", "sqli", "database injection"],
    impactFactors: { adminAccess: 1.4, dataAccess: 1.5 }
  },
  {
    name: "Authentication Bypass (Admin)",
    severity: "SV1",
    minReward: 1200,
    maxReward: 4000,
    description: "Complete bypass of admin authentication",
    keywords: ["auth bypass", "authentication bypass", "admin bypass"],
    impactFactors: { adminAccess: 1.6 }
  },

  // SV2 - High Severity Vulnerabilities
  {
    name: "Privilege Escalation",
    severity: "SV2",
    minReward: 800,
    maxReward: 2000,
    description: "Escalation from user to admin privileges",
    keywords: ["privilege escalation", "privesc", "elevation"],
    impactFactors: { adminAccess: 1.3, dataAccess: 1.2 }
  },
  {
    name: "Server-Side Request Forgery (SSRF)",
    severity: "SV2",
    minReward: 600,
    maxReward: 1500,
    description: "Access to internal services or data",
    keywords: ["ssrf", "server side request forgery", "internal access"],
    impactFactors: { adminAccess: 1.2, dataAccess: 1.3 }
  },
  {
    name: "XML External Entity (XXE)",
    severity: "SV2",
    minReward: 500,
    maxReward: 1200,
    description: "XML parsing vulnerabilities leading to data disclosure",
    keywords: ["xxe", "xml external entity", "xml injection"],
    impactFactors: { dataAccess: 1.4 }
  },

  // SV3 - Medium Severity Vulnerabilities
  {
    name: "Cross-Site Scripting (XSS)",
    severity: "SV3",
    minReward: 200,
    maxReward: 800,
    description: "Script injection in web applications",
    keywords: ["xss", "cross-site scripting", "script injection", "stored xss", "reflected xss"],
    impactFactors: { adminAccess: 1.4 }
  },
  {
    name: "Cross-Site Request Forgery (CSRF)",
    severity: "SV3",
    minReward: 150,
    maxReward: 600,
    description: "Force users to perform unintended actions",
    keywords: ["csrf", "cross-site request forgery", "request forgery"],
    impactFactors: { adminAccess: 1.3 }
  },
  {
    name: "Information Disclosure",
    severity: "SV3",
    minReward: 100,
    maxReward: 500,
    description: "Unauthorized access to sensitive information",
    keywords: ["info disclosure", "information leakage", "data exposure"],
    impactFactors: { adminAccess: 1.2, dataAccess: 1.3 }
  },
  {
    name: "Directory Traversal",
    severity: "SV3",
    minReward: 200,
    maxReward: 700,
    description: "Access files outside intended directory",
    keywords: ["directory traversal", "path traversal", "file inclusion"],
    impactFactors: { dataAccess: 1.2 }
  },

  // SV4 - Low Severity Vulnerabilities
  {
    name: "Open Redirect",
    severity: "SV4",
    minReward: 20,
    maxReward: 100,
    description: "Redirect users to external malicious sites",
    keywords: ["open redirect", "redirect", "url redirect"],
    impactFactors: {}
  },
  {
    name: "Clickjacking",
    severity: "SV4",
    minReward: 20,
    maxReward: 80,
    description: "Trick users into clicking hidden elements",
    keywords: ["clickjacking", "ui redressing", "frame"],
    impactFactors: { adminAccess: 1.3 }
  },
  {
    name: "Missing Security Headers",
    severity: "SV4",
    minReward: 15,
    maxReward: 60,
    description: "Lack of protective HTTP headers",
    keywords: ["security headers", "csp", "hsts", "x-frame-options"],
    impactFactors: {}
  },
  {
    name: "Information Leakage (Minor)",
    severity: "SV4",
    minReward: 25,
    maxReward: 75,
    description: "Minor information disclosure with low impact",
    keywords: ["info leak", "version disclosure", "error message"],
    impactFactors: {}
  }
];

export interface GradingInput {
  vulnerabilityType: string;
  description: string;
  affectsAdmin: boolean;
  allowsDataAccess: boolean;
  allowsCodeExecution: boolean;
  proofOfConcept?: string;
}

export interface GradingResult {
  severity: "SV1" | "SV2" | "SV3" | "SV4";
  suggestedReward: number;
  matchedType: VulnerabilityType | null;
  confidence: number; // 0-1
  reasoning: string;
}

export function gradeVulnerability(input: GradingInput): GradingResult {
  const { vulnerabilityType, description, affectsAdmin, allowsDataAccess, allowsCodeExecution } = input;

  // Normalize input for matching
  const normalizedInput = `${vulnerabilityType} ${description}`.toLowerCase();

  let bestMatch: VulnerabilityType | null = null;
  let bestScore = 0;

  // Find the best matching vulnerability type
  for (const vulnType of VULNERABILITY_TYPES) {
    let score = 0;

    // Check keyword matches
    for (const keyword of vulnType.keywords) {
      if (normalizedInput.includes(keyword.toLowerCase())) {
        score += 1;
      }
    }

    if (score > bestScore) {
      bestScore = score;
      bestMatch = vulnType;
    }
  }

  // If no match found, default to low severity
  if (!bestMatch || bestScore === 0) {
    return {
      severity: "SV4",
      suggestedReward: 50,
      matchedType: null,
      confidence: 0.1,
      reasoning: "No specific vulnerability type matched. Defaulted to low severity for manual review."
    };
  }

  // Calculate reward based on impact factors
  let baseReward = (bestMatch.minReward + bestMatch.maxReward) / 2;
  let multiplier = 1.0;

  if (affectsAdmin && bestMatch.impactFactors.adminAccess) {
    multiplier *= bestMatch.impactFactors.adminAccess;
  }

  if (allowsDataAccess && bestMatch.impactFactors.dataAccess) {
    multiplier *= bestMatch.impactFactors.dataAccess;
  }

  if (allowsCodeExecution && bestMatch.impactFactors.codeExecution) {
    multiplier *= bestMatch.impactFactors.codeExecution;
  }

  const finalReward = Math.round(baseReward * multiplier);
  const confidence = Math.min(0.9, bestScore / bestMatch.keywords.length);

  let reasoning = `Matched "${bestMatch.name}" based on keyword analysis. `;
  if (multiplier > 1.0) {
    reasoning += `Reward increased by ${Math.round((multiplier - 1) * 100)}% due to impact factors. `;
  }
  reasoning += `Confidence: ${Math.round(confidence * 100)}%`;

  return {
    severity: bestMatch.severity,
    suggestedReward: finalReward,
    matchedType: bestMatch,
    confidence,
    reasoning
  };
}

// Helper function to get all vulnerability types for admin panel display
export function getAllVulnerabilityTypes(): VulnerabilityType[] {
  return VULNERABILITY_TYPES;
}

// Helper function to update vulnerability types (for future admin panel editing)
export function updateVulnerabilityType(index: number, updatedType: VulnerabilityType): boolean {
  if (index >= 0 && index < VULNERABILITY_TYPES.length) {
    VULNERABILITY_TYPES[index] = updatedType;
    return true;
  }
  return false;
}