{"file_contents":{"README.md":{"content":"# my-project","size_bytes":12},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n  ssl: true\n});","size_bytes":336},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# CyberHunt Bug Bounty Platform\n\n## Overview\n\nCyberHunt is a comprehensive bug bounty platform that gamifies cybersecurity vulnerability discovery. The platform connects security researchers with organizations seeking to improve their security posture through a modern, interactive web application built with React and TypeScript.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter for client-side routing\n- **Styling**: Tailwind CSS with custom cyberpunk/matrix theme\n- **State Management**: React Query for server state management\n- **Forms**: React Hook Form with Zod validation\n- **UI Components**: Custom component library with Radix UI primitives\n- **Build Tool**: Vite for fast development and optimized builds\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **Authentication**: Passport.js with session-based auth\n- **Security**: Helmet for security headers, rate limiting, CSRF protection\n- **File Processing**: Custom vulnerability grading system\n- **Email Service**: SendGrid for transactional emails\n- **Payment Processing**: Stripe for financial transactions\n\n### Database Schema\n- **Users**: Support for both hackers and companies with role-based access\n- **Programs**: Bug bounty programs with reward tiers\n- **Submissions**: Vulnerability reports with status tracking\n- **Activities**: User activity logging and gamification\n- **Notifications**: Real-time notification system\n- **Wallets**: Financial management for companies and researchers\n\n## Key Components\n\n### Authentication System\n- Multi-strategy authentication (local, Google, GitHub, Microsoft)\n- Role-based access control (hacker, company, admin)\n- Email verification and password reset flows\n- Session management with secure cookie handling\n\n### Gamification Engine\n- Achievement badges and reputation system\n- Leaderboards with multiple ranking criteria\n- Activity tracking and progress visualization\n- Rank progression system (Newbie → Elite Hunter)\n\n### Vulnerability Management\n- Automated vulnerability grading system\n- CVSS score calculation\n- Severity classification (SV1-SV4)\n- Status tracking (Pending → Accepted → Resolved)\n\n### Payment System\n- Stripe integration for secure payments\n- Company wallet management\n- Automated payout processing\n- Commission calculation and tracking\n\n### Security Features\n- Input validation and sanitization\n- Rate limiting on sensitive endpoints\n- Encrypted sensitive data storage\n- HTTPS enforcement and security headers\n\n## Data Flow\n\n1. **User Registration**: Users choose between hacker or company roles\n2. **Program Creation**: Companies create bug bounty programs with reward tiers\n3. **Vulnerability Submission**: Researchers submit findings through structured forms\n4. **Automated Grading**: System evaluates submissions using predefined criteria\n5. **Review Process**: Companies review and validate submissions\n6. **Reward Distribution**: Approved submissions trigger automated payouts\n7. **Gamification Updates**: User achievements and rankings updated in real-time\n\n## External Dependencies\n\n### Core Services\n- **Neon Database**: PostgreSQL hosting with connection pooling\n- **SendGrid**: Email delivery service for notifications\n- **Stripe**: Payment processing and financial transactions\n- **Replit Database**: Fallback storage for session management\n\n### Development Tools\n- **Drizzle Kit**: Database migrations and schema management\n- **ESBuild**: Fast JavaScript bundling for production\n- **PostCSS**: CSS processing with Tailwind CSS\n\n## Deployment Strategy\n\n### Development Environment\n- **Runtime**: Node.js 20 with ES modules\n- **Dev Server**: Vite dev server with HMR\n- **Database**: PostgreSQL with SSL connection\n- **Session Storage**: Memory store for development\n\n### Production Environment\n- **Build Process**: Vite build + ESBuild for server bundling\n- **Deployment**: Replit autoscale deployment\n- **Database**: Neon PostgreSQL with connection pooling\n- **Static Assets**: Served through Express with caching\n\n### Security Considerations\n- Environment variable management for sensitive data\n- SSL/TLS encryption for all communications\n- Secure session configuration with proper expiration\n- Content Security Policy implementation\n\n## Changelog\n\n- June 26, 2025. Initial setup\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.","size_bytes":4443},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport themePlugin from \"@replit/vite-plugin-shadcn-theme-json\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    themePlugin(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":1069},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\nimport { Strategy as GitHubStrategy } from \"passport-github2\";\nimport { Strategy as MicrosoftStrategy } from \"passport-microsoft\";\nimport { Express, Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport rateLimit from 'express-rate-limit';\nimport crypto from 'crypto';\nimport { scrypt, timingSafeEqual, randomBytes } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\nimport { sendVerificationEmail, verifyEmailWithToken, sendWelcomeEmail } from \"./email-service\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nconst loginLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // 5 attempts\n  skipSuccessfulRequests: true,\n  message: { message: \"Too many login attempts, please try again in 15 minutes\" }\n});\n\nconst registerLimiter = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: 20, // 20 attempts\n  message: { message: \"Too many registration attempts, please try again later\" }\n});\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || crypto.randomBytes(32).toString('hex'),\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n      secure: process.env.NODE_ENV === 'production',\n      httpOnly: true,\n      sameSite: 'strict'\n    }\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        if (!user || !(await comparePasswords(password, user.password))) {\n          return done(null, false);\n        } else {\n          return done(null, user);\n        }\n      } catch (error) {\n        return done(error);\n      }\n    }),\n  );\n\n  // Google OAuth Strategy\n  if (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {\n    passport.use(new GoogleStrategy({\n      clientID: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      callbackURL: \"/api/auth/google/callback\"\n    },\n    async (accessToken, refreshToken, profile, done) => {\n      try {\n        // Check if user already exists with this Google ID\n        let user = await storage.getUserByOAuthId('google', profile.id);\n        \n        if (user) {\n          return done(null, user);\n        }\n\n        // Check if user exists with this email\n        const email = profile.emails?.[0]?.value;\n        if (email) {\n          user = await storage.getUserByEmail(email);\n          if (user) {\n            // Link this Google account to existing user\n            await storage.linkOAuthAccount(user.id, 'google', profile.id);\n            return done(null, user);\n          }\n        }\n\n        // Create new user\n        const userData = {\n          username: profile.displayName || profile.username || `google_${profile.id}`,\n          email: email || '',\n          password: await hashPassword(crypto.randomBytes(32).toString('hex')), // Random password\n          userType: 'hacker' as const,\n          emailVerified: true, // OAuth emails are pre-verified\n        };\n\n        user = await storage.createUser(userData);\n        await storage.linkOAuthAccount(user.id, 'google', profile.id);\n        \n        return done(null, user);\n      } catch (error) {\n        return done(error);\n      }\n    }));\n  }\n\n  // GitHub OAuth Strategy\n  if (process.env.GITHUB_CLIENT_ID && process.env.GITHUB_CLIENT_SECRET) {\n    passport.use(new GitHubStrategy({\n      clientID: process.env.GITHUB_CLIENT_ID,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET,\n      callbackURL: \"/api/auth/github/callback\"\n    },\n    async (accessToken, refreshToken, profile, done) => {\n      try {\n        let user = await storage.getUserByOAuthId('github', profile.id);\n        \n        if (user) {\n          return done(null, user);\n        }\n\n        const email = profile.emails?.[0]?.value;\n        if (email) {\n          user = await storage.getUserByEmail(email);\n          if (user) {\n            await storage.linkOAuthAccount(user.id, 'github', profile.id);\n            return done(null, user);\n          }\n        }\n\n        const userData = {\n          username: profile.username || `github_${profile.id}`,\n          email: email || '',\n          password: await hashPassword(crypto.randomBytes(32).toString('hex')),\n          userType: 'hacker' as const,\n          emailVerified: true,\n        };\n\n        user = await storage.createUser(userData);\n        await storage.linkOAuthAccount(user.id, 'github', profile.id);\n        \n        return done(null, user);\n      } catch (error) {\n        return done(error);\n      }\n    }));\n  }\n\n  // Microsoft OAuth Strategy\n  if (process.env.MICROSOFT_CLIENT_ID && process.env.MICROSOFT_CLIENT_SECRET) {\n    passport.use(new MicrosoftStrategy({\n      clientID: process.env.MICROSOFT_CLIENT_ID,\n      clientSecret: process.env.MICROSOFT_CLIENT_SECRET,\n      callbackURL: \"/api/auth/microsoft/callback\",\n      scope: ['user.read']\n    },\n    async (accessToken, refreshToken, profile, done) => {\n      try {\n        let user = await storage.getUserByOAuthId('microsoft', profile.id);\n        \n        if (user) {\n          return done(null, user);\n        }\n\n        const email = profile.emails?.[0]?.value;\n        if (email) {\n          user = await storage.getUserByEmail(email);\n          if (user) {\n            await storage.linkOAuthAccount(user.id, 'microsoft', profile.id);\n            return done(null, user);\n          }\n        }\n\n        const userData = {\n          username: profile.displayName || `microsoft_${profile.id}`,\n          email: email || '',\n          password: await hashPassword(crypto.randomBytes(32).toString('hex')),\n          userType: 'hacker' as const,\n          emailVerified: true,\n        };\n\n        user = await storage.createUser(userData);\n        await storage.linkOAuthAccount(user.id, 'microsoft', profile.id);\n        \n        return done(null, user);\n      } catch (error) {\n        return done(error);\n      }\n    }));\n  }\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: number, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const { username, password, email, userType, companyName, companyWebsite, companySize, companyIndustry } = req.body;\n\n      if (!username || !password || !email) {\n        return res.status(400).json({ message: \"Username, password, and email are required\" });\n      }\n\n      // Password complexity check\n      const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n      if (!passwordRegex.test(password)) {\n        return res.status(400).json({ \n          message: \"Password must be at least 8 characters long and contain uppercase, lowercase, number and special characters\" \n        });\n      }\n\n      // Check if username is taken\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      // Check if email is taken\n      const existingEmail = await storage.getUserByEmail(email);\n      if (existingEmail) {\n        return res.status(400).json({ message: \"Email already in use\" });\n      }\n\n      const hashedPassword = await hashPassword(password);\n\n      // Create the user with appropriate user type\n      const userData = {\n        username,\n        password: hashedPassword,\n        email,\n        userType: userType || \"hacker\",\n      };\n\n      // Add company information if this is a company account\n      if (userType === \"company\") {\n        Object.assign(userData, {\n          companyName,\n          companyWebsite,\n          companySize,\n          companyIndustry\n        });\n      }\n\n      const user = await storage.createUser(userData);\n\n      // Send verification email\n      try {\n        await sendVerificationEmail(user.id, email, username);\n        console.log(`Verification email sent to ${email} for user ${username}`);\n      } catch (emailError) {\n        console.error('Failed to send verification email:', emailError);\n        // Continue registration process even if email sending fails\n      }\n\n      // Remove password from response\n      const userResponse = { ...user } as any;\n      delete userResponse.password;\n\n      // Log the user in\n      req.login(user, (err) => {\n        if (err) return next(err);\n\n        // Return success response\n        res.status(201).json({\n          ...userResponse,\n          message: \"Registration successful! Please check your email to verify your account.\"\n        });\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Email verification endpoint\n  app.get(\"/api/verify-email\", async (req, res) => {\n    const { token } = req.query;\n\n    if (!token || typeof token !== 'string') {\n      return res.status(400).json({ message: \"Invalid verification token\" });\n    }\n\n    try {\n      // First, get the user by the verification token to know their ID\n      const userByToken = await storage.getUserByVerificationToken(token);\n      if (!userByToken) {\n        return res.status(400).json({ message: \"Invalid or expired verification token\" });\n      }\n\n      // Then verify the email\n      const success = await verifyEmailWithToken(token);\n\n      if (success) {\n        // If the user is logged in, update their session\n        if (req.isAuthenticated() && req.user) {\n          const freshUser = await storage.getUser(req.user.id);\n          if (freshUser) {\n            req.login(freshUser, () => {});\n          }\n        }\n\n        // Send welcome email\n        try {\n          await sendWelcomeEmail(userByToken.id);\n\n          // Create welcome notification\n          await storage.createNotification({\n            type: 'system',\n            message: 'Welcome to CyberHunt! Your account has been verified.',\n            link: '/dashboard',\n            userId: userByToken.id,\n            relatedId: null\n          });\n\n          // Create an activity record for the user\n          await storage.createActivity({\n            userId: userByToken.id,\n            type: 'account_verified',\n            message: 'Email verified successfully',\n            details: 'Account verification completed',\n            relatedId: userByToken.id\n          });\n\n          // Award initial reputation points for verifying email\n          await storage.updateUserReputation(userByToken.id, 10);\n        } catch (emailError) {\n          console.error('Failed to send welcome email:', emailError);\n          // Continue verification process even if email sending fails\n        }\n\n        return res.status(200).json({ message: \"Email verified successfully\" });\n      } else {\n        return res.status(400).json({ message: \"Invalid or expired verification token\" });\n      }\n    } catch (error) {\n      console.error('Error verifying email:', error);\n      return res.status(500).json({ message: \"Failed to verify email\" });\n    }\n  });\n\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: SelectUser | false, info: any) => {\n      if (err) return next(err);\n      if (!user) return res.status(401).json({ message: \"Invalid username or password\" });\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n\n        // Remove password from response\n        const userResponse = { ...user } as any;\n        delete userResponse.password;\n\n        res.status(200).json(userResponse);\n      });\n    })(req, res, next);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    // Remove password from response\n    const user = { ...req.user } as any;\n    delete user.password;\n\n    res.json(user);\n  });\n\n  // OAuth Routes\n  // Google OAuth\n  app.get(\"/api/auth/google\", \n    passport.authenticate(\"google\", { scope: [\"profile\", \"email\"] })\n  );\n\n  app.get(\"/api/auth/google/callback\", \n    passport.authenticate(\"google\", { failureRedirect: \"/auth?error=google_failed\" }),\n    (req, res) => {\n      res.redirect(\"/dashboard\");\n    }\n  );\n\n  // GitHub OAuth\n  app.get(\"/api/auth/github\",\n    passport.authenticate(\"github\", { scope: [\"user:email\"] })\n  );\n\n  app.get(\"/api/auth/github/callback\",\n    passport.authenticate(\"github\", { failureRedirect: \"/auth?error=github_failed\" }),\n    (req, res) => {\n      res.redirect(\"/dashboard\");\n    }\n  );\n\n  // Microsoft OAuth\n  app.get(\"/api/auth/microsoft\",\n    passport.authenticate(\"microsoft\", { scope: [\"user.read\"] })\n  );\n\n  app.get(\"/api/auth/microsoft/callback\",\n    passport.authenticate(\"microsoft\", { failureRedirect: \"/auth?error=microsoft_failed\" }),\n    (req, res) => {\n      res.redirect(\"/dashboard\");\n    }\n  );\n}","size_bytes":14062},"server/crypto-payment-service.ts":{"content":"\nimport { createHash, createHmac } from 'crypto';\nimport { storage } from './storage';\nimport { encrypt, decrypt } from './crypto-utils';\n\ninterface BinancePayConfig {\n  apiKey: string;\n  secretKey: string;\n  baseUrl: string;\n}\n\ninterface CryptoWallet {\n  id: number;\n  userId: number;\n  walletType: string;\n  walletAddress: string;\n  network: string;\n  isVerified: boolean;\n  createdAt: Date;\n}\n\ninterface CryptoPaymentRequest {\n  amount: number;\n  currency: string;\n  merchantOrderId: string;\n  description: string;\n  returnUrl: string;\n  cancelUrl: string;\n}\n\ninterface CryptoWithdrawalRequest {\n  userId: number;\n  amount: number;\n  currency: string;\n  walletAddress: string;\n  network: string;\n}\n\nexport class CryptoPaymentService {\n  private static binanceConfig: BinancePayConfig = {\n    apiKey: process.env.BINANCE_PAY_API_KEY || '',\n    secretKey: process.env.BINANCE_PAY_SECRET_KEY || '',\n    baseUrl: process.env.BINANCE_PAY_BASE_URL || 'https://bpay.binanceapi.com'\n  };\n\n  // Generate Binance Pay signature\n  private static generateSignature(timestamp: number, nonce: string, body: string): string {\n    const payload = timestamp + '\\n' + nonce + '\\n' + body + '\\n';\n    return createHmac('sha512', this.binanceConfig.secretKey)\n      .update(payload)\n      .digest('hex')\n      .toUpperCase();\n  }\n\n  // Generate random nonce\n  private static generateNonce(): string {\n    return Math.random().toString(36).substring(2, 15) + \n           Math.random().toString(36).substring(2, 15);\n  }\n\n  // Create Binance Pay order for company payments\n  static async createBinancePayOrder(\n    companyId: number, \n    amount: number, \n    currency: string = 'USDT',\n    purpose: string = 'bounty_payment'\n  ) {\n    try {\n      const timestamp = Date.now();\n      const nonce = this.generateNonce();\n      const merchantOrderId = `CyberHunt_${companyId}_${timestamp}`;\n\n      const orderData: CryptoPaymentRequest = {\n        amount: amount / 100, // Convert cents to dollars\n        currency,\n        merchantOrderId,\n        description: `CyberHunt ${purpose} - Company ${companyId}`,\n        returnUrl: `${process.env.FRONTEND_URL}/payment/success`,\n        cancelUrl: `${process.env.FRONTEND_URL}/payment/cancel`\n      };\n\n      const body = JSON.stringify(orderData);\n      const signature = this.generateSignature(timestamp, nonce, body);\n\n      const headers = {\n        'Content-Type': 'application/json',\n        'BinancePay-Timestamp': timestamp.toString(),\n        'BinancePay-Nonce': nonce,\n        'BinancePay-Certificate-SN': this.binanceConfig.apiKey,\n        'BinancePay-Signature': signature\n      };\n\n      // In production, make actual API call to Binance Pay\n      // For now, simulate the response\n      const mockResponse = {\n        status: 'SUCCESS',\n        data: {\n          prepayId: `mock_prepay_${merchantOrderId}`,\n          terminalType: 'WEB',\n          expireTime: timestamp + (30 * 60 * 1000), // 30 minutes\n          qrcodeLink: `https://qr.binance.com/mock_${merchantOrderId}`,\n          qrContent: `binancepay://pay?prepayId=mock_prepay_${merchantOrderId}`,\n          checkoutUrl: `https://pay.binance.com/checkout/mock_${merchantOrderId}`,\n          deeplink: `binancepay://pay?prepayId=mock_prepay_${merchantOrderId}`,\n          universalUrl: `https://app.binance.com/payment/mock_${merchantOrderId}`\n        }\n      };\n\n      // Store payment intent in database\n      const paymentIntent = await storage.createCryptoPaymentIntent({\n        companyId,\n        amount,\n        currency,\n        purpose,\n        providerOrderId: mockResponse.data.prepayId,\n        merchantOrderId,\n        status: 'pending',\n        provider: 'binance_pay',\n        metadata: {\n          qrcodeLink: mockResponse.data.qrcodeLink,\n          checkoutUrl: mockResponse.data.checkoutUrl,\n          expireTime: mockResponse.data.expireTime\n        }\n      });\n\n      return {\n        paymentIntent,\n        binancePayData: mockResponse.data\n      };\n    } catch (error) {\n      console.error('Error creating Binance Pay order:', error);\n      throw error;\n    }\n  }\n\n  // Verify Binance Pay webhook signature\n  static verifyWebhookSignature(signature: string, timestamp: string, body: string): boolean {\n    try {\n      const expectedSignature = createHmac('sha512', this.binanceConfig.secretKey)\n        .update(timestamp + body)\n        .digest('hex')\n        .toUpperCase();\n      \n      return signature === expectedSignature;\n    } catch (error) {\n      console.error('Error verifying webhook signature:', error);\n      return false;\n    }\n  }\n\n  // Handle Binance Pay webhook\n  static async handleBinancePayWebhook(webhookData: any) {\n    try {\n      const { merchantOrderId, status, transactionId } = webhookData;\n\n      if (status === 'SUCCESS') {\n        // Find payment intent\n        const paymentIntent = await storage.getCryptoPaymentIntentByMerchantOrderId(merchantOrderId);\n        if (!paymentIntent) {\n          throw new Error('Payment intent not found');\n        }\n\n        // Update payment status\n        await storage.updateCryptoPaymentIntent(paymentIntent.id, {\n          status: 'completed',\n          transactionId,\n          completedAt: new Date()\n        });\n\n        // Create crypto payment approval record for admin review\n        await storage.createCryptoPaymentApproval({\n          cryptoPaymentIntentId: paymentIntent.id,\n          companyId: paymentIntent.companyId,\n          paymentMemo: paymentIntent.paymentMemo || 'No memo provided',\n          amount: paymentIntent.amount,\n          currency: paymentIntent.currency\n        });\n\n        // Create transaction record for tracking (balance will be updated manually by admin)\n        await storage.createCompanyTransaction({\n          companyId: paymentIntent.companyId,\n          amount: 0, // No automatic balance update\n          type: 'crypto_payment_pending',\n          note: `Crypto payment received via Binance Pay: ${transactionId} - Amount: ${(paymentIntent.amount / 100).toFixed(2)} ${paymentIntent.currency} - Memo: ${paymentIntent.paymentMemo || 'No memo'} - Pending admin approval`\n        });\n\n        // Create crypto transaction record\n        await storage.createCryptoTransaction({\n          companyId: paymentIntent.companyId,\n          transactionType: 'payment_in',\n          amount: paymentIntent.amount,\n          currency: paymentIntent.currency,\n          transactionHash: transactionId,\n          status: 'confirmed',\n          relatedPaymentIntentId: paymentIntent.id,\n          metadata: {\n            note: 'Payment to admin Binance account - requires manual wallet update'\n          }\n        });\n\n        return { success: true };\n      } else if (status === 'FAILED' || status === 'EXPIRED') {\n        // Update payment status to failed\n        const paymentIntent = await storage.getCryptoPaymentIntentByMerchantOrderId(merchantOrderId);\n        if (paymentIntent) {\n          await storage.updateCryptoPaymentIntent(paymentIntent.id, {\n            status: 'failed',\n            completedAt: new Date()\n          });\n        }\n        return { success: false, reason: status };\n      }\n    } catch (error) {\n      console.error('Error handling Binance Pay webhook:', error);\n      throw error;\n    }\n  }\n\n  // Create crypto withdrawal for researchers\n  static async createCryptoWithdrawal(withdrawalRequest: CryptoWithdrawalRequest) {\n    try {\n      const { userId, amount, currency, walletAddress, network } = withdrawalRequest;\n\n      // Verify user has sufficient balance\n      const wallet = await storage.getWallet(userId);\n      if (!wallet || wallet.balance < amount) {\n        throw new Error('Insufficient balance');\n      }\n\n      // Verify wallet address format (basic validation)\n      if (!this.isValidWalletAddress(walletAddress, network)) {\n        throw new Error('Invalid wallet address');\n      }\n\n      // Check withdrawal limits and fraud detection\n      const fraudCheck = await this.performWithdrawalFraudCheck(userId, amount);\n      if (fraudCheck.isFraudulent) {\n        throw new Error(`Withdrawal blocked: ${fraudCheck.reason}`);\n      }\n\n      // Create withdrawal record with pending status for admin approval\n      const withdrawal = await storage.createCryptoWithdrawal({\n        userId,\n        amount,\n        currency,\n        walletAddress: encrypt(walletAddress), // Encrypt wallet address\n        network,\n        status: 'pending', // Always start as pending for admin approval\n        provider: 'binance_pay'\n      });\n\n      // Don't deduct from wallet yet - wait for admin approval\n      // Create transaction record as pending approval\n      await storage.createTransaction({\n        walletId: wallet.id,\n        type: 'crypto_withdrawal_request',\n        amount: -amount,\n        description: `Crypto withdrawal request to ${walletAddress.substring(0, 10)}... - Pending approval`,\n        status: 'pending_approval'\n      });\n\n      return withdrawal;\n    } catch (error) {\n      console.error('Error creating crypto withdrawal:', error);\n      throw error;\n    }\n  }\n\n  // Validate wallet address format\n  private static isValidWalletAddress(address: string, network: string): boolean {\n    switch (network.toLowerCase()) {\n      case 'bitcoin':\n      case 'btc':\n        return /^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$|^bc1[a-z0-9]{39,59}$/.test(address);\n      case 'ethereum':\n      case 'eth':\n      case 'erc20':\n        return /^0x[a-fA-F0-9]{40}$/.test(address);\n      case 'bsc':\n      case 'binance':\n        return /^0x[a-fA-F0-9]{40}$/.test(address);\n      case 'tron':\n      case 'trx':\n        return /^T[A-Za-z1-9]{33}$/.test(address);\n      default:\n        return address.length > 20 && address.length < 100; // Basic length check\n    }\n  }\n\n  // Fraud detection for withdrawals\n  private static async performWithdrawalFraudCheck(\n    userId: number, \n    amount: number\n  ): Promise<{ isFraudulent: boolean; reason?: string }> {\n    try {\n      // Check withdrawal frequency\n      const recentWithdrawals = await storage.getRecentCryptoWithdrawals(userId, 24); // Last 24 hours\n      if (recentWithdrawals.length > 5) {\n        return { isFraudulent: true, reason: 'Too many withdrawal attempts in 24 hours' };\n      }\n\n      // Check large amounts\n      if (amount > 500000) { // > $5000\n        return { isFraudulent: true, reason: 'Large withdrawal amount requires manual review' };\n      }\n\n      // Check total daily withdrawal amount\n      const dailyTotal = recentWithdrawals.reduce((sum, w) => sum + w.amount, 0);\n      if (dailyTotal + amount > 1000000) { // > $10,000 daily limit\n        return { isFraudulent: true, reason: 'Daily withdrawal limit exceeded' };\n      }\n\n      return { isFraudulent: false };\n    } catch (error) {\n      console.error('Error in withdrawal fraud check:', error);\n      return { isFraudulent: false }; // Allow withdrawal if check fails\n    }\n  }\n\n  // Add user wallet\n  static async addUserWallet(userId: number, walletData: {\n    walletType: string;\n    walletAddress: string;\n    network: string;\n  }) {\n    try {\n      const { walletType, walletAddress, network } = walletData;\n\n      // Validate wallet address\n      if (!this.isValidWalletAddress(walletAddress, network)) {\n        throw new Error('Invalid wallet address format');\n      }\n\n      // Check if wallet already exists\n      const existingWallet = await storage.getCryptoWalletByAddress(walletAddress);\n      if (existingWallet) {\n        throw new Error('Wallet address already registered');\n      }\n\n      // Create wallet record\n      const wallet = await storage.createCryptoWallet({\n        userId,\n        walletType,\n        walletAddress: encrypt(walletAddress),\n        network,\n        isVerified: false\n      });\n\n      // In production, implement wallet verification process\n      // For now, auto-verify\n      await storage.updateCryptoWallet(wallet.id, { isVerified: true });\n\n      return wallet;\n    } catch (error) {\n      console.error('Error adding user wallet:', error);\n      throw error;\n    }\n  }\n\n  // Get user wallets\n  static async getUserWallets(userId: number) {\n    try {\n      const wallets = await storage.getCryptoWalletsByUser(userId);\n      \n      // Decrypt wallet addresses for display (mask for security)\n      return wallets.map(wallet => ({\n        ...wallet,\n        walletAddress: this.maskWalletAddress(decrypt(wallet.walletAddress))\n      }));\n    } catch (error) {\n      console.error('Error getting user wallets:', error);\n      throw error;\n    }\n  }\n\n  // Mask wallet address for security\n  private static maskWalletAddress(address: string): string {\n    if (address.length <= 10) return address;\n    return address.substring(0, 6) + '...' + address.substring(address.length - 4);\n  }\n\n  // Get crypto withdrawal history\n  static async getCryptoWithdrawals(userId: number, limit: number = 50) {\n    try {\n      return await storage.getCryptoWithdrawalsByUser(userId, limit);\n    } catch (error) {\n      console.error('Error getting crypto withdrawals:', error);\n      throw error;\n    }\n  }\n\n  // Get platform crypto statistics (for admin)\n  static async getCryptoStatistics() {\n    try {\n      const stats = await storage.getCryptoStatistics();\n      return {\n        totalCryptoPayments: stats.totalPayments || 0,\n        totalCryptoWithdrawals: stats.totalWithdrawals || 0,\n        pendingWithdrawals: stats.pendingWithdrawals || 0,\n        totalVolume: stats.totalVolume || 0\n      };\n    } catch (error) {\n      console.error('Error getting crypto statistics:', error);\n      return {\n        totalCryptoPayments: 0,\n        totalCryptoWithdrawals: 0,\n        pendingWithdrawals: 0,\n        totalVolume: 0\n      };\n    }\n  }\n}\n","size_bytes":13683},"server/crypto-utils.ts":{"content":"\nimport crypto from 'crypto';\n\nconst ENCRYPTION_KEY = process.env.ENCRYPTION_KEY || crypto.randomBytes(32).toString('hex');\nconst IV_LENGTH = 16;\n\nexport function encrypt(text: string): string {\n  const iv = crypto.randomBytes(IV_LENGTH);\n  const cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(ENCRYPTION_KEY, 'hex'), iv);\n  let encrypted = cipher.update(text);\n  encrypted = Buffer.concat([encrypted, cipher.final()]);\n  return iv.toString('hex') + ':' + encrypted.toString('hex');\n}\n\nexport function decrypt(text: string): string {\n  const parts = text.split(':');\n  const iv = Buffer.from(parts[0], 'hex');\n  const encryptedText = Buffer.from(parts[1], 'hex');\n  const decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(ENCRYPTION_KEY, 'hex'), iv);\n  let decrypted = decipher.update(encryptedText);\n  decrypted = Buffer.concat([decrypted, decipher.final()]);\n  return decrypted.toString();\n}\n","size_bytes":917},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/email-service.ts":{"content":"import sgMail from '@sendgrid/mail';\nimport { randomBytes } from 'crypto';\nimport { storage } from './storage';\nimport { Notification, User, Program, Submission } from '@shared/schema';\n\n// Initialize SendGrid\nconst sendGridApiKey = process.env.SENDGRID_API_KEY;\nif (!sendGridApiKey) {\n  console.error('SENDGRID_API_KEY environment variable is not set');\n} else {\n  sgMail.setApiKey(sendGridApiKey);\n  console.log('SendGrid API key configured successfully');\n}\n\n// Generate a verification token\nexport function generateVerificationToken(): string {\n  return randomBytes(32).toString('hex');\n}\n\n// General email sending function using SendGrid templates\nexport async function sendTemplatedEmail(\n  to: string,\n  templateId: string,\n  dynamicData: Record<string, any>,\n  from: string = 'notifications@cyberhunt.com'\n): Promise<boolean> {\n  try {\n    if (!sendGridApiKey) {\n      console.error('SendGrid API key is not configured');\n      return false;\n    }\n\n    const msg = {\n      to,\n      from,\n      templateId,\n      dynamic_template_data: dynamicData,\n    };\n\n    const response = await sgMail.send(msg);\n    console.log(`Email sent successfully to ${to} using template ${templateId}`, response[0].statusCode);\n    return true;\n  } catch (error: any) {\n    console.error('Failed to send templated email:', error);\n    if (error.response) {\n      console.error(error.response.body);\n    }\n    return false;\n  }\n}\n\n// Send a verification email\nexport async function sendVerificationEmail(userId: number, userEmail: string, username: string): Promise<string> {\n  try {\n    // Generate a verification token\n    const token = generateVerificationToken();\n\n    // Save the token to the user record\n    await storage.setVerificationToken(userId, token);\n\n    // Create the verification link\n    const confirm_link = `https://cyberhunt.com.tn/confirm?token=${token}`;\n\n    // Use your SendGrid verification template\n    const success = await sendTemplatedEmail(\n      userEmail,\n      'YOUR_VERIFICATION_TEMPLATE_ID', // Replace with your actual template ID\n      {\n        username: username,\n        confirm_link: confirm_link,\n      },\n      'verification@cyberhunt.com'\n    );\n\n    if (success) {\n      console.log(`Verification email sent to ${userEmail}`);\n      return token;\n    } else {\n      throw new Error('Failed to send verification email');\n    }\n\n  } catch (error: any) {\n    console.error('Failed to send verification email:', error);\n    throw error;\n  }\n}\n\n// Verify a user's email using their token\nexport async function verifyEmailWithToken(token: string): Promise<boolean> {\n  try {\n    const user = await storage.verifyEmail(token);\n    return !!user;\n  } catch (error) {\n    console.error('Failed to verify email with token:', error);\n    return false;\n  }\n}\n\n// Email template wrapper for consistent styling\nfunction getEmailTemplate(title: string, content: string): string {\n  return `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #00ff00; border-radius: 5px; background-color: #0a0a0a; color: #cccccc;\">\n      <h2 style=\"color: #00ff00; text-align: center;\">${title}</h2>\n      ${content}\n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #333333; text-align: center; font-size: 12px;\">\n        <p>&copy; ${new Date().getFullYear()} CyberHunt. All rights reserved.</p>\n      </div>\n    </div>\n  `;\n}\n\n// Used for notification emails to ensure correct type checking\ninterface NotificationEmailData {\n  id: number;\n  type: string;\n  message: string;\n  link: string | null;\n  isRead: boolean | null;\n  userId: number;\n  relatedId: number | null;\n  createdAt: Date | null;\n}\n\n// Send a notification email based on notification object\nexport async function sendNotificationEmail(notification: NotificationEmailData): Promise<boolean> {\n  try {\n    // Get user details\n    const user = await storage.getUser(notification.userId);\n    if (!user || !user.email || !user.isEmailVerified) return false;\n\n    // Create base URL\n    const baseUrl = process.env.BASE_URL || 'http://localhost:3000';\n    const actionUrl = notification.link ? `${baseUrl}${notification.link}` : `${baseUrl}/dashboard`;\n\n    // Map notification types to template IDs and prepare dynamic data\n    let templateId = '';\n    let dynamicData: Record<string, any> = {\n      username: user.username,\n      message: notification.message,\n      action_url: actionUrl,\n      base_url: baseUrl,\n    };\n\n    switch(notification.type) {\n      case 'new_submission':\n        templateId = 'YOUR_NEW_SUBMISSION_TEMPLATE_ID'; // Replace with your actual template ID\n        break;\n\n      case 'status_change':\n        templateId = 'YOUR_STATUS_CHANGE_TEMPLATE_ID'; // Replace with your actual template ID\n        break;\n\n      case 'achievement':\n        templateId = 'YOUR_ACHIEVEMENT_TEMPLATE_ID'; // Replace with your actual template ID\n        break;\n\n      default: // system\n        templateId = 'YOUR_SYSTEM_NOTIFICATION_TEMPLATE_ID'; // Replace with your actual template ID\n    }\n\n    if (!templateId) {\n      console.error(`No template ID configured for notification type: ${notification.type}`);\n      return false;\n    }\n\n    return await sendTemplatedEmail(user.email, templateId, dynamicData);\n\n  } catch (error) {\n    console.error('Failed to send notification email:', error);\n    return false;\n  }\n}\n\n// Send a submission status update email\nexport async function sendSubmissionStatusEmail(submission: Submission, message: string): Promise<boolean> {\n  try {\n    // Get user and program details\n    const user = await storage.getUser(submission.userId);\n    const program = await storage.getProgram(submission.programId);\n\n    if (!user || !user.email || !user.isEmailVerified || !program) return false;\n\n    // Create the status notification\n    const notificationData = {\n      type: 'status_change',\n      message: `Your submission for \"${program.name}\" has been ${submission.status}. ${message}`,\n      link: `/submissions/${submission.id}`,\n      userId: user.id,\n      relatedId: submission.id\n    };\n\n    const createdNotification = await storage.createNotification(notificationData);\n\n    // Use templated email function\n    const baseUrl = process.env.BASE_URL || 'http://localhost:3000';\n    const actionUrl = `${baseUrl}/submissions/${submission.id}`;\n\n    const dynamicData = {\n      username: user.username,\n      program_name: program.name,\n      submission_title: submission.title,\n      status: submission.status,\n      message: message,\n      action_url: actionUrl,\n      base_url: baseUrl,\n    };\n\n    return await sendTemplatedEmail(\n      user.email,\n      'YOUR_SUBMISSION_STATUS_TEMPLATE_ID', // Replace with your actual template ID\n      dynamicData\n    );\n\n  } catch (error) {\n    console.error('Failed to send submission status email:', error);\n    return false;\n  }\n}\n\n// Send an achievement notification email\nexport async function sendAchievementEmail(userId: number, achievementTitle: string, description: string): Promise<boolean> {\n  try {\n    // Get user details\n    const user = await storage.getUser(userId);\n    if (!user || !user.email || !user.isEmailVerified) return false;\n\n    // Create the achievement notification content\n    const notificationData = {\n      type: 'achievement',\n      message: `Achievement Unlocked: ${achievementTitle} - ${description}`,\n      link: '/dashboard',\n      userId,\n      relatedId: null\n    };\n\n    const createdNotification = await storage.createNotification(notificationData);\n\n    // Use templated email function\n    const baseUrl = process.env.BASE_URL || 'http://localhost:3000';\n\n    const dynamicData = {\n      username: user.username,\n      achievement_title: achievementTitle,\n      achievement_description: description,\n      action_url: `${baseUrl}/dashboard`,\n      base_url: baseUrl,\n    };\n\n    return await sendTemplatedEmail(\n      user.email,\n      'YOUR_ACHIEVEMENT_TEMPLATE_ID', // Replace with your actual template ID\n      dynamicData\n    );\n\n  } catch (error) {\n    console.error('Failed to send achievement email:', error);\n    return false;\n  }\n}\n\n// Send withdrawal completion confirmation email\nexport async function sendWithdrawalCompletedEmail(withdrawal: any): Promise<boolean> {\n  try {\n    // Get user details using the withdrawal data\n    const user = await storage.getUser(withdrawal.userId);\n    if (!user || !user.email || !user.isEmailVerified) return false;\n\n    const baseUrl = process.env.BASE_URL || 'http://localhost:3000';\n\n    // Format the withdrawal method for display\n    const methodDisplay = withdrawal.method === 'paypal' ? 'PayPal' : \n                         withdrawal.method === 'wise' ? 'Wise' : \n                         withdrawal.method === 'crypto' ? 'Cryptocurrency' : \n                         withdrawal.method.charAt(0).toUpperCase() + withdrawal.method.slice(1);\n\n    const dynamicData = {\n      username: user.username,\n      amount: withdrawal.amount,\n      method: methodDisplay,\n      destination: withdrawal.destination,\n      date: new Date().toLocaleDateString(),\n      action_url: `${baseUrl}/wallet`,\n      base_url: baseUrl,\n    };\n\n    const success = await sendTemplatedEmail(\n      user.email,\n      'YOUR_WITHDRAWAL_COMPLETED_TEMPLATE_ID', // Replace with your actual template ID\n      dynamicData,\n      'payments@cyberhunt.com'\n    );\n\n    if (success) {\n      // Create notification for the user\n      await storage.createNotification({\n        type: 'system',\n        message: `Your withdrawal of $${withdrawal.amount} has been completed and sent to your ${methodDisplay} account.`,\n        link: '/wallet',\n        userId: user.id,\n        relatedId: withdrawal.id\n      });\n    }\n\n    return success;\n\n  } catch (error) {\n    console.error('Failed to send withdrawal completion email:', error);\n    return false;\n  }\n}\n\n// Send a welcome email after verification\nexport async function sendWelcomeEmail(userId: number): Promise<boolean> {\n  try {\n    const user = await storage.getUser(userId);\n    if (!user || !user.email || !user.isEmailVerified) return false;\n\n    const baseUrl = process.env.BASE_URL || 'http://localhost:3000';\n\n    // Get active programs for recommendation\n    const programs = await storage.getPublicPrograms();\n    const topPrograms = programs.slice(0, 3);\n\n    const dynamicData = {\n      username: user.username,\n      dashboard_url: `${baseUrl}/dashboard`,\n      base_url: baseUrl,\n      recommended_programs: topPrograms.map(program => ({\n        name: program.name,\n        description: program.description,\n        url: `${baseUrl}/programs/${program.id}`\n      })),\n    };\n\n    return await sendTemplatedEmail(\n      user.email,\n      'YOUR_WELCOME_TEMPLATE_ID', // Replace with your actual template ID\n      dynamicData,\n      'welcome@cyberhunt.com'\n    );\n\n  } catch (error) {\n    console.error('Failed to send welcome email:', error);\n    return false;\n  }\n}\n\n// Send password reset email\nexport async function sendPasswordResetEmail(userEmail: string, username: string, resetToken: string): Promise<boolean> {\n  try {\n    const resetLink = `${process.env.BASE_URL || 'http://localhost:3000'}/reset-password?token=${resetToken}`;\n\n    const dynamicData = {\n      username: username,\n      reset_link: resetLink,\n      base_url: process.env.BASE_URL || 'http://localhost:3000',\n    };\n\n    return await sendTemplatedEmail(\n      userEmail,\n      'YOUR_PASSWORD_RESET_TEMPLATE_ID', // Replace with your actual template ID\n      dynamicData,\n      'security@cyberhunt.com'\n    );\n\n  } catch (error) {\n    console.error('Failed to send password reset email:', error);\n    return false;\n  }\n}","size_bytes":11667},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport helmet from 'helmet';\nimport rateLimit from 'express-rate-limit';\nimport cookieParser from 'cookie-parser';\nimport session from 'express-session';\nimport { randomBytes } from 'crypto';\nimport bcrypt from \"bcrypt\";\n\nconst app = express();\n\n// Trust proxy for Replit environment\napp.set('trust proxy', 1);\n\n// Skip rate limiting in development\nif (process.env.NODE_ENV === 'production') {\n  app.use(rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 1000, // limit each IP to 1000 requests per windowMs\n    standardHeaders: true,\n    legacyHeaders: false,\n  }));\n}\n\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"'unsafe-eval'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\n      connectSrc: [\"'self'\", \"ws:\", \"wss:\"],\n      frameSrc: [\"'none'\"],\n      objectSrc: [\"'none'\"],\n    },\n  },\n  crossOriginEmbedderPolicy: false,\n  crossOriginOpenerPolicy: false,\n  crossOriginResourcePolicy: false,\n}));\n\n// Add request sanitization\napp.use((req, res, next) => {\n  // Sanitize request body\n  if (req.body) {\n    Object.keys(req.body).forEach(key => {\n      if (typeof req.body[key] === 'string') {\n        req.body[key] = req.body[key].trim();\n      }\n    });\n  }\n  next();\n});\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\n\n// Admin sessions storage that will be shared with routes.ts\nconst adminSessions = new Map<string, { email: string, loginTime: number }>();\n\n// Export function to get admin sessions for routes.ts\nexport function getAdminSessions() {\n  return adminSessions;\n}\n\n// Add session middleware first\napp.use(session({\n  secret: process.env.SESSION_SECRET || 'your-secret-key',\n  resave: false,\n  saveUninitialized: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'lax',\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n\ndeclare module \"express-session\" {\n  interface SessionData {\n    user?: { id: number; userType?: string; };\n    adminUser?: { id: number; email: string; userType: string; loginTime: string; };\n  }\n}\n\n\n\n\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen(port, \"0.0.0.0\", async () => {\n    log(`serving on port ${port}`);\n\n    // Initialize crypto networks on startup\n    try {\n      const { initializeCryptoNetworks } = await import('./init-crypto-networks');\n      await initializeCryptoNetworks();\n    } catch (error) {\n      console.warn('Failed to initialize crypto networks:', error);\n    }\n  });\n})();","size_bytes":4272},"server/init-crypto-networks.ts":{"content":"\nimport { storage } from './storage';\n\nconst defaultNetworks = [\n  {\n    network: 'bitcoin',\n    displayName: 'Bitcoin',\n    currency: 'BTC',\n    isActive: true,\n    minWithdrawal: 1000, // $10 minimum\n    maxWithdrawal: 1000000, // $10,000 maximum\n    networkFee: 500, // $5 network fee\n    confirmationsRequired: 1,\n    processingTimeMinutes: 30,\n    metadata: {\n      decimals: 8,\n      explorerUrl: 'https://blockstream.info/tx/',\n      rpcUrl: 'https://blockstream.info/api/'\n    }\n  },\n  {\n    network: 'ethereum',\n    displayName: 'Ethereum',\n    currency: 'ETH',\n    isActive: true,\n    minWithdrawal: 2000, // $20 minimum (higher due to gas fees)\n    maxWithdrawal: 1000000, // $10,000 maximum\n    networkFee: 1000, // $10 network fee\n    confirmationsRequired: 12,\n    processingTimeMinutes: 15,\n    metadata: {\n      decimals: 18,\n      explorerUrl: 'https://etherscan.io/tx/',\n      rpcUrl: 'https://mainnet.infura.io/v3/'\n    }\n  },\n  {\n    network: 'bsc',\n    displayName: 'Binance Smart Chain',\n    currency: 'BNB',\n    isActive: true,\n    minWithdrawal: 500, // $5 minimum\n    maxWithdrawal: 1000000, // $10,000 maximum\n    networkFee: 100, // $1 network fee\n    confirmationsRequired: 15,\n    processingTimeMinutes: 5,\n    metadata: {\n      decimals: 18,\n      explorerUrl: 'https://bscscan.com/tx/',\n      rpcUrl: 'https://bsc-dataseed.binance.org/'\n    }\n  },\n  {\n    network: 'tron',\n    displayName: 'Tron',\n    currency: 'TRX',\n    isActive: true,\n    minWithdrawal: 500, // $5 minimum\n    maxWithdrawal: 1000000, // $10,000 maximum\n    networkFee: 50, // $0.50 network fee\n    confirmationsRequired: 20,\n    processingTimeMinutes: 3,\n    metadata: {\n      decimals: 6,\n      explorerUrl: 'https://tronscan.org/#/transaction/',\n      rpcUrl: 'https://api.trongrid.io'\n    }\n  },\n  {\n    network: 'polygon',\n    displayName: 'Polygon',\n    currency: 'MATIC',\n    isActive: true,\n    minWithdrawal: 500, // $5 minimum\n    maxWithdrawal: 1000000, // $10,000 maximum\n    networkFee: 25, // $0.25 network fee\n    confirmationsRequired: 100,\n    processingTimeMinutes: 2,\n    metadata: {\n      decimals: 18,\n      explorerUrl: 'https://polygonscan.com/tx/',\n      rpcUrl: 'https://polygon-rpc.com/'\n    }\n  }\n];\n\nexport async function initializeCryptoNetworks() {\n  try {\n    console.log('Initializing cryptocurrency networks...');\n    \n    for (const networkData of defaultNetworks) {\n      try {\n        await storage.createCryptoNetworkSettings(networkData);\n        console.log(`✓ Initialized ${networkData.displayName} network`);\n      } catch (error) {\n        // Network might already exist, skip error\n        console.log(`- ${networkData.displayName} network already exists`);\n      }\n    }\n    \n    console.log('✓ Cryptocurrency networks initialization completed');\n  } catch (error) {\n    console.error('Error initializing crypto networks:', error);\n  }\n}\n\n// Auto-run if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  initializeCryptoNetworks()\n    .then(() => process.exit(0))\n    .catch((error) => {\n      console.error('Failed to initialize crypto networks:', error);\n      process.exit(1);\n    });\n}\n","size_bytes":3177},"server/payment-service.ts":{"content":"\nimport Stripe from 'stripe';\nimport { storage } from './storage';\nimport { sendSubmissionStatusEmail } from './email-service';\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY || 'sk_test_fake', {\n  apiVersion: '2023-10-16',\n});\n\nexport class PaymentService {\n  // Commission calculation\n  static calculateCommission(amount: number, rate: number = 1500): { commission: number, payout: number } {\n    const commission = Math.floor((amount * rate) / 10000); // rate is in basis points\n    const payout = amount - commission;\n    return { commission, payout };\n  }\n\n  // Create payment intent for company deposits\n  static async createPaymentIntent(companyId: number, amount: number, currency: string = 'USD', purpose: string = 'wallet_topup') {\n    try {\n      // Check rate limits\n      const canProceed = await storage.checkRateLimit(companyId, '', 'payment_intent', 10, 60);\n      if (!canProceed) {\n        throw new Error('Rate limit exceeded for payment intents');\n      }\n\n      // Create Stripe payment intent\n      const stripeIntent = await stripe.paymentIntents.create({\n        amount,\n        currency: currency.toLowerCase(),\n        automatic_payment_methods: { enabled: true },\n        metadata: {\n          companyId: companyId.toString(),\n          purpose\n        }\n      });\n\n      // Store in database\n      const paymentIntent = await storage.createPaymentIntent({\n        stripePaymentIntentId: stripeIntent.id,\n        companyId,\n        amount,\n        currency: currency.toUpperCase(),\n        purpose,\n        metadata: { stripeClientSecret: stripeIntent.client_secret }\n      });\n\n      return {\n        paymentIntent,\n        clientSecret: stripeIntent.client_secret\n      };\n    } catch (error) {\n      console.error('Error creating payment intent:', error);\n      throw error;\n    }\n  }\n\n  // Confirm payment and update company wallet\n  static async confirmPayment(paymentIntentId: string) {\n    try {\n      const stripeIntent = await stripe.paymentIntents.retrieve(paymentIntentId);\n      \n      if (stripeIntent.status !== 'succeeded') {\n        throw new Error('Payment not completed');\n      }\n\n      // Update payment intent status\n      const paymentIntent = await storage.updatePaymentIntent(\n        parseInt(stripeIntent.metadata.companyId), \n        'succeeded', \n        paymentIntentId\n      );\n\n      if (!paymentIntent) {\n        throw new Error('Payment intent not found');\n      }\n\n      // Update company wallet\n      await storage.updateCompanyWalletBalance(paymentIntent.companyId, stripeIntent.amount_received);\n\n      // Create transaction record\n      await storage.createCompanyTransaction({\n        companyId: paymentIntent.companyId,\n        amount: stripeIntent.amount_received,\n        type: 'payment',\n        note: `Payment via Stripe: ${paymentIntentId}`\n      });\n\n      return paymentIntent;\n    } catch (error) {\n      console.error('Error confirming payment:', error);\n      throw error;\n    }\n  }\n\n  // Create escrow when bounty is approved\n  static async createEscrowForBounty(submissionId: number, bountyAmount: number, companyId: number) {\n    try {\n      const { commission, payout } = this.calculateCommission(bountyAmount);\n\n      // Check if company has sufficient balance\n      const companyWallet = await storage.getCompanyWallet(companyId);\n      if (!companyWallet || companyWallet.balance < bountyAmount) {\n        throw new Error('Insufficient company balance');\n      }\n\n      // Create escrow account\n      const escrow = await storage.createEscrowAccount({\n        companyId,\n        submissionId,\n        amount: bountyAmount,\n        currency: 'USD',\n        platformCommission: commission,\n        researcherPayout: payout,\n        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 days\n      });\n\n      // Deduct from company wallet\n      await storage.updateCompanyWalletBalance(companyId, -bountyAmount);\n\n      // Create commission record\n      await storage.createCommission({\n        submissionId,\n        totalAmount: bountyAmount,\n        commissionRate: 1500, // 15%\n        commissionAmount: commission,\n        currency: 'USD'\n      });\n\n      return escrow;\n    } catch (error) {\n      console.error('Error creating escrow:', error);\n      throw error;\n    }\n  }\n\n  // Release escrow and initiate payout\n  static async releaseEscrowAndPayout(submissionId: number, paymentMethodId: number, paymentDetails: any) {\n    try {\n      const escrow = await storage.getEscrowBySubmission(submissionId);\n      if (!escrow || escrow.status !== 'held') {\n        throw new Error('Escrow not found or not in held status');\n      }\n\n      // Update escrow status\n      await storage.updateEscrowStatus(escrow.id, 'released');\n\n      // Get submission details\n      const submission = await storage.getSubmission(submissionId);\n      if (!submission) {\n        throw new Error('Submission not found');\n      }\n\n      // Create payout\n      const payout = await storage.createPayout({\n        userId: submission.userId,\n        submissionId,\n        escrowAccountId: escrow.id,\n        amount: escrow.researcherPayout,\n        currency: escrow.currency,\n        paymentMethodId,\n        paymentMethodDetails: paymentDetails,\n        scheduledFor: new Date()\n      });\n\n      // Process payout based on payment method\n      await this.processPayout(payout.id);\n\n      return payout;\n    } catch (error) {\n      console.error('Error releasing escrow and creating payout:', error);\n      throw error;\n    }\n  }\n\n  // Process payout based on payment method\n  static async processPayout(payoutId: number) {\n    try {\n      const payout = await storage.getUserPayouts(payoutId);\n      if (!payout) {\n        throw new Error('Payout not found');\n      }\n\n      // Update status to processing\n      await storage.updatePayoutStatus(payoutId, 'processing');\n\n      // Simulate processing based on payment method\n      // In production, integrate with actual payment providers\n      \n      const paymentMethod = await storage.getPaymentMethods();\n      const method = paymentMethod.find(pm => pm.id === payout.paymentMethodId);\n\n      if (!method) {\n        throw new Error('Payment method not found');\n      }\n\n      let externalTransactionId: string;\n      let success = false;\n\n      switch (method.type) {\n        case 'digital_wallet':\n          // Simulate PayPal/Stripe payout\n          externalTransactionId = `${method.name.toLowerCase()}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n          success = Math.random() > 0.1; // 90% success rate for simulation\n          break;\n\n        case 'crypto':\n          // Simulate crypto transfer\n          externalTransactionId = `0x${Math.random().toString(16).substr(2, 40)}`;\n          success = Math.random() > 0.05; // 95% success rate for simulation\n          break;\n\n        case 'bank_transfer':\n          // Simulate bank transfer\n          externalTransactionId = `WIRE_${Date.now()}`;\n          success = Math.random() > 0.02; // 98% success rate for simulation\n          break;\n\n        default:\n          throw new Error('Unsupported payment method');\n      }\n\n      if (success) {\n        await storage.updatePayoutStatus(payoutId, 'completed', externalTransactionId);\n        \n        // Send success notification\n        const submission = await storage.getSubmission(payout.submissionId);\n        if (submission) {\n          await sendSubmissionStatusEmail(submission, `Your bounty payment of $${payout.amount / 100} has been processed successfully via ${method.name}.`);\n        }\n      } else {\n        await storage.updatePayoutStatus(payoutId, 'failed', undefined, 'Payment processor error');\n      }\n\n      return success;\n    } catch (error) {\n      console.error('Error processing payout:', error);\n      await storage.updatePayoutStatus(payoutId, 'failed', undefined, error.message);\n      throw error;\n    }\n  }\n\n  // Handle webhooks from payment providers\n  static async handleStripeWebhook(event: any) {\n    try {\n      switch (event.type) {\n        case 'payment_intent.succeeded':\n          await this.confirmPayment(event.data.object.id);\n          break;\n\n        case 'payment_intent.payment_failed':\n          // Handle failed payment\n          await storage.updatePaymentIntent(\n            parseInt(event.data.object.metadata.companyId),\n            'failed'\n          );\n          break;\n\n        default:\n          console.log(`Unhandled event type: ${event.type}`);\n      }\n    } catch (error) {\n      console.error('Error handling Stripe webhook:', error);\n      throw error;\n    }\n  }\n\n  // Fraud detection\n  static async detectFraud(userId: number, amount: number, ipAddress: string): Promise<{ isFraudulent: boolean, reason?: string }> {\n    try {\n      // Check for suspicious patterns\n      const recentPayouts = await storage.getUserPayouts(userId);\n      const recentLargePayouts = recentPayouts.filter(p => \n        p.amount > 50000 && // > $500\n        new Date(p.createdAt).getTime() > Date.now() - 24 * 60 * 60 * 1000 // Last 24 hours\n      );\n\n      if (recentLargePayouts.length > 3) {\n        return { isFraudulent: true, reason: 'Multiple large payouts in 24 hours' };\n      }\n\n      if (amount > 100000) { // > $1000\n        return { isFraudulent: true, reason: 'Large payout amount requires manual review' };\n      }\n\n      // Check rate limits\n      const canProceed = await storage.checkRateLimit(userId, ipAddress, 'payout_request', 5, 60);\n      if (!canProceed) {\n        return { isFraudulent: true, reason: 'Rate limit exceeded' };\n      }\n\n      return { isFraudulent: false };\n    } catch (error) {\n      console.error('Error in fraud detection:', error);\n      return { isFraudulent: false };\n    }\n  }\n}\n","size_bytes":9731},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { setupVite, log } from \"./vite\";\nimport { getAdminSessions } from \"./index\";\nimport { gradeVulnerability } from \"./vulnerability-grading\";\nimport { storage } from \"./storage\";\nimport { insertPublicMessageSchema } from \"../shared/schema\";\n\nimport bcrypt from 'bcrypt'; // Importing bcrypt\n\nexport function registerRoutes(app: Express): Server {\n  // Health check endpoint\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", timestamp: new Date().toISOString() });\n  });\n\n  // Get all programs\n  app.get(\"/api/programs\", async (req, res) => {\n    try {\n      const programs = await storage.getAllPrograms();\n      res.json(programs || []);\n    } catch (error) {\n      console.error(\"Error fetching programs:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Vulnerability grading endpoint\n  app.post(\"/api/grade-vulnerability\", (req, res) => {\n    try {\n      const { vulnerabilityType, description, affectsAdmin, allowsCodeExecution, allowsDataAccess } = req.body;\n\n      if (!vulnerabilityType) {\n        return res.status(400).json({ \n          error: \"Missing required field: vulnerabilityType\" \n        });\n      }\n\n      const grading = gradeVulnerability({\n        vulnerabilityType,\n        description: description || \"\",\n        affectsAdmin: affectsAdmin || false,\n        allowsCodeExecution: allowsCodeExecution || false,\n        allowsDataAccess: allowsDataAccess || false\n      });\n\n      res.json(grading);\n    } catch (error) {\n      console.error(\"Error grading vulnerability:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/register\", async (req, res) => {\n    try {\n      const { username, email, password, userType } = req.body;\n\n      // Validate input\n      if (!username || !email || !password || !userType) {\n        return res.status(400).json({ error: \"All fields are required\" });\n      }\n\n      // Validate email format\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(email)) {\n        return res.status(400).json({ error: \"Invalid email format\" });\n      }\n\n      // Validate password length\n      if (password.length < 6) {\n        return res.status(400).json({ error: \"Password must be at least 6 characters long\" });\n      }\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ error: \"User already exists\" });\n      }\n\n      // Check if username is taken\n      const existingUsername = await storage.getUserByUsername(username);\n      if (existingUsername) {\n        return res.status(400).json({ error: \"Username already taken\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(password, 10);\n\n      // Create user\n      const newUser = await storage.createUser({\n        username,\n        email,\n        password: hashedPassword,\n        userType,\n        ...req.body // Include additional fields like companyName, etc.\n      });\n\n      // Set session\n      req.session.user = { id: newUser.id };\n\n      // Return the user object (without password)\n      const { password: _, ...userWithoutPassword } = newUser;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Public Chat endpoints\n  app.get(\"/api/public-chat\", async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 50;\n      const offset = parseInt(req.query.offset as string) || 0;\n\n      const messages = await storage.getPublicMessages(limit, offset);\n      res.json(messages.reverse()); // Reverse to show oldest first\n    } catch (error) {\n      console.error(\"Error fetching public messages:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/public-chat\", async (req, res) => {\n    try {\n      // Check if user is authenticated\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const validation = insertPublicMessageSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ \n          error: \"Invalid message data\",\n          details: validation.error.errors\n        });\n      }\n\n      const { content, messageType = \"message\" } = validation.data;\n\n      // Basic content validation\n      if (!content.trim()) {\n        return res.status(400).json({ error: \"Message cannot be empty\" });\n      }\n\n      if (content.length > 1000) {\n        return res.status(400).json({ error: \"Message too long (max 1000 characters)\" });\n      }\n\n      // Only companies can post announcements\n      if (messageType === \"announcement\" && req.session.user.userType !== \"company\") {\n        return res.status(403).json({ error: \"Only companies can post announcements\" });\n      }\n\n      const message = await storage.createPublicMessage({\n        content: content.trim(),\n        messageType,\n        userId: req.session.user.id\n      });\n\n      if (!message) {\n        return res.status(500).json({ error: \"Failed to create message\" });\n      }\n\n      res.status(201).json(message);\n    } catch (error) {\n      console.error(\"Error creating public message:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/public-chat/:id\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const messageId = parseInt(req.params.id);\n      if (isNaN(messageId)) {\n        return res.status(400).json({ error: \"Invalid message ID\" });\n      }\n\n      const deleted = await storage.deletePublicMessage(messageId, req.session.user.id);\n\n      if (!deleted) {\n        return res.status(404).json({ error: \"Message not found or not authorized\" });\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting public message:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Triage Service Routes\n\n  // Get company triage services\n  app.get(\"/api/triage-services\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || user.userType !== 'company') {\n        return res.status(403).json({ error: \"Company access required\" });\n      }\n\n      const services = await storage.getTriageServicesByCompany(user.id);\n      res.json(services);\n    } catch (error) {\n      console.error(\"Error fetching triage services:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Create new triage service\n  app.post(\"/api/triage-services\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || user.userType !== 'company') {\n        return res.status(403).json({ error: \"Company access required\" });\n      }\n\n      const serviceData = {\n        ...req.body,\n        companyId: user.id\n      };\n\n      const service = await storage.createTriageService(serviceData);\n      if (!service) {\n        return res.status(500).json({ error: \"Failed to create triage service\" });\n      }\n\n      res.status(201).json(service);\n    } catch (error) {\n      console.error(\"Error creating triage service:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Update triage service\n  app.put(\"/api/triage-services/:id\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || user.userType !== 'company') {\n        return res.status(403).json({ error: \"Company access required\" });\n      }\n\n      const serviceId = parseInt(req.params.id);\n      if (isNaN(serviceId)) {\n        return res.status(400).json({ error: \"Invalid service ID\" });\n      }\n\n      const service = await storage.updateTriageService(serviceId, req.body);\n      if (!service) {\n        return res.status(404).json({ error: \"Service not found\" });\n      }\n\n      res.json(service);\n    } catch (error) {\n      console.error(\"Error updating triage service:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get triage reports for company\n  app.get(\"/api/triage-reports\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || user.userType !== 'company') {\n        return res.status(403).json({ error: \"Company access required\" });\n      }\n\n      const reports = await storage.getTriageReportsByCompany(user.id);\n      res.json(reports);\n    } catch (error) {\n      console.error(\"Error fetching triage reports:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get specific triage report\n  app.get(\"/api/triage-reports/:id\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const reportId = parseInt(req.params.id);\n      if (isNaN(reportId)) {\n        return res.status(400).json({ error: \"Invalid report ID\" });\n      }\n\n      const report = await storage.getTriageReport(reportId);\n      if (!report) {\n        return res.status(404).json({ error: \"Report not found\" });\n      }\n\n      // Check if user has access to this report\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || (user.userType === 'company' && report.companyId !== user.id)) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error fetching triage report:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Create triage report for submission\n  app.post(\"/api/triage-reports\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || user.userType !== 'company') {\n        return res.status(403).json({ error: \"Company access required\" });\n      }\n\n      const { submissionId, triageServiceId } = req.body;\n\n      // Check if submission exists and belongs to the company\n      const submission = await storage.getSubmission(submissionId);\n      if (!submission) {\n        return res.status(404).json({ error: \"Submission not found\" });\n      }\n\n      // Check if triage report already exists for this submission\n      const existingReport = await storage.getTriageReportBySubmission(submissionId);\n      if (existingReport) {\n        return res.status(400).json({ error: \"Triage report already exists for this submission\" });\n      }\n\n      // Assign to available analyst\n      const availableAnalysts = await storage.getAvailableTriageAnalysts();\n      const analyst = availableAnalysts[0]; // Get the best available analyst\n\n      const reportData = {\n        submissionId,\n        triageServiceId,\n        companyId: user.id,\n        triageAnalystId: analyst?.id,\n        status: 'pending',\n        priority: 'medium',\n        dueDate: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 hours from now\n        triageStartedAt: new Date()\n      };\n\n      const report = await storage.createTriageReport(reportData);\n      if (!report) {\n        return res.status(500).json({ error: \"Failed to create triage report\" });\n      }\n\n      // Update analyst workload if assigned\n      if (analyst) {\n        await storage.updateTriageAnalystWorkload(analyst.id, analyst.currentWorkload + 1);\n      }\n\n      res.status(201).json(report);\n    } catch (error) {\n      console.error(\"Error creating triage report:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Update triage report (for analysts)\n  app.put(\"/api/triage-reports/:id\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const reportId = parseInt(req.params.id);\n      if (isNaN(reportId)) {\n        return res.status(400).json({ error: \"Invalid report ID\" });\n      }\n\n      const report = await storage.updateTriageReport(reportId, req.body);\n      if (!report) {\n        return res.status(404).json({ error: \"Report not found\" });\n      }\n\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error updating triage report:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get triage communications\n  app.get(\"/api/triage-communications/:reportId\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const reportId = parseInt(req.params.reportId);\n      if (isNaN(reportId)) {\n        return res.status(400).json({ error: \"Invalid report ID\" });\n      }\n\n      const communications = await storage.getTriageCommunications(reportId);\n      res.json(communications);\n    } catch (error) {\n      console.error(\"Error fetching triage communications:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Create triage communication\n  app.post(\"/api/triage-communications\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const communicationData = {\n        ...req.body,\n        fromUserId: req.session.user.id\n      };\n\n      const communication = await storage.createTriageCommunication(communicationData);\n      if (!communication) {\n        return res.status(500).json({ error: \"Failed to create communication\" });\n      }\n\n      res.status(201).json(communication);\n    } catch (error) {\n      console.error(\"Error creating triage communication:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get triage subscriptions\n  app.get(\"/api/triage-subscriptions\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || user.userType !== 'company') {\n        return res.status(403).json({ error: \"Company access required\" });\n      }\n\n      const subscriptions = await storage.getTriageSubscriptionsByCompany(user.id);\n      res.json(subscriptions);\n    } catch (error) {\n      console.error(\"Error fetching triage subscriptions:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Create triage subscription\n  app.post(\"/api/triage-subscriptions\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || user.userType !== 'company') {\n        return res.status(403).json({ error: \"Company access required\" });\n      }\n\n      const subscriptionData = {\n        ...req.body,\n        companyId: user.id\n      };\n\n      const subscription = await storage.createTriageSubscription(subscriptionData);\n      if (!subscription) {\n        return res.status(500).json({ error: \"Failed to create subscription\" });\n      }\n\n      res.status(201).json(subscription);\n    } catch (error) {\n      console.error(\"Error creating triage subscription:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Admin route: Get all triage reports (for analysts)\n  app.get(\"/api/admin/triage-reports\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || (user.userType !== 'admin' && user.userType !== 'analyst')) {\n        return res.status(403).json({ error: \"Admin or analyst access required\" });\n      }\n\n      // If user is an analyst, get their assigned reports\n      if (user.userType === 'analyst') {\n        const analyst = await storage.getTriageAnalystByUserId(user.id);\n        if (!analyst) {\n          return res.status(404).json({ error: \"Analyst profile not found\" });\n        }\n        const reports = await storage.getTriageReportsByAnalyst(analyst.id);\n        res.json(reports);\n      } else {\n        // Admin can see all reports - would need to implement getAllTriageReports\n        res.json([]);\n      }\n    } catch (error) {\n      console.error(\"Error fetching admin triage reports:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Auto-assign triage on submission creation\n  app.post(\"/api/submissions\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const submissionData = {\n        ...req.body,\n        userId: req.session.user.id\n      };\n\n      const submission = await storage.createSubmission(submissionData);\n      if (!submission) {\n        return res.status(500).json({ error: \"Failed to create submission\" });\n      }\n\n      // Check if the program has auto-triage enabled\n      const program = await storage.getProgram(submission.programId);\n      if (program) {\n        // Look for company's triage services\n        const services = await storage.getTriageServicesByCompany(program.companyId || 0);\n        const autoTriageService = services.find(s => s.autoAssignTriage && s.isActive);\n\n        if (autoTriageService) {\n          // Auto-create triage report\n          const availableAnalysts = await storage.getAvailableTriageAnalysts();\n          const analyst = availableAnalysts[0];\n\n          const reportData = {\n            submissionId: submission.id,\n            triageServiceId: autoTriageService.id,\n            companyId: autoTriageService.companyId,\n            triageAnalystId: analyst?.id,\n            status: 'pending',\n            priority: 'medium',\n            dueDate: new Date(Date.now() + (autoTriageService.responseTimeHours || 24) * 60 * 60 * 1000),\n            triageStartedAt: new Date()\n          };\n\n          await storage.createTriageReport(reportData);\n\n          if (analyst) {\n            await storage.updateTriageAnalystWorkload(analyst.id, analyst.currentWorkload + 1);\n          }\n        }\n      }\n\n      res.status(201).json(submission);\n    } catch (error) {\n      console.error(\"Error creating submission:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Moderation System Routes\n\n  // Get moderation team members\n  app.get(\"/api/moderation/team\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || (user.userType !== 'admin' && user.userType !== 'analyst')) {\n        return res.status(403).json({ error: \"Admin or analyst access required\" });\n      }\n\n      const department = req.query.department as string;\n      const members = await storage.getModerationTeamMembers(department);\n      res.json(members);\n    } catch (error) {\n      console.error(\"Error fetching moderation team:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Add moderation team member\n  app.post(\"/api/moderation/team\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || user.userType !== 'admin') {\n        return res.status(403).json({ error: \"Admin access required\" });\n      }\n\n      const member = await storage.createModerationTeamMember(req.body);\n      res.status(201).json(member);\n    } catch (error) {\n      console.error(\"Error creating moderation team member:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get moderation reviews\n  app.get(\"/api/moderation/reviews\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || (user.userType !== 'admin' && user.userType !== 'analyst')) {\n        return res.status(403).json({ error: \"Admin or analyst access required\" });\n      }\n\n      const filters = {\n        reviewerId: req.query.reviewer_id ? parseInt(req.query.reviewer_id as string) : undefined,\n        status: req.query.status as string,\n        priority: req.query.priority as string,\n        category: req.query.category as string,\n        limit: req.query.limit ? parseInt(req.query.limit as string) : 50,\n        offset: req.query.offset ? parseInt(req.query.offset as string) : 0\n      };\n\n      // If user is not admin, only show their assigned reviews\n      if (user.userType !== 'admin') {\n        filters.reviewerId = user.id;\n      }\n\n      const reviews = await storage.getModerationReviews(filters);\n      res.json(reviews);\n    } catch (error) {\n      console.error(\"Error fetching moderation reviews:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get specific moderation review\n  app.get(\"/api/moderation/reviews/:id\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || (user.userType !== 'admin' && user.userType !== 'analyst')) {\n        return res.status(403).json({ error: \"Admin or analyst access required\" });\n      }\n\n      const reviewId = parseInt(req.params.id);\n      const review = await storage.getModerationReview(reviewId);\n\n      if (!review) {\n        return res.status(404).json({ error: \"Review not found\" });\n      }\n\n      // Check if user has access to this review\n      if (user.userType !== 'admin' && review.reviewerId !== user.id) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n\n      res.json(review);\n    } catch (error) {\n      console.error(\"Error fetching moderation review:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Create moderation review\n  app.post(\"/api/moderation/reviews\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || (user.userType !== 'admin' && user.userType !== 'analyst')) {\n        return res.status(403).json({ error: \"Admin or analyst access required\" });\n      }\n\n      const reviewData = {\n        ...req.body,\n        assignedBy: user.id\n      };\n\n      const review = await storage.createModerationReview(reviewData);\n\n      // Log the action\n      await storage.createModerationAuditLog({\n        reviewId: review.id,\n        submissionId: review.submissionId,\n        userId: user.id,\n        action: 'review_created',\n        description: 'Moderation review created',\n        metadata: { reviewData }\n      });\n\n      // Create notification for assigned reviewer\n      if (review.reviewerId) {\n        await storage.createModerationNotification({\n          recipientId: review.reviewerId,\n          senderId: user.id,\n          reviewId: review.id,\n          type: 'assignment',\n          title: 'New Review Assignment',\n          message: `You have been assigned a new review for submission #${review.submissionId}`,\n          actionUrl: `/moderation/reviews/${review.id}`\n        });\n      }\n\n      res.status(201).json(review);\n    } catch (error) {\n      console.error(\"Error creating moderation review:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Update moderation review\n  app.put(\"/api/moderation/reviews/:id\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || (user.userType !== 'admin' && user.userType !== 'analyst')) {\n        return res.status(403).json({ error: \"Admin or analyst access required\" });\n      }\n\n      const reviewId = parseInt(req.params.id);\n      const existingReview = await storage.getModerationReview(reviewId);\n\n      if (!existingReview) {\n        return res.status(404).json({ error: \"Review not found\" });\n      }\n\n      // Check if user has access to update this review\n      if (user.userType !== 'admin' && existingReview.reviewerId !== user.id) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n\n      const updateData = req.body;\n      const updatedReview = await storage.updateModerationReview(reviewId, updateData);\n\n      // Log the action\n      await storage.createModerationAuditLog({\n        reviewId: reviewId,\n        submissionId: existingReview.submissionId,\n        userId: user.id,\n        action: 'review_updated',\n        description: 'Moderation review updated',\n        metadata: { changes: updateData }\n      });\n\n      res.json(updatedReview);\n    } catch (error) {\n      console.error(\"Error updating moderation review:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Assign review to reviewer\n  app.post(\"/api/moderation/reviews/:id/assign\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || (user.userType !== 'admin' && user.userType !== 'analyst')) {\n        return res.status(403).json({ error: \"Admin or analyst access required\" });\n      }\n\n      const reviewId = parseInt(req.params.id);\n      const { reviewerId } = req.body;\n\n      const updatedReview = await storage.assignModerationReview(reviewId, reviewerId, user.id);\n\n      // Log the action\n      await storage.createModerationAuditLog({\n        reviewId: reviewId,\n        submissionId: updatedReview.submissionId,\n        userId: user.id,\n        action: 'review_assigned',\n        description: `Review assigned to user ${reviewerId}`,\n        metadata: { reviewerId }\n      });\n\n      // Create notification for assigned reviewer\n      await storage.createModerationNotification({\n        recipientId: reviewerId,\n        senderId: user.id,\n        reviewId: reviewId,\n        type: 'assignment',\n        title: 'Review Assignment',\n        message: `You have been assigned a review for submission #${updatedReview.submissionId}`,\n        actionUrl: `/moderation/reviews/${reviewId}`\n      });\n\n      res.json(updatedReview);\n    } catch (error) {\n      console.error(\"Error assigning review:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get comments for a review\n  app.get(\"/api/moderation/reviews/:id/comments\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || (user.userType !== 'admin' && user.userType !== 'analyst')) {\n        return res.status(403).json({ error: \"Admin or analyst access required\" });\n      }\n\n      const reviewId = parseInt(req.params.id);\n      const comments = await storage.getModerationComments(reviewId);\n      res.json(comments);\n    } catch (error) {\n      console.error(\"Error fetching moderation comments:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Add comment to review\n  app.post(\"/api/moderation/reviews/:id/comments\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || (user.userType !== 'admin' && user.userType !== 'analyst')) {\n        return res.status(403).json({ error: \"Admin or analyst access required\" });\n      }\n\n      const reviewId = parseInt(req.params.id);\n      const commentData = {\n        ...req.body,\n        reviewId,\n        authorId: user.id\n      };\n\n      const comment = await storage.createModerationComment(commentData);\n\n      // Log the action\n      await storage.createModerationAuditLog({\n        reviewId: reviewId,\n        userId: user.id,\n        action: 'comment_added',\n        description: 'Comment added to review',\n        metadata: { commentId: comment.id }\n      });\n\n      // Create notifications for mentioned users\n      if (comment.mentions && Array.isArray(comment.mentions)) {\n        for (const mentionedUserId of comment.mentions) {\n          await storage.createModerationNotification({\n            recipientId: mentionedUserId,\n            senderId: user.id,\n            reviewId: reviewId,\n            type: 'mention',\n            title: 'You were mentioned',\n            message: `You were mentioned in a comment on review #${reviewId}`,\n            actionUrl: `/moderation/reviews/${reviewId}`\n          });\n        }\n      }\n\n      res.status(201).json(comment);\n    } catch (error) {\n      console.error(\"Error creating moderation comment:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get available reviewers\n  app.get(\"/api/moderation/reviewers\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || (user.userType !== 'admin' && user.userType !== 'analyst')) {\n        return res.status(403).json({ error: \"Admin or analyst access required\" });\n      }\n\n      const specialization = req.query.specialization as string;\n      const reviewers = await storage.getAvailableReviewers(specialization);\n      res.json(reviewers);\n    } catch (error) {\n      console.error(\"Error fetching available reviewers:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get moderation stats\n  app.get(\"/api/moderation/stats\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || (user.userType !== 'admin' && user.userType !== 'analyst')) {\n        return res.status(403).json({ error: \"Admin or analyst access required\" });\n      }\n\n      const reviewerId = req.query.reviewer_id ? parseInt(req.query.reviewer_id as string) : undefined;\n      const dateFrom = req.query.date_from ? new Date(req.query.date_from as string) : undefined;\n      const dateTo = req.query.date_to ? new Date(req.query.date_to as string) : undefined;\n\n      const stats = await storage.getModerationStats(reviewerId, dateFrom, dateTo);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching moderation stats:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get moderation notifications\n  app.get(\"/api/moderation/notifications\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || (user.userType !== 'admin' && user.userType !== 'analyst')) {\n        return res.status(403).json({ error: \"Admin or analyst access required\" });\n      }\n\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      const notifications = await storage.getModerationNotifications(user.id, limit);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching moderation notifications:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Mark notification as read\n  app.put(\"/api/moderation/notifications/:id/read\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const notificationId = parseInt(req.params.id);\n      const notification = await storage.markNotificationAsRead(notificationId);\n      res.json(notification);\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get audit logs\n  app.get(\"/api/moderation/audit\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || user.userType !== 'admin') {\n        return res.status(403).json({ error: \"Admin access required\" });\n      }\n\n      const reviewId = req.query.review_id ? parseInt(req.query.review_id as string) : undefined;\n      const submissionId = req.query.submission_id ? parseInt(req.query.submission_id as string) : undefined;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n\n      const auditLogs = await storage.getModerationAuditLogs(reviewId, submissionId, limit);\n      res.json(auditLogs);\n    } catch (error) {\n      console.error(\"Error fetching audit logs:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Two-Factor Authentication Routes\n  app.post(\"/api/auth/send-2fa-code\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const { method, operation, amount } = req.body;\n      const user = await storage.getUser(req.session.user.id);\n      \n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      // Generate 6-digit code\n      const code = Math.floor(100000 + Math.random() * 900000).toString();\n      \n      // Store code in session with expiration (5 minutes)\n      req.session.twoFactorCode = {\n        code,\n        operation,\n        amount,\n        expiresAt: Date.now() + 5 * 60 * 1000,\n        userId: user.id\n      };\n\n      // In production, send actual SMS/email\n      // For demo, we'll log the code\n      console.log(`2FA Code for ${user.email}: ${code} (Operation: ${operation})`);\n\n      // Simulate sending code\n      if (method === 'email') {\n        // Send email with code\n        console.log(`Sending 2FA code via email to ${user.email}: ${code}`);\n      } else if (method === 'sms') {\n        // Send SMS with code\n        console.log(`Sending 2FA code via SMS: ${code}`);\n      }\n\n      // Create audit log for 2FA request\n      await storage.createActivity({\n        userId: user.id,\n        type: '2fa_requested',\n        message: `2FA code requested for ${operation}`,\n        details: `Method: ${method}, Amount: ${amount || 'N/A'}`,\n        relatedId: user.id\n      });\n\n      res.json({ success: true, message: \"Verification code sent\" });\n    } catch (error) {\n      console.error(\"Error sending 2FA code:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/auth/verify-2fa\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const { code, operation, amount } = req.body;\n      const storedData = req.session.twoFactorCode;\n\n      if (!storedData || !code) {\n        return res.status(400).json({ error: \"Invalid verification attempt\" });\n      }\n\n      // Check if code has expired\n      if (Date.now() > storedData.expiresAt) {\n        delete req.session.twoFactorCode;\n        return res.status(400).json({ error: \"Verification code expired\" });\n      }\n\n      // Verify code and operation match\n      if (storedData.code !== code || storedData.operation !== operation || storedData.userId !== req.session.user.id) {\n        // Rate limiting for failed attempts\n        const canAttempt = await storage.checkRateLimit(req.session.user.id, '', '2fa_verify', 5, 60);\n        if (!canAttempt) {\n          return res.status(429).json({ error: \"Too many failed attempts. Please try again later.\" });\n        }\n\n        return res.status(400).json({ error: \"Invalid verification code\" });\n      }\n\n      // Clear the used code\n      delete req.session.twoFactorCode;\n\n      // Create audit log for successful 2FA\n      await storage.createActivity({\n        userId: req.session.user.id,\n        type: '2fa_verified',\n        message: `2FA verification successful for ${operation}`,\n        details: `Amount: ${amount || 'N/A'}`,\n        relatedId: req.session.user.id\n      });\n\n      res.json({ success: true, message: \"Verification successful\" });\n    } catch (error) {\n      console.error(\"Error verifying 2FA code:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Admin Authentication Routes\n  app.post(\"/api/admin/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n\n      // For demo purposes - in production, use proper admin authentication\n      if (email === \"admin@cyberhunt.com\" && password === \"AdminSecure123!\") {\n        // Create a simple admin token\n        const adminToken = Buffer.from(`admin:${Date.now()}`).toString('base64');\n\n        // Store admin session\n        req.session.adminUser = { \n          id: 1, \n          email: email, \n          userType: 'admin',\n          loginTime: new Date().toISOString()\n        };\n\n        res.json({ \n          success: true, \n          token: adminToken, \n          message: \"Admin login successful\" \n        });\n      } else {\n        res.status(401).json({ \n          success: false, \n          message: \"Invalid admin credentials\" \n        });\n      }\n    } catch (error) {\n      console.error(\"Admin login error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/admin/verify\", async (req, res) => {\n    try {\n      const authHeader = req.headers.authorization;\n      const token = authHeader?.replace('Bearer ', '');\n\n      if (!token) {\n        return res.status(401).json({ error: \"No token provided\" });\n      }\n\n      // Check if admin session exists\n      if (req.session.adminUser) {\n        res.json({ \n          valid: true, \n          user: req.session.adminUser \n        });\n      } else {\n        res.status(401).json({ error: \"Invalid admin session\" });\n      }\n    } catch (error) {\n      console.error(\"Admin verification error:\", error);\n      res.status(401).json({ error: \"Token verification failed\" });\n    }\n  });\n\n  app.post(\"/api/admin/logout\", async (req, res) => {\n    try {\n      // Clear admin session\n      if (req.session.adminUser) {\n        delete req.session.adminUser;\n      }\n\n      res.json({ success: true, message: \"Admin logout successful\" });\n    } catch (error) {\n      console.error(\"Admin logout error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/admin/stats\", async (req, res) => {\n    try {\n      const authHeader = req.headers.authorization;\n      const token = authHeader?.replace('Bearer ', '');\n\n      if (!token || !req.session.adminUser) {\n        return res.status(401).json({ error: \"Admin authentication required\" });\n      }\n\n      // Get admin statistics\n      const stats = {\n        totalUsers: await storage.getUserCount() || 0,\n        activePrograms: await storage.getActiveProgramsCount() || 0,\n        totalSubmissions: await storage.getSubmissionsCount() || 0,\n        pendingReviews: await storage.getPendingReviewsCount() || 0\n      };\n\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching admin stats:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/admin/users\", async (req, res) => {\n    try {\n      const authHeader = req.headers.authorization;\n      const token = authHeader?.replace('Bearer ', '');\n\n      if (!token || !req.session.adminUser) {\n        return res.status(401).json({ error: \"Admin authentication required\" });\n      }\n\n      const users = await storage.getAllUsers() || [];\n\n      // Remove sensitive information\n      const sanitizedUsers = users.map(user => ({\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        userType: user.userType,\n        createdAt: user.createdAt,\n        emailVerified: user.emailVerified\n      }));\n\n      res.json(sanitizedUsers);\n    } catch (error) {\n      console.error(\"Error fetching admin users:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Cryptocurrency Payment Routes\n\n  // Get crypto network settings\n  app.get(\"/api/crypto/networks\", async (req, res) => {\n    try {\n      const networks = await storage.getCryptoNetworkSettings();\n      res.json(networks);\n    } catch (error) {\n      console.error(\"Error fetching crypto networks:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Create Binance Pay order for companies\n  app.post(\"/api/crypto/payment-intent\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || user.userType !== 'company') {\n        return res.status(403).json({ error: \"Company access required\" });\n      }\n\n      const { amount, currency = 'USDT', purpose = 'wallet_topup' } = req.body;\n\n      if (!amount || amount <= 0) {\n        return res.status(400).json({ error: \"Invalid amount\" });\n      }\n\n      const { CryptoPaymentService } = await import('./crypto-payment-service');\n      const result = await CryptoPaymentService.createBinancePayOrder(\n        user.id,\n        amount,\n        currency,\n        purpose\n      );\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error creating crypto payment intent:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get company crypto payment history\n  app.get(\"/api/crypto/payments\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || user.userType !== 'company') {\n        return res.status(403).json({ error: \"Company access required\" });\n      }\n\n      const payments = await storage.getCryptoPaymentIntentsByCompany(user.id);\n      res.json(payments);\n    } catch (error) {\n      console.error(\"Error fetching crypto payments:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Add user crypto wallet\n  app.post(\"/api/crypto/wallets\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const { walletType, walletAddress, network } = req.body;\n\n      if (!walletType || !walletAddress || !network) {\n        return res.status(400).json({ error: \"Missing required fields\" });\n      }\n\n      const { CryptoPaymentService } = await import('./crypto-payment-service');\n      const wallet = await CryptoPaymentService.addUserWallet(req.session.user.id, {\n        walletType,\n        walletAddress,\n        network\n      });\n\n      res.status(201).json(wallet);\n    } catch (error) {\n      console.error(\"Error adding crypto wallet:\", error);\n      res.status(500).json({ error: error.message || \"Internal server error\" });\n    }\n  });\n\n  // Get user crypto wallets\n  app.get(\"/api/crypto/wallets\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const { CryptoPaymentService } = await import('./crypto-payment-service');\n      const wallets = await CryptoPaymentService.getUserWallets(req.session.user.id);\n      res.json(wallets);\n    } catch (error) {\n      console.error(\"Error fetching crypto wallets:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Create crypto withdrawal\n  app.post(\"/api/crypto/withdrawals\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const { amount, currency, walletAddress, network } = req.body;\n\n      if (!amount || !currency || !walletAddress || !network) {\n        return res.status(400).json({ error: \"Missing required fields\" });\n      }\n\n      if (amount <= 0) {\n        return res.status(400).json({ error: \"Invalid amount\" });\n      }\n\n      const { CryptoPaymentService } = await import('./crypto-payment-service');\n      const withdrawal = await CryptoPaymentService.createCryptoWithdrawal({\n        userId: req.session.user.id,\n        amount,\n        currency,\n        walletAddress,\n        network\n      });\n\n      res.status(201).json(withdrawal);\n    } catch (error) {\n      console.error(\"Error creating crypto withdrawal:\", error);\n      res.status(500).json({ error: error.message || \"Internal server error\" });\n    }\n  });\n\n  // Get user crypto withdrawals\n  app.get(\"/api/crypto/withdrawals\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const { CryptoPaymentService } = await import('./crypto-payment-service');\n      const withdrawals = await CryptoPaymentService.getCryptoWithdrawals(req.session.user.id);\n      res.json(withdrawals);\n    } catch (error) {\n      console.error(\"Error fetching crypto withdrawals:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get user crypto transactions\n  app.get(\"/api/crypto/transactions\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const transactions = await storage.getCryptoTransactionsByUser(req.session.user.id);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching crypto transactions:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Binance Pay webhook\n  app.post(\"/api/crypto/webhooks/binance\", async (req, res) => {\n    try {\n      const signature = req.headers['binancepay-signature'] as string;\n      const timestamp = req.headers['binancepay-timestamp'] as string;\n      const body = JSON.stringify(req.body);\n\n      const { CryptoPaymentService } = await import('./crypto-payment-service');\n\n      // Verify webhook signature\n      const isValid = CryptoPaymentService.verifyWebhookSignature(signature, timestamp, body);\n      if (!isValid) {\n        return res.status(401).json({ error: \"Invalid signature\" });\n      }\n\n      // Process webhook\n      const result = await CryptoPaymentService.handleBinancePayWebhook(req.body);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error handling Binance Pay webhook:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Admin crypto statistics\n  app.get(\"/api/admin/crypto/stats\", async (req, res) => {\n    try {\n      const authHeader = req.headers.authorization;\n      const token = authHeader?.replace('Bearer ', '');\n\n      if (!token || !req.session.adminUser) {\n        return res.status(401).json({ error: \"Admin authentication required\" });\n      }\n\n      const { CryptoPaymentService } = await import('./crypto-payment-service');\n      const stats = await CryptoPaymentService.getCryptoStatistics();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching crypto statistics:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Admin crypto withdrawal management\n  app.get(\"/api/admin/crypto/withdrawals\", async (req, res) => {\n    try {\n      const authHeader = req.headers.authorization;\n      const token = authHeader?.replace('Bearer ', '');\n\n      if (!token || !req.session.adminUser) {\n        return res.status(401).json({ error: \"Admin authentication required\" });\n      }\n\n      const status = req.query.status as string;\n      const withdrawals = await storage.getAdminCryptoWithdrawals(status);\n      res.json(withdrawals);\n    } catch (error) {\n      console.error(\"Error fetching admin crypto withdrawals:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/admin/crypto/withdrawals/:id/status\", async (req, res) => {\n    try {\n      const authHeader = req.headers.authorization;\n      const token = authHeader?.replace('Bearer ', '');\n\n      if (!token || !req.session.adminUser) {\n        return res.status(401).json({ error: \"Admin authentication required\" });\n      }\n\n      const withdrawalId = parseInt(req.params.id);\n      const { status, notes } = req.body;\n\n      if (!withdrawalId || !status) {\n        return res.status(400).json({ error: \"Withdrawal ID and status are required\" });\n      }\n\n      // Get withdrawal details for logging\n      const withdrawal = await storage.getCryptoWithdrawalById(withdrawalId);\n      if (!withdrawal) {\n        return res.status(404).json({ error: \"Withdrawal not found\" });\n      }\n\n      // Update withdrawal status\n      const updatedWithdrawal = await storage.updateCryptoWithdrawalStatus(withdrawalId, status, notes);\n\n      // Create audit log\n      await storage.createAdminAuditLog({\n        adminId: req.session.adminUser.id,\n        action: 'crypto_withdrawal_status_update',\n        targetType: 'crypto_withdrawal',\n        targetId: withdrawalId,\n        details: {\n          previousStatus: withdrawal.status,\n          newStatus: status,\n          notes: notes || null,\n          withdrawalAmount: withdrawal.amount,\n          currency: withdrawal.currency,\n          userId: withdrawal.userId\n        }\n      });\n\n      // If approved, create transaction log\n      if (status === 'approved') {\n        await storage.createTransaction({\n          walletId: withdrawal.walletId || 0,\n          type: 'crypto_withdrawal_approved',\n          amount: -withdrawal.amount,\n          description: `Crypto withdrawal approved: ${(withdrawal.amount / 100).toFixed(2)} ${withdrawal.currency}`,\n          status: 'pending_payout'\n        });\n      }\n\n      // Create notification for user\n      await storage.createNotification({\n        userId: withdrawal.userId,\n        type: 'withdrawal_status_update',\n        message: `Your crypto withdrawal request has been ${status}`,\n        link: '/crypto/withdrawals'\n      });\n\n      res.json(updatedWithdrawal);\n    } catch (error) {\n      console.error(\"Error updating crypto withdrawal status:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Company Crypto Wallet Routes\n  app.get(\"/api/company/wallet\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || user.userType !== 'company') {\n        return res.status(403).json({ error: \"Company access required\" });\n      }\n\n      let wallet = await storage.getCompanyWallet(user.id);\n      if (!wallet) {\n        wallet = await storage.createCompanyWallet(user.id);\n      }\n\n      res.json(wallet);\n    } catch (error) {\n      console.error(\"Error fetching company wallet:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/company/transactions\", async (req, res) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const user = await storage.getUser(req.session.user.id);\n      if (!user || user.userType !== 'company') {\n        return res.status(403).json({ error: \"Company access required\" });\n      }\n\n      const transactions = await storage.getCompanyTransactions(user.id);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching company transactions:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Admin route to manually update company wallet balance\n  app.post(\"/api/admin/company-wallet/update\", async (req, res) => {\n    try {\n      const authHeader = req.headers.authorization;\n      const token = authHeader?.replace('Bearer ', '');\n\n      if (!token || !req.session.adminUser) {\n        return res.status(401).json({ error: \"Admin authentication required\" });\n      }\n\n      const { companyId, amount, note } = req.body;\n\n      if (!companyId || typeof amount !== 'number') {\n        return res.status(400).json({ error: \"Company ID and amount are required\" });\n      }\n\n      // Update company wallet balance\n      await storage.updateCompanyWalletBalance(companyId, amount);\n\n      // Create transaction record\n      await storage.createCompanyTransaction({\n        companyId,\n        amount,\n        type: 'admin_adjustment',\n        note: note || 'Manual balance adjustment by admin'\n      });\n\n      res.json({ success: true, message: \"Company wallet updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating company wallet:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Admin route to get all company wallets\n  app.get(\"/api/admin/company-wallets\", async (req, res) => {\n    try {\n      const authHeader = req.headers.authorization;\n      const token = authHeader?.replace('Bearer ', '');\n\n      if (!token || !req.session.adminUser) {\n        return res.status(401).json({ error: \"Admin authentication required\" });\n      }\n\n      const wallets = await storage.getAllCompanyWallets();\n      res.json(wallets);\n    } catch (error) {\n      console.error(\"Error fetching company wallets:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Crypto Payment Approval Admin Routes\n  app.get(\"/api/admin/crypto-payment-approvals\", async (req, res) => {\n    try {\n      const authHeader = req.headers.authorization;\n      const token = authHeader?.replace('Bearer ', '');\n\n      if (!token || !req.session.adminUser) {\n        return res.status(401).json({ error: \"Admin authentication required\" });\n      }\n\n      const pendingApprovals = await storage.getPendingCryptoPaymentApprovals();\n      res.json(pendingApprovals);\n    } catch (error) {\n      console.error(\"Error fetching crypto payment approvals:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/admin/crypto-payment-approvals/:id/approve\", async (req, res) => {\n    try {\n      const authHeader = req.headers.authorization;\n      const token = authHeader?.replace('Bearer ', '');\n\n      if (!token || !req.session.adminUser) {\n        return res.status(401).json({ error: \"Admin authentication required\" });\n      }\n\n      const { id } = req.params;\n      const { adminNotes } = req.body;\n      const adminId = req.session.adminUser.id;\n\n      // Get the approval record first\n      const approval = await storage.getCryptoPaymentApprovalById(parseInt(id));\n      if (!approval) {\n        return res.status(404).json({ error: \"Approval record not found\" });\n      }\n\n      // Approve the payment\n      const updatedApproval = await storage.approveCryptoPayment(parseInt(id), adminId, adminNotes);\n      if (!updatedApproval) {\n        return res.status(500).json({ error: \"Failed to approve payment\" });\n      }\n\n      // Update company wallet balance\n      const wallet = await storage.getCompanyWallet(approval.companyId);\n      if (wallet) {\n        await storage.updateCompanyWalletBalance(approval.companyId, approval.amount);\n      }\n\n      // Create transaction record\n      await storage.createCompanyTransaction({\n        companyId: approval.companyId,\n        amount: approval.amount,\n        type: 'crypto_payment_approved',\n        note: `Crypto payment approved by admin: ${approval.amount / 100} ${approval.currency} - Memo: ${approval.paymentMemo}`\n      });\n\n      res.json({ success: true, message: \"Payment approved successfully\" });\n    } catch (error) {\n      console.error(\"Error approving crypto payment:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/admin/crypto-payment-approvals/:id/reject\", async (req, res) => {\n    try {\n      const authHeader = req.headers.authorization;\n      const token = authHeader?.replace('Bearer ', '');\n\n      if (!token || !req.session.adminUser) {\n        return res.status(401).json({ error: \"Admin authentication required\" });\n      }\n\n      const { id } = req.params;\n      const { adminNotes } = req.body;\n      const adminId = req.session.adminUser.id;\n\n      // Reject the payment\n      const updatedApproval = await storage.rejectCryptoPayment(parseInt(id), adminId, adminNotes);\n      if (!updatedApproval) {\n        return res.status(500).json({ error: \"Failed to reject payment\" });\n      }\n\n      res.json({ success: true, message: \"Payment rejected successfully\" });\n    } catch (error) {\n      console.error(\"Error rejecting crypto payment:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // User verification admin routes\n  app.get(\"/api/admin/company-users\", async (req, res) => {\n    try {\n      const authHeader = req.headers.authorization;\n      const token = authHeader?.replace('Bearer ', '');\n\n      if (!token || !req.session.adminUser) {\n        return res.status(401).json({ error: \"Admin authentication required\" });\n      }\n\n      const companyUsers = await storage.getCompanyUsers();\n      res.json(companyUsers);\n    } catch (error) {\n      console.error(\"Error fetching company users:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/admin/verify-user\", async (req, res) => {\n    try {\n      const authHeader = req.headers.authorization;\n      const token = authHeader?.replace('Bearer ', '');\n\n      console.log('Admin verify-user request:', { userId: req.body.userId, verificationStatus: req.body.verificationStatus });\n\n      if (!token || !req.session.adminUser) {\n        console.log('Admin authentication failed');\n        return res.status(401).json({ error: \"Admin authentication required\" });\n      }\n\n      const { userId, verificationStatus } = req.body;\n\n      if (!userId || !verificationStatus) {\n        return res.status(400).json({ error: \"User ID and verification status are required\" });\n      }\n\n      if (!['pending', 'verified', 'rejected'].includes(verificationStatus)) {\n        return res.status(400).json({ error: \"Invalid verification status\" });\n      }\n\n      const updatedUser = await storage.updateUserVerificationStatus(userId, verificationStatus);\n      if (!updatedUser) {\n        return res.status(500).json({ error: \"Failed to update user verification status\" });\n      }\n\n      // Create notification for the user\n      try {\n        await storage.createNotification({\n          userId: userId,\n          type: 'verification_status_update',\n          message: `Your company verification status has been updated to: ${verificationStatus}`,\n          link: '/profile'\n        });\n      } catch (notifError) {\n        console.error('Failed to create notification:', notifError);\n        // Continue even if notification fails\n      }\n\n      console.log(`Successfully updated user ${userId} to ${verificationStatus}`);\n      res.json({ success: true, message: \"User verification status updated successfully\", user: updatedUser });\n    } catch (error) {\n      console.error(\"Error updating user verification status:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  const server = createServer(app);\n  return server;\n}","size_bytes":61381},"server/storage.ts":{"content":"import { drizzle } from 'drizzle-orm/postgres-js';\nimport { eq, desc, asc, gte, lte, and, or, like, sql, count, sum } from \"drizzle-orm\";\nimport postgres from 'postgres';\nimport { users, programs, submissions, activities, notifications, wallets, transactions, withdrawals, publicMessages, triageServices, triageReports, triageCommunications, triageSubscriptions, triageAnalysts, moderationTeam, moderationReviews, moderationComments, moderationAuditLog, moderationNotifications, type User, type InsertUser, type Program, type InsertProgram, type Submission, type InsertSubmission, type Activity, type InsertActivity, type Notification, type InsertNotification, type Wallet, type InsertWithdrawal, type CompanyWallet, type InsertCompanyWallet, type CompanyTransaction, type InsertCompanyTransaction, companyWallets, companyTransactions, paymentMethods, escrowAccounts, paymentIntents, payouts, commissions, transactionLogs, paymentDisputes, paymentRateLimits, type PaymentMethod, type InsertPaymentMethod, type EscrowAccount, type InsertEscrowAccount, type PaymentIntent, type InsertPaymentIntent, type Payout, type InsertPayout, type Commission, type InsertCommission, type TransactionLog, type PaymentDispute, type InsertPaymentDispute, type PublicMessage, type InsertPublicMessage, type TriageService, type TriageReport, type InsertTriageReport, type TriageCommunication, type InsertTriageCommunication, type TriageSubscription, type InsertTriageSubscription, type TriageAnalyst, type InsertTriageAnalyst, type ModerationTeam, type InsertModerationTeam, type ModerationReview, type InsertModerationReview, type ModerationComment, type InsertModerationComment, type ModerationAuditLog, type InsertModerationAuditLog, type ModerationNotification, type InsertModerationNotification, cryptoWallets, cryptoPaymentIntents, cryptoPaymentApprovals,\n  cryptoWithdrawals, cryptoTransactions, cryptoNetworkSettings, type CryptoWallet, type InsertCryptoWallet, type CryptoPaymentIntent,\n  type InsertCryptoPaymentIntent, type CryptoPaymentApproval, type InsertCryptoPaymentApproval, type CryptoWithdrawal, type InsertCryptoWithdrawal, type CryptoTransaction,\n  type InsertCryptoTransaction, type CryptoNetworkSettings, type InsertCryptoNetworkSettings } from '@shared/schema';\nimport createMemoryStore from \"memorystore\";\nimport session from \"express-session\";\nimport { encrypt, decrypt } from \"./crypto-utils\";\nimport Database from \"@replit/database\";\n\nconst replitDb = new Database();\n\n// Initialize in-memory storage\nconst memoryStorage = {\n  users: new Map(),\n  programs: new Map(),\n  submissions: new Map(),\n  activities: new Map(),\n  notifications: new Map(),\n  wallets: new Map(),\n  transactions: new Map(),\n  verificationTokens: new Map()\n};\n\nlet db: any = null;\nif (process.env.DATABASE_URL) {\n  const client = postgres(process.env.DATABASE_URL, {\n    max: 10,\n    idle_timeout: 20,\n    connect_timeout: 10,\n  });\n  db = drizzle(client);\n}\n\n// Example usage in storage methods\nasync function fallbackToReplitDb(key: string, value: any) {\n  return await replitDb.set(key, value);\n}\n\n// Only encrypt password\nfunction encryptSensitiveData(data: any) {\n  if (data.password) data.password = encrypt(data.password);\n  return data;\n}\n\n// Only decrypt password\nfunction decryptSensitiveData(data: any) {\n  if (!data) return data;\n  if (data.password) data.password = decrypt(data.password);\n  return data;\n}\n\nconst MemoryStore = createMemoryStore(session);\n\nexport interface IStorage {\n  // User CRUD\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserReputation(id: number, reputation: number): Promise<User | undefined>;\n  getLeaderboard(limit?: number): Promise<User[]>;\n\n  // Email verification\n  setVerificationToken(userId: number, token: string, expiryHours?: number): Promise<User | undefined>;\n  verifyEmail(token: string): Promise<User | undefined>;\n  getUserByVerificationToken(token: string): Promise<User | undefined>;\n\n  // Program CRUD\n  getProgram(id: number): Promise<Program | undefined>;\n  getAllPrograms(): Promise<Program[]>;\n  getPublicPrograms(): Promise<Program[]>;\n  createProgram(program: InsertProgram): Promise<Program>;\n\n  // Submission CRUD\n  getSubmission(id: number): Promise<Submission | undefined>;\n  getSubmissionsByUser(userId: number): Promise<Submission[]>;\n  getSubmissionsByProgram(programId: number): Promise<Submission[]>;\n  createSubmission(submission: InsertSubmission & { userId: number }): Promise<Submission>;\n  updateSubmissionStatus(id: number, status: string, reward?: number): Promise<Submission | undefined>;\n\n  // Activity CRUD\n  getUserActivities(userId: number, limit?: number): Promise<Activity[]>;\n  createActivity(activity: InsertActivity): Promise<Activity>;\n\n    // Notification CRUD\n    getUserNotifications(userId: number, limit?: number): Promise<Notification[]>;\n    createNotification(notification: InsertNotification): Promise<Notification>;\n    markNotificationAsRead(id: number): Promise<Notification | undefined>;\n\n  // Session storage\n  sessionStore: any;\n}\n\nexport const storage: IStorage = {\n  // User methods\n  async getUser(id: number) {\n    if (db) {\n      try {\n        const result = await db.select().from(users).where(eq(users.id, id));\n        return result[0] || null;\n      } catch (error) {\n        console.error('Error getting user:', error);\n        return null;\n      }\n    }\n    return memoryStorage.users.get(id) || null;\n  },\n\n  async getUserByUsername(username: string) {\n    if (db) {\n      try {\n        const result = await db.select().from(users).where(eq(users.username, username));\n        return result[0] || null;\n      } catch (error) {\n        console.error('Error getting user by username:', error);\n        return null;\n      }\n    }\n    return memoryStorage.users.get(username) || null;\n  },\n\n  async getUserByEmail(email: string) {\n    if (db) {\n      try {\n        const result = await db.select().from(users).where(eq(users.email, email));\n        return result[0] || null;\n      } catch (error) {\n        console.error('Error getting user by email:', error);\n        return null;\n      }\n    }\n    const userList = Array.from(memoryStorage.users.values());\n    for (const user of userList) {\n      if (user.email === email) return user;\n    }\n    return null;\n  },\n\n  async createUser(userData: InsertUser) {\n    if (db) {\n      try {\n        const result = await db.insert(users).values(userData).returning();\n        return result[0];\n      } catch (error) {\n        console.error('Error creating user:', error);\n        throw error;\n      }\n    }\n\n    const user = { ...userData, id: Date.now() };\n    memoryStorage.users.set(userData.username, user);\n    return user as User;\n  },\n\n  async updateUserReputation(id: number, reputation: number) {\n    if (db) {\n      try {\n        const [user] = await db\n          .update(users)\n          .set({ reputation, updatedAt: new Date() })\n          .where(eq(users.id, id))\n          .returning();\n        return user;\n      } catch (error) {\n        console.error('Error updating user reputation:', error);\n        return null;\n      }\n    }\n    return null;\n  },\n\n  async getLeaderboard(limit = 10) {\n    if (db) {\n      try {\n        return db.select().from(users).orderBy(desc(users.reputation)).limit(limit);\n      } catch (error) {\n        console.error('Error getting leaderboard:', error);\n        return [];\n      }\n    }\n    return Array.from(memoryStorage.users.values()).slice(0, limit);\n  },\n\n  // Email verification methods\n  async setVerificationToken(userId: number, token: string, expiryHours = 24) {\n    memoryStorage.verificationTokens.set(token, { userId, expires: Date.now() + (expiryHours * 60 * 60 * 1000) });\n    return this.getUser(userId);\n  },\n\n  async verifyEmail(token: string) {\n    const tokenData = memoryStorage.verificationTokens.get(token);\n    if (!tokenData || tokenData.expires < Date.now()) {\n      return null;\n    }\n\n    if (db) {\n      try {\n        const [user] = await db\n          .update(users)\n          .set({ emailVerified: true, updatedAt: new Date() })\n          .where(eq(users.id, tokenData.userId))\n          .returning();\n        \n        memoryStorage.verificationTokens.delete(token);\n        return user;\n      } catch (error) {\n        console.error('Error verifying email:', error);\n        return null;\n      }\n    }\n    return null;\n  },\n\n  async getUserByVerificationToken(token: string) {\n    const tokenData = memoryStorage.verificationTokens.get(token);\n    if (!tokenData || tokenData.expires < Date.now()) {\n      return undefined;\n    }\n    return this.getUser(tokenData.userId);\n  },\n\n  // Program methods\n  async getProgram(id: number) {\n    if (db) {\n      try {\n        const result = await db.select().from(programs).where(eq(programs.id, id));\n        return result[0] || null;\n      } catch (error) {\n        console.error('Error getting program:', error);\n        return null;\n      }\n    }\n    return memoryStorage.programs.get(id) || null;\n  },\n\n  async getAllPrograms() {\n    if (db) {\n      try {\n        return db.select().from(programs);\n      } catch (error) {\n        console.error('Error getting all programs:', error);\n        return [];\n      }\n    }\n    return Array.from(memoryStorage.programs.values());\n  },\n\n  async getPublicPrograms() {\n    if (db) {\n      try {\n        return db.select().from(programs);\n      } catch (error) {\n        console.error('Error getting public programs:', error);\n        return [];\n      }\n    }\n    return Array.from(memoryStorage.programs.values());\n  },\n\n  async createProgram(program: InsertProgram) {\n    if (db) {\n      try {\n        const result = await db.insert(programs).values(program).returning();\n        return result[0];\n      } catch (error) {\n        console.error('Error creating program:', error);\n        throw error;\n      }\n    }\n\n    const newProgram = { ...program, id: Date.now() };\n    memoryStorage.programs.set(newProgram.id, newProgram);\n    return newProgram as Program;\n  },\n\n  // Submission methods\n  async getSubmission(id: number) {\n    if (db) {\n      try {\n        const result = await db.select().from(submissions).where(eq(submissions.id, id));\n        return result[0] || null;\n      } catch (error) {\n        console.error('Error getting submission:', error);\n        return null;\n      }\n    }\n    return memoryStorage.submissions.get(id) || null;\n  },\n\n  async getSubmissionsByUser(userId: number) {\n    if (db) {\n      try {\n        return db.select().from(submissions).where(eq(submissions.userId, userId));\n      } catch (error) {\n        console.error('Error getting submissions by user:', error);\n        return [];\n      }\n    }\n    return Array.from(memoryStorage.submissions.values()).filter(s => s.userId === userId);\n  },\n\n  async getSubmissionsByProgram(programId: number) {\n    if (db) {\n      try {\n        return db.select().from(submissions).where(eq(submissions.programId, programId));\n      } catch (error) {\n        console.error('Error getting submissions by program:', error);\n        return [];\n      }\n    }\n    return Array.from(memoryStorage.submissions.values()).filter(s => s.programId === programId);\n  },\n\n  async createSubmission(submission: InsertSubmission & { userId: number }) {\n    if (db) {\n      try {\n        const result = await db.insert(submissions).values(submission).returning();\n        return result[0];\n      } catch (error) {\n        console.error('Error creating submission:', error);\n        throw error;\n      }\n    }\n\n    const newSubmission = { ...submission, id: Date.now() };\n    memoryStorage.submissions.set(newSubmission.id, newSubmission);\n    return newSubmission as Submission;\n  },\n\n  async updateSubmissionStatus(id: number, status: string, reward?: number) {\n    if (db) {\n      try {\n        const updateData: any = { status, updatedAt: new Date() };\n        if (reward !== undefined) {\n          updateData.reward = reward;\n        }\n        \n        const [submission] = await db\n          .update(submissions)\n          .set(updateData)\n          .where(eq(submissions.id, id))\n          .returning();\n        return submission;\n      } catch (error) {\n        console.error('Error updating submission status:', error);\n        return null;\n      }\n    }\n    return null;\n  },\n\n  // Activity methods\n  async getUserActivities(userId: number, limit = 10) {\n    if (db) {\n      try {\n        return db.select().from(activities)\n          .where(eq(activities.userId, userId))\n          .orderBy(desc(activities.createdAt))\n          .limit(limit);\n      } catch (error) {\n        console.error('Error getting user activities:', error);\n        return [];\n      }\n    }\n    return Array.from(memoryStorage.activities.values())\n      .filter(a => a.userId === userId)\n      .slice(0, limit);\n  },\n\n  async createActivity(activity: InsertActivity) {\n    if (db) {\n      try {\n        const result = await db.insert(activities).values(activity).returning();\n        return result[0];\n      } catch (error) {\n        console.error('Error creating activity:', error);\n        throw error;\n      }\n    }\n\n    const newActivity = { ...activity, id: Date.now() };\n    memoryStorage.activities.set(newActivity.id, newActivity);\n    return newActivity as Activity;\n  },\n\n  // Notification methods\n  async getUserNotifications(userId: number, limit = 10) {\n    if (db) {\n      try {\n        return db.select().from(notifications)\n          .where(eq(notifications.userId, userId))\n          .orderBy(desc(notifications.createdAt))\n          .limit(limit);\n      } catch (error) {\n        console.error('Error getting user notifications:', error);\n        return [];\n      }\n    }\n    return Array.from(memoryStorage.notifications.values())\n      .filter(n => n.userId === userId)\n      .slice(0, limit);\n  },\n\n  async createNotification(notification: InsertNotification) {\n    if (db) {\n      try {\n        const result = await db.insert(notifications).values(notification).returning();\n        return result[0];\n      } catch (error) {\n        console.error('Error creating notification:', error);\n        throw error;\n      }\n    }\n\n    const newNotification = { ...notification, id: Date.now() };\n    memoryStorage.notifications.set(newNotification.id, newNotification);\n    return newNotification as Notification;\n  },\n\n  async markNotificationAsRead(id: number) {\n    if (db) {\n      try {\n        const [notification] = await db\n          .update(notifications)\n          .set({ isRead: true, updatedAt: new Date() })\n          .where(eq(notifications.id, id))\n          .returning();\n        return notification;\n      } catch (error) {\n        console.error('Error marking notification as read:', error);\n        return null;\n      }\n    }\n    return null;\n  },\n\n  // Session storage\n  sessionStore: new MemoryStore({})\n};","size_bytes":14979},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2374},"server/vulnerability-grading.ts":{"content":"interface VulnerabilityType {\n  name: string;\n  severity: \"SV1\" | \"SV2\" | \"SV3\" | \"SV4\";\n  minReward: number;\n  maxReward: number;\n  description: string;\n  keywords: string[];\n  impactFactors: {\n    adminAccess?: number;\n    dataAccess?: number;\n    codeExecution?: number;\n  };\n}\n\nconst VULNERABILITY_TYPES: VulnerabilityType[] = [\n  // SV1 - Critical Severity Vulnerabilities\n  {\n    name: \"Remote Code Execution (RCE)\",\n    severity: \"SV1\",\n    minReward: 1500,\n    maxReward: 5000,\n    description: \"Allows execution of arbitrary code on the server\",\n    keywords: [\"rce\", \"remote code execution\", \"code execution\", \"command injection\"],\n    impactFactors: { adminAccess: 1.5, dataAccess: 1.3, codeExecution: 1.0 }\n  },\n  {\n    name: \"SQL Injection (Critical)\",\n    severity: \"SV1\",\n    minReward: 1000,\n    maxReward: 3000,\n    description: \"Critical SQL injection affecting admin or sensitive data\",\n    keywords: [\"sql injection\", \"sqli\", \"database injection\"],\n    impactFactors: { adminAccess: 1.4, dataAccess: 1.5 }\n  },\n  {\n    name: \"Authentication Bypass (Admin)\",\n    severity: \"SV1\",\n    minReward: 1200,\n    maxReward: 4000,\n    description: \"Complete bypass of admin authentication\",\n    keywords: [\"auth bypass\", \"authentication bypass\", \"admin bypass\"],\n    impactFactors: { adminAccess: 1.6 }\n  },\n\n  // SV2 - High Severity Vulnerabilities\n  {\n    name: \"Privilege Escalation\",\n    severity: \"SV2\",\n    minReward: 800,\n    maxReward: 2000,\n    description: \"Escalation from user to admin privileges\",\n    keywords: [\"privilege escalation\", \"privesc\", \"elevation\"],\n    impactFactors: { adminAccess: 1.3, dataAccess: 1.2 }\n  },\n  {\n    name: \"Server-Side Request Forgery (SSRF)\",\n    severity: \"SV2\",\n    minReward: 600,\n    maxReward: 1500,\n    description: \"Access to internal services or data\",\n    keywords: [\"ssrf\", \"server side request forgery\", \"internal access\"],\n    impactFactors: { adminAccess: 1.2, dataAccess: 1.3 }\n  },\n  {\n    name: \"XML External Entity (XXE)\",\n    severity: \"SV2\",\n    minReward: 500,\n    maxReward: 1200,\n    description: \"XML parsing vulnerabilities leading to data disclosure\",\n    keywords: [\"xxe\", \"xml external entity\", \"xml injection\"],\n    impactFactors: { dataAccess: 1.4 }\n  },\n\n  // SV3 - Medium Severity Vulnerabilities\n  {\n    name: \"Cross-Site Scripting (XSS)\",\n    severity: \"SV3\",\n    minReward: 200,\n    maxReward: 800,\n    description: \"Script injection in web applications\",\n    keywords: [\"xss\", \"cross-site scripting\", \"script injection\", \"stored xss\", \"reflected xss\"],\n    impactFactors: { adminAccess: 1.4 }\n  },\n  {\n    name: \"Cross-Site Request Forgery (CSRF)\",\n    severity: \"SV3\",\n    minReward: 150,\n    maxReward: 600,\n    description: \"Force users to perform unintended actions\",\n    keywords: [\"csrf\", \"cross-site request forgery\", \"request forgery\"],\n    impactFactors: { adminAccess: 1.3 }\n  },\n  {\n    name: \"Information Disclosure\",\n    severity: \"SV3\",\n    minReward: 100,\n    maxReward: 500,\n    description: \"Unauthorized access to sensitive information\",\n    keywords: [\"info disclosure\", \"information leakage\", \"data exposure\"],\n    impactFactors: { adminAccess: 1.2, dataAccess: 1.3 }\n  },\n  {\n    name: \"Directory Traversal\",\n    severity: \"SV3\",\n    minReward: 200,\n    maxReward: 700,\n    description: \"Access files outside intended directory\",\n    keywords: [\"directory traversal\", \"path traversal\", \"file inclusion\"],\n    impactFactors: { dataAccess: 1.2 }\n  },\n\n  // SV4 - Low Severity Vulnerabilities\n  {\n    name: \"Open Redirect\",\n    severity: \"SV4\",\n    minReward: 20,\n    maxReward: 100,\n    description: \"Redirect users to external malicious sites\",\n    keywords: [\"open redirect\", \"redirect\", \"url redirect\"],\n    impactFactors: {}\n  },\n  {\n    name: \"Clickjacking\",\n    severity: \"SV4\",\n    minReward: 20,\n    maxReward: 80,\n    description: \"Trick users into clicking hidden elements\",\n    keywords: [\"clickjacking\", \"ui redressing\", \"frame\"],\n    impactFactors: { adminAccess: 1.3 }\n  },\n  {\n    name: \"Missing Security Headers\",\n    severity: \"SV4\",\n    minReward: 15,\n    maxReward: 60,\n    description: \"Lack of protective HTTP headers\",\n    keywords: [\"security headers\", \"csp\", \"hsts\", \"x-frame-options\"],\n    impactFactors: {}\n  },\n  {\n    name: \"Information Leakage (Minor)\",\n    severity: \"SV4\",\n    minReward: 25,\n    maxReward: 75,\n    description: \"Minor information disclosure with low impact\",\n    keywords: [\"info leak\", \"version disclosure\", \"error message\"],\n    impactFactors: {}\n  }\n];\n\nexport interface GradingInput {\n  vulnerabilityType: string;\n  description: string;\n  affectsAdmin: boolean;\n  allowsDataAccess: boolean;\n  allowsCodeExecution: boolean;\n  proofOfConcept?: string;\n}\n\nexport interface GradingResult {\n  severity: \"SV1\" | \"SV2\" | \"SV3\" | \"SV4\";\n  suggestedReward: number;\n  matchedType: VulnerabilityType | null;\n  confidence: number; // 0-1\n  reasoning: string;\n}\n\nexport function gradeVulnerability(input: GradingInput): GradingResult {\n  const { vulnerabilityType, description, affectsAdmin, allowsDataAccess, allowsCodeExecution } = input;\n\n  // Normalize input for matching\n  const normalizedInput = `${vulnerabilityType} ${description}`.toLowerCase();\n\n  let bestMatch: VulnerabilityType | null = null;\n  let bestScore = 0;\n\n  // Find the best matching vulnerability type\n  for (const vulnType of VULNERABILITY_TYPES) {\n    let score = 0;\n\n    // Check keyword matches\n    for (const keyword of vulnType.keywords) {\n      if (normalizedInput.includes(keyword.toLowerCase())) {\n        score += 1;\n      }\n    }\n\n    if (score > bestScore) {\n      bestScore = score;\n      bestMatch = vulnType;\n    }\n  }\n\n  // If no match found, default to low severity\n  if (!bestMatch || bestScore === 0) {\n    return {\n      severity: \"SV4\",\n      suggestedReward: 50,\n      matchedType: null,\n      confidence: 0.1,\n      reasoning: \"No specific vulnerability type matched. Defaulted to low severity for manual review.\"\n    };\n  }\n\n  // Calculate reward based on impact factors\n  let baseReward = (bestMatch.minReward + bestMatch.maxReward) / 2;\n  let multiplier = 1.0;\n\n  if (affectsAdmin && bestMatch.impactFactors.adminAccess) {\n    multiplier *= bestMatch.impactFactors.adminAccess;\n  }\n\n  if (allowsDataAccess && bestMatch.impactFactors.dataAccess) {\n    multiplier *= bestMatch.impactFactors.dataAccess;\n  }\n\n  if (allowsCodeExecution && bestMatch.impactFactors.codeExecution) {\n    multiplier *= bestMatch.impactFactors.codeExecution;\n  }\n\n  const finalReward = Math.round(baseReward * multiplier);\n  const confidence = Math.min(0.9, bestScore / bestMatch.keywords.length);\n\n  let reasoning = `Matched \"${bestMatch.name}\" based on keyword analysis. `;\n  if (multiplier > 1.0) {\n    reasoning += `Reward increased by ${Math.round((multiplier - 1) * 100)}% due to impact factors. `;\n  }\n  reasoning += `Confidence: ${Math.round(confidence * 100)}%`;\n\n  return {\n    severity: bestMatch.severity,\n    suggestedReward: finalReward,\n    matchedType: bestMatch,\n    confidence,\n    reasoning\n  };\n}\n\n// Helper function to get all vulnerability types for admin panel display\nexport function getAllVulnerabilityTypes(): VulnerabilityType[] {\n  return VULNERABILITY_TYPES;\n}\n\n// Helper function to update vulnerability types (for future admin panel editing)\nexport function updateVulnerabilityType(index: number, updatedType: VulnerabilityType): boolean {\n  if (index >= 0 && index < VULNERABILITY_TYPES.length) {\n    VULNERABILITY_TYPES[index] = updatedType;\n    return true;\n  }\n  return false;\n}","size_bytes":7535},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, foreignKey, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users Schema\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\"),\n  userType: text(\"user_type\").default(\"hacker\"), // \"hacker\" or \"company\"\n  companyName: text(\"company_name\"), // Only for company users\n  companyWebsite: text(\"company_website\"), // Only for company users\n  companySize: text(\"company_size\"), // Only for company users\n  companyIndustry: text(\"company_industry\"), // Only for company users\n  isEmailVerified: boolean(\"is_email_verified\").default(false),\n  verificationToken: text(\"verification_token\"),\n  verificationTokenExpiry: timestamp(\"verification_token_expiry\"),\n  verificationStatus: text(\"verification_status\").default(\"pending\"), // \"pending\", \"verified\", \"rejected\"\n  reputation: integer(\"reputation\").default(0),\n  rank: text(\"rank\").default(\"Newbie\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow()\n});\n\nexport const passwordSchema = z.string()\n  .min(8, \"Password must be at least 8 characters\")\n  .max(128, \"Password cannot exceed 128 characters\")\n  .regex(/[A-Z]/, \"Password must contain at least one uppercase letter\")\n  .regex(/[a-z]/, \"Password must contain at least one lowercase letter\")\n  .regex(/[0-9]/, \"Password must contain at least one number\")\n  .regex(/[^A-Za-z0-9]/, \"Password must contain at least one special character\")\n  .refine(pwd => !(/(.)\\1{2,}/.test(pwd)), \"Password cannot contain repeating characters (e.g., 'aaa')\")\n  .refine(pwd => !/password|123456|qwerty/i.test(pwd), \"Password contains common patterns\");\n\nexport const insertUserSchema = createInsertSchema(users, {\n  password: z.string()\n}).extend({\n  password: passwordSchema,\n  email: z.string().email(\"Invalid email address\"),\n  userType: z.enum([\"hacker\", \"company\"]),\n  companyName: z.string().optional(),\n  companyWebsite: z.string().url().optional(),\n  companySize: z.string().optional(),\n  companyIndustry: z.string().optional()\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Programs Schema (Bug Bounty Programs)\nexport const programs = pgTable(\"programs\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  company: text(\"company\").notNull(),\n  logo: text(\"logo\"), // text field for logo identifier/code\n  rewardsRange: text(\"rewards_range\").notNull(),\n  status: text(\"status\").default(\"active\"),\n  scope: jsonb(\"scope\").notNull(), // Array of scope items like \"Web\", \"Mobile\", etc.\n  isPrivate: boolean(\"is_private\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\nexport const insertProgramSchema = createInsertSchema(programs).pick({\n  name: true,\n  description: true,\n  company: true,\n  logo: true,\n  rewardsRange: true,\n  status: true,\n  scope: true,\n  isPrivate: true\n});\n\nexport type InsertProgram = z.infer<typeof insertProgramSchema>;\nexport type Program = typeof programs.$inferSelect;\n\n// Bug Submissions Schema\nexport const submissions = pgTable(\"submissions\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  type: text(\"type\").notNull(), // e.g. XSS, SQL Injection, CSRF\n  severity: text(\"severity\").notNull(), // Critical, High, Medium, Low, Info\n  status: text(\"status\").default(\"pending\"), // pending, accepted, rejected, fixed\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  programId: integer(\"program_id\").notNull().references(() => programs.id),\n  reward: integer(\"reward\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\")\n});\n\nexport const insertSubmissionSchema = createInsertSchema(submissions).pick({\n  title: true,\n  description: true,\n  type: true,\n  severity: true,\n  programId: true,\n});\n\nexport type InsertSubmission = z.infer<typeof insertSubmissionSchema>;\nexport type Submission = typeof submissions.$inferSelect;\n\n// Activity Schema (for user dashboard)\nexport const activities = pgTable(\"activities\", {\n  id: serial(\"id\").primaryKey(),\n  type: text(\"type\").notNull(), // submission_accepted, submission_pending, achievement_unlocked\n  message: text(\"message\").notNull(),\n  details: text(\"details\"),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  relatedId: integer(\"related_id\"), // Could be submission ID or program ID\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\nexport const insertActivitySchema = createInsertSchema(activities).pick({\n  type: true,\n  message: true,\n  details: true,\n  userId: true,\n  relatedId: true\n});\n\nexport type InsertActivity = z.infer<typeof insertActivitySchema>;\nexport type Activity = typeof activities.$inferSelect;\n\n// Notifications Schema\nexport const notifications = pgTable(\"notifications\", {\n  id: serial(\"id\").primaryKey(),\n  type: text(\"type\").notNull(), // new_submission, status_change, achievement, system\n  message: text(\"message\").notNull(),\n  link: text(\"link\"), // Optional link to direct the user (e.g., /submissions/123)\n  isRead: boolean(\"is_read\").default(false),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  relatedId: integer(\"related_id\"), // Could be submission ID or program ID\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).pick({\n  type: true,\n  message: true,\n  link: true,\n  userId: true,\n  relatedId: true\n});\n\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type Notification = typeof notifications.$inferSelect;\n\n// Wallet table\nexport const wallets = pgTable(\"wallets\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  balance: integer(\"balance\").notNull().default(0),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport type Wallet = typeof wallets.$inferSelect;\n\n// Transaction History table\nexport const transactions = pgTable(\"transactions\", {\n  id: serial(\"id\").primaryKey(),\n  walletId: integer(\"wallet_id\").notNull().references(() => wallets.id),\n  type: text(\"type\").notNull(), // bounty, withdrawal, adjustment\n  amount: integer(\"amount\").notNull(),\n  description: text(\"description\").notNull(),\n  status: text(\"status\").notNull().default(\"completed\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  submissionId: integer(\"submission_id\").references(() => submissions.id),\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).pick({\n  walletId: true,\n  type: true,\n  amount: true,\n  description: true,\n  submissionId: true,\n});\n\nexport type Transaction = typeof transactions.$inferSelect;\n\n// Withdrawal Requests table\nexport const withdrawals = pgTable(\"withdrawals\", {\n  id: serial(\"id\").primaryKey(),\n  walletId: integer(\"wallet_id\").notNull().references(() => wallets.id),\n  amount: integer(\"amount\").notNull(),\n  method: text(\"method\").notNull(), // PayPal, Wise, Crypto, etc.\n  destination: text(\"destination\").notNull(), // PayPal email, wallet address, etc.\n  status: text(\"status\").notNull().default(\"pending\"), // pending, approved, rejected, completed\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\")\n});\n\nexport const insertWithdrawalSchema = createInsertSchema(withdrawals).pick({\n  walletId: true,\n  amount: true,\n  method: true,\n  destination: true,\n  notes: true,\n});\n\nexport type Withdrawal = typeof withdrawals.$inferSelect;\nexport type InsertWithdrawal = z.infer<typeof insertWithdrawalSchema>;\n\n// Company Wallets table\nexport const companyWallets = pgTable(\"company_wallets\", {\n  id: serial(\"id\").primaryKey(),\n  companyId: integer(\"company_id\").notNull().references(() => users.id),\n  balance: integer(\"balance\").notNull().default(0),\n  totalPaid: integer(\"total_paid\").notNull().default(0),\n  lastUpdated: timestamp(\"last_updated\").defaultNow()\n});\n\nexport const insertCompanyWalletSchema = createInsertSchema(companyWallets).pick({\n  companyId: true,\n  balance: true,\n  totalPaid: true\n});\n\nexport type CompanyWallet = typeof companyWallets.$inferSelect;\nexport type InsertCompanyWallet = z.infer<typeof insertCompanyWalletSchema>;\n\n// Company Transactions table\nexport const companyTransactions = pgTable(\"company_transactions\", {\n  id: serial(\"id\").primaryKey(),\n  companyId: integer(\"company_id\").notNull().references(() => users.id),\n  amount: integer(\"amount\").notNull(),\n  type: text(\"type\").notNull(), // manual, automated\n  note: text(\"note\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\nexport const insertCompanyTransactionSchema = createInsertSchema(companyTransactions).pick({\n  companyId: true,\n  amount: true,\n  type: true,\n  note: true\n});\n\nexport type CompanyTransaction = typeof companyTransactions.$inferSelect;\nexport type InsertCompanyTransaction = z.infer<typeof insertCompanyTransactionSchema>;\n\n// Payment Methods table\nexport const paymentMethods = pgTable(\"payment_methods\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(), // PayPal, Stripe, Wise, etc.\n  type: text(\"type\").notNull(), // bank_transfer, digital_wallet, crypto\n  isActive: boolean(\"is_active\").default(true),\n  supportedCurrencies: jsonb(\"supported_currencies\").notNull(),\n  processingFee: integer(\"processing_fee\").default(0), // in basis points (100 = 1%)\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\n// Escrow Accounts table\nexport const escrowAccounts = pgTable(\"escrow_accounts\", {\n  id: serial(\"id\").primaryKey(),\n  companyId: integer(\"company_id\").notNull().references(() => users.id),\n  submissionId: integer(\"submission_id\").references(() => submissions.id),\n  amount: integer(\"amount\").notNull(), // in cents\n  currency: text(\"currency\").default(\"USD\"),\n  status: text(\"status\").default(\"pending\"), // pending, held, released, refunded\n  platformCommission: integer(\"platform_commission\").notNull(), // in cents\n  researcherPayout: integer(\"researcher_payout\").notNull(), // in cents\n  expiresAt: timestamp(\"expires_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\")\n});\n\n// Payment Intents table (for handling payments from companies)\nexport const paymentIntents = pgTable(\"payment_intents\", {\n  id: serial(\"id\").primaryKey(),\n  stripePaymentIntentId: text(\"stripe_payment_intent_id\").unique(),\n  companyId: integer(\"company_id\").notNull().references(() => users.id),\n  amount: integer(\"amount\").notNull(), // in cents\n  currency: text(\"currency\").default(\"USD\"),\n  status: text(\"status\").default(\"pending\"), // pending, succeeded, failed, canceled\n  purpose: text(\"purpose\").notNull(), // wallet_topup, bounty_payment, subscription\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\")\n});\n\n// Payouts table (for payments to researchers)\nexport const payouts = pgTable(\"payouts\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  submissionId: integer(\"submission_id\").references(() => submissions.id),\n  escrowAccountId: integer(\"escrow_account_id\").references(() => escrowAccounts.id),\n  amount: integer(\"amount\").notNull(), // in cents\n  currency: text(\"currency\").default(\"USD\"),\n  paymentMethodId: integer(\"payment_method_id\").notNull().references(() => paymentMethods.id),\n  paymentMethodDetails: jsonb(\"payment_method_details\"), // email, wallet address, etc.\n  status: text(\"status\").default(\"pending\"), // pending, processing, completed, failed, cancelled\n  externalTransactionId: text(\"external_transaction_id\"), // PayPal, Stripe, etc. transaction ID\n  failureReason: text(\"failure_reason\"),\n  scheduledFor: timestamp(\"scheduled_for\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\")\n});\n\n// Commission Records table\nexport const commissions = pgTable(\"commissions\", {\n  id: serial(\"id\").primaryKey(),\n  submissionId: integer(\"submission_id\").notNull().references(() => submissions.id),\n  totalAmount: integer(\"total_amount\").notNull(), // total bounty in cents\n  commissionRate: integer(\"commission_rate\").notNull(), // in basis points (1500 = 15%)\n  commissionAmount: integer(\"commission_amount\").notNull(), // in cents\n  currency: text(\"currency\").default(\"USD\"),\n  status: text(\"status\").default(\"pending\"), // pending, collected, refunded\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\n// Transaction Logs table (for audit trail)\nexport const transactionLogs = pgTable(\"transaction_logs\", {\n  id: serial(\"id\").primaryKey(),\n  transactionType: text(\"transaction_type\").notNull(), // payment_intent, escrow, payout, commission\n  transactionId: integer(\"transaction_id\").notNull(), // references various transaction tables\n  userId: integer(\"user_id\").references(() => users.id),\n  action: text(\"action\").notNull(), // created, updated, completed, failed, cancelled\n  previousState: jsonb(\"previous_state\"),\n  newState: jsonb(\"new_state\"),\n  metadata: jsonb(\"metadata\"),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\n// Payment Disputes table\nexport const paymentDisputes = pgTable(\"payment_disputes\", {\n  id: serial(\"id\").primaryKey(),\n  submissionId: integer(\"submission_id\").notNull().references(() => submissions.id),\n  disputedBy: integer(\"disputed_by\").notNull().references(() => users.id), // researcher or company\n  disputeType: text(\"dispute_type\").notNull(), // payment_amount, payment_delay, invalid_bounty\n  description: text(\"description\").notNull(),\n  status: text(\"status\").default(\"open\"), // open, under_review, resolved, rejected\n  resolution: text(\"resolution\"),\n  resolvedBy: integer(\"resolved_by\").references(() => users.id),\n  resolvedAt: timestamp(\"resolved_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\")\n});\n\n// Rate Limiting table for fraud prevention\nexport const paymentRateLimits = pgTable(\"payment_rate_limits\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  ipAddress: text(\"ip_address\"),\n  actionType: text(\"action_type\").notNull(), // payment_intent, payout_request, dispute\n  attemptCount: integer(\"attempt_count\").default(1),\n  windowStart: timestamp(\"window_start\").defaultNow(),\n  blockedUntil: timestamp(\"blocked_until\")\n});\n\n// Schema validators\nexport const insertPaymentMethodSchema = createInsertSchema(paymentMethods).pick({\n  name: true,\n  type: true,\n  isActive: true,\n  supportedCurrencies: true,\n  processingFee: true\n});\n\nexport const insertEscrowAccountSchema = createInsertSchema(escrowAccounts).pick({\n  companyId: true,\n  submissionId: true,\n  amount: true,\n  currency: true,\n  platformCommission: true,\n  researcherPayout: true,\n  expiresAt: true\n});\n\nexport const insertPaymentIntentSchema = createInsertSchema(paymentIntents).pick({\n  companyId: true,\n  amount: true,\n  currency: true,\n  purpose: true,\n  metadata: true\n});\n\nexport const insertPayoutSchema = createInsertSchema(payouts).pick({\n  userId: true,\n  submissionId: true,\n  escrowAccountId: true,\n  amount: true,\n  currency: true,\n  paymentMethodId: true,\n  paymentMethodDetails: true,\n  scheduledFor: true\n});\n\nexport const insertCommissionSchema = createInsertSchema(commissions).pick({\n  submissionId: true,\n  totalAmount: true,\n  commissionRate: true,\n  commissionAmount: true,\n  currency: true\n});\n\nexport const insertPaymentDisputeSchema = createInsertSchema(paymentDisputes).pick({\n  submissionId: true,\n  disputedBy: true,\n  disputeType: true,\n  description: true\n});\n\n// Type exports\nexport type PaymentMethod = typeof paymentMethods.$inferSelect;\nexport type InsertPaymentMethod = z.infer<typeof insertPaymentMethodSchema>;\n\nexport type EscrowAccount = typeof escrowAccounts.$inferSelect;\nexport type InsertEscrowAccount = z.infer<typeof insertEscrowAccountSchema>;\n\nexport type PaymentIntent = typeof paymentIntents.$inferSelect;\nexport type InsertPaymentIntent = z.infer<typeof insertPaymentIntentSchema>;\n\nexport type Payout = typeof payouts.$inferSelect;\nexport type InsertPayout = z.infer<typeof insertPayoutSchema>;\n\nexport type Commission = typeof commissions.$inferSelect;\nexport type InsertCommission = z.infer<typeof insertCommissionSchema>;\n\nexport type TransactionLog = typeof transactionLogs.$inferSelect;\nexport type PaymentDispute = typeof paymentDisputes.$inferSelect;\nexport type InsertPaymentDispute = z.infer<typeof insertPaymentDisputeSchema>;\n\n// Public Chat Schema\nexport const publicMessages = pgTable(\"public_messages\", {\n  id: serial(\"id\").primaryKey(),\n  content: text(\"content\").notNull(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  messageType: text(\"message_type\").default(\"message\"), // \"message\" or \"announcement\"\n  isEdited: boolean(\"is_edited\").default(false),\n  editedAt: timestamp(\"edited_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\nexport const insertPublicMessageSchema = createInsertSchema(publicMessages).pick({\n  content: true,\n  messageType: true\n});\n\nexport type PublicMessage = typeof publicMessages.$inferSelect;\nexport type InsertPublicMessage = z.infer<typeof insertPublicMessageSchema>;\n\n// Triage Service Tables\nexport const triageServices = pgTable(\"triage_services\", {\n  id: serial(\"id\").primaryKey(),\n  companyId: integer(\"company_id\").notNull().references(() => users.id),\n  serviceName: text(\"service_name\").notNull().default(\"Managed Vulnerability Triage\"),\n  serviceType: text(\"service_type\").notNull().default(\"managed_triage\"), // managed_triage, consultation, remediation\n  pricingModel: text(\"pricing_model\").notNull().default(\"per_report\"), // per_report, monthly, annual\n  pricePerReport: integer(\"price_per_report\").default(5000), // in cents ($50)\n  monthlyPrice: integer(\"monthly_price\").default(50000), // in cents ($500)\n  annualPrice: integer(\"annual_price\").default(500000), // in cents ($5000)\n  isActive: boolean(\"is_active\").default(true),\n  autoAssignTriage: boolean(\"auto_assign_triage\").default(true),\n  triageLevel: text(\"triage_level\").default(\"standard\"), // basic, standard, premium\n  includedServices: jsonb(\"included_services\").default([]), // Array of service features\n  maxReportsPerMonth: integer(\"max_reports_per_month\").default(50),\n  responseTimeHours: integer(\"response_time_hours\").default(24),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\")\n});\n\nexport const triageReports = pgTable(\"triage_reports\", {\n  id: serial(\"id\").primaryKey(),\n  submissionId: integer(\"submission_id\").notNull().references(() => submissions.id),\n  triageServiceId: integer(\"triage_service_id\").notNull().references(() => triageServices.id),\n  companyId: integer(\"company_id\").notNull().references(() => users.id),\n  triageAnalystId: integer(\"triage_analyst_id\").references(() => users.id),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, in_progress, completed, escalated\n  priority: text(\"priority\").notNull().default(\"medium\"), // low, medium, high, critical\n  severity: text(\"severity\").notNull().default(\"unknown\"), // SV1, SV2, SV3, SV4, unknown\n  validationStatus: text(\"validation_status\").default(\"pending\"), // pending, validated, rejected, duplicate\n  triageNotes: text(\"triage_notes\"),\n  technicalAssessment: text(\"technical_assessment\"),\n  businessImpact: text(\"business_impact\"),\n  recommendedActions: text(\"recommended_actions\"),\n  estimatedFixTime: text(\"estimated_fix_time\"),\n  cveReference: text(\"cve_reference\"),\n  isEscalated: boolean(\"is_escalated\").default(false),\n  escalationReason: text(\"escalation_reason\"),\n  communicationHistory: jsonb(\"communication_history\").default([]),\n  triageStartedAt: timestamp(\"triage_started_at\"),\n  triageCompletedAt: timestamp(\"triage_completed_at\"),\n  dueDate: timestamp(\"due_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\")\n});\n\nexport const triageCommunications = pgTable(\"triage_communications\", {\n  id: serial(\"id\").primaryKey(),\n  triageReportId: integer(\"triage_report_id\").notNull().references(() => triageReports.id),\n  fromUserId: integer(\"from_user_id\").notNull().references(() => users.id),\n  toUserId: integer(\"to_user_id\").references(() => users.id),\n  messageType: text(\"message_type\").notNull().default(\"message\"), // message, status_update, question, clarification\n  subject: text(\"subject\"),\n  message: text(\"message\").notNull(),\n  isInternal: boolean(\"is_internal\").default(false), // Internal platform notes vs external communication\n  attachments: jsonb(\"attachments\").default([]),\n  isRead: boolean(\"is_read\").default(false),\n  readAt: timestamp(\"read_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\nexport const triageSubscriptions = pgTable(\"triage_subscriptions\", {\n  id: serial(\"id\").primaryKey(),\n  companyId: integer(\"company_id\").notNull().references(() => users.id),\n  triageServiceId: integer(\"triage_service_id\").notNull().references(() => triageServices.id),\n  subscriptionType: text(\"subscription_type\").notNull().default(\"monthly\"), // monthly, annual, per_report\n  status: text(\"status\").notNull().default(\"active\"), // active, paused, cancelled, expired\n  startDate: timestamp(\"start_date\").notNull().defaultNow(),\n  endDate: timestamp(\"end_date\"),\n  autoRenew: boolean(\"auto_renew\").default(true),\n  reportsProcessed: integer(\"reports_processed\").default(0),\n  totalCost: integer(\"total_cost\").default(0), // in cents\n  lastBillingDate: timestamp(\"last_billing_date\"),\n  nextBillingDate: timestamp(\"next_billing_date\"),\n  paymentMethodId: integer(\"payment_method_id\").references(() => paymentMethods.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\")\n});\n\nexport const triageAnalysts = pgTable(\"triage_analysts\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  specializations: jsonb(\"specializations\").default([]), // Array of expertise areas\n  currentWorkload: integer(\"current_workload\").default(0),\n  maxWorkload: integer(\"max_workload\").default(10),\n  availabilityStatus: text(\"availability_status\").default(\"available\"), // available, busy, offline\n  hourlyRate: integer(\"hourly_rate\").default(10000), // in cents ($100)\n  performanceRating: integer(\"performance_rating\").default(5), // 1-5 scale\n  totalReportsHandled: integer(\"total_reports_handled\").default(0),\n  avgResponseTime: integer(\"avg_response_time\").default(0), // in minutes\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\")\n});\n\n// Insert schemas for triage tables\nexport const insertTriageServiceSchema = createInsertSchema(triageServices).pick({\n  companyId: true,\n  serviceName: true,\n  serviceType: true,\n  pricingModel: true,\n  pricePerReport: true,\n  monthlyPrice: true,\n  annualPrice: true,\n  triageLevel: true,\n  includedServices: true,\n  maxReportsPerMonth: true,\n  responseTimeHours: true\n});\n\nexport const insertTriageReportSchema = createInsertSchema(triageReports).pick({\n  submissionId: true,\n  triageServiceId: true,\n  companyId: true,\n  triageAnalystId: true,\n  status: true,\n  priority: true,\n  severity: true,\n  validationStatus: true,\n  triageNotes: true,\n  technicalAssessment: true,\n  businessImpact: true,\n  recommendedActions: true,\n  estimatedFixTime: true,\n  cveReference: true,\n  escalationReason: true,\n  dueDate: true\n});\n\nexport const insertTriageCommunicationSchema = createInsertSchema(triageCommunications).pick({\n  triageReportId: true,\n  fromUserId: true,\n  toUserId: true,\n  messageType: true,\n  subject: true,\n  message: true,\n  isInternal: true,\n  attachments: true\n});\n\nexport const insertTriageSubscriptionSchema = createInsertSchema(triageSubscriptions).pick({\n  companyId: true,\n  triageServiceId: true,\n  subscriptionType: true,\n  startDate: true,\n  endDate: true,\n  autoRenew: true,\n  paymentMethodId: true\n});\n\nexport const insertTriageAnalystSchema = createInsertSchema(triageAnalysts).pick({\n  userId: true,\n  specializations: true,\n  maxWorkload: true,\n  hourlyRate: true\n});\n\n// Type exports for triage\nexport type TriageService = typeof triageServices.$inferSelect;\nexport type InsertTriageService = z.infer<typeof insertTriageServiceSchema>;\n\nexport type TriageReport = typeof triageReports.$inferSelect;\nexport type InsertTriageReport = z.infer<typeof insertTriageReportSchema>;\n\nexport type TriageCommunication = typeof triageCommunications.$inferSelect;\nexport type InsertTriageCommunication = z.infer<typeof insertTriageCommunicationSchema>;\n\nexport type TriageSubscription = typeof triageSubscriptions.$inferSelect;\nexport type InsertTriageSubscription = z.infer<typeof insertTriageSubscriptionSchema>;\n\nexport type TriageAnalyst = typeof triageAnalysts.$inferSelect;\nexport type InsertTriageAnalyst = z.infer<typeof insertTriageAnalystSchema>;\n\n// Moderation System Tables\nexport const moderationTeam = pgTable(\"moderation_team\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  role: text(\"role\").notNull().default(\"reviewer\"), // admin, analyst, reviewer\n  department: text(\"department\").default(\"security\"), // security, compliance, technical\n  permissions: jsonb(\"permissions\").default([]), // Array of permission strings\n  isActive: boolean(\"is_active\").default(true),\n  specializations: jsonb(\"specializations\").default([]), // Array of expertise areas\n  maxAssignments: integer(\"max_assignments\").default(10),\n  currentAssignments: integer(\"current_assignments\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\")\n});\n\nexport const moderationReviews = pgTable(\"moderation_reviews\", {\n  id: serial(\"id\").primaryKey(),\n  submissionId: integer(\"submission_id\").notNull().references(() => submissions.id),\n  reviewerId: integer(\"reviewer_id\").notNull().references(() => users.id),\n  assignedBy: integer(\"assigned_by\").references(() => users.id),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, in_review, approved, rejected, needs_info\n  priority: text(\"priority\").notNull().default(\"medium\"), // low, medium, high, critical\n  category: text(\"category\").default(\"vulnerability\"), // vulnerability, duplicate, spam, invalid\n  severity: text(\"severity\").default(\"unknown\"), // critical, high, medium, low, info\n  decision: text(\"decision\"), // accept, reject, duplicate, invalid, needs_clarification\n  decisionReason: text(\"decision_reason\"),\n  internalNotes: text(\"internal_notes\"),\n  publicResponse: text(\"public_response\"),\n  estimatedReward: integer(\"estimated_reward\"), // in cents\n  actualReward: integer(\"actual_reward\"), // in cents\n  reviewStarted: timestamp(\"review_started\"),\n  reviewCompleted: timestamp(\"review_completed\"),\n  dueDate: timestamp(\"due_date\"),\n  tags: jsonb(\"tags\").default([]), // Array of tags for categorization\n  attachments: jsonb(\"attachments\").default([]), // Array of file attachments\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\")\n});\n\nexport const moderationComments = pgTable(\"moderation_comments\", {\n  id: serial(\"id\").primaryKey(),\n  reviewId: integer(\"review_id\").notNull().references(() => moderationReviews.id),\n  authorId: integer(\"author_id\").notNull().references(() => users.id),\n  content: text(\"content\").notNull(),\n  commentType: text(\"comment_type\").default(\"internal\"), // internal, external, system\n  isResolved: boolean(\"is_resolved\").default(false),\n  resolvedBy: integer(\"resolved_by\").references(() => users.id),\n  resolvedAt: timestamp(\"resolved_at\"),\n  mentions: jsonb(\"mentions\").default([]), // Array of user IDs mentioned\n  attachments: jsonb(\"attachments\").default([]),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\")\n});\n\nexport const moderationAuditLog = pgTable(\"moderation_audit_log\", {\n  id: serial(\"id\").primaryKey(),\n  reviewId: integer(\"review_id\").references(() => moderationReviews.id),\n  submissionId: integer(\"submission_id\").references(() => submissions.id),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  action: text(\"action\").notNull(), // assigned, status_changed, comment_added, decision_made\n  oldValue: text(\"old_value\"),\n  newValue: text(\"new_value\"),\n  description: text(\"description\"),\n  metadata: jsonb(\"metadata\").default({}),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\nexport const moderationWorkflow = pgTable(\"moderation_workflow\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  steps: jsonb(\"steps\").notNull(), // Array of workflow steps\n  triggerConditions: jsonb(\"trigger_conditions\").default([]),\n  isActive: boolean(\"is_active\").default(true),\n  createdBy: integer(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\")\n});\n\nexport const moderationNotifications = pgTable(\"moderation_notifications\", {\n  id: serial(\"id\").primaryKey(),\n  recipientId: integer(\"recipient_id\").notNull().references(() => users.id),\n  senderId: integer(\"sender_id\").references(() => users.id),\n  reviewId: integer(\"review_id\").references(() => moderationReviews.id),\n  type: text(\"type\").notNull(), // assignment, status_change, comment, deadline, mention\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  priority: text(\"priority\").default(\"normal\"), // low, normal, high, urgent\n  isRead: boolean(\"is_read\").default(false),\n  readAt: timestamp(\"read_at\"),\n  actionUrl: text(\"action_url\"),\n  metadata: jsonb(\"metadata\").default({}),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\n// Insert schemas for moderation system\nexport const insertModerationTeamSchema = createInsertSchema(moderationTeam).pick({\n  userId: true,\n  role: true,\n  department: true,\n  permissions: true,\n  specializations: true,\n  maxAssignments: true\n});\n\nexport const insertModerationReviewSchema = createInsertSchema(moderationReviews).pick({\n  submissionId: true,\n  reviewerId: true,\n  assignedBy: true,\n  status: true,\n  priority: true,\n  category: true,\n  severity: true,\n  decision: true,\n  decisionReason: true,\n  internalNotes: true,\n  publicResponse: true,\n  estimatedReward: true,\n  dueDate: true,\n  tags: true\n});\n\nexport const insertModerationCommentSchema = createInsertSchema(moderationComments).pick({\n  reviewId: true,\n  authorId: true,\n  content: true,\n  commentType: true,\n  mentions: true,\n  attachments: true\n});\n\nexport const insertModerationAuditLogSchema = createInsertSchema(moderationAuditLog).pick({\n  reviewId: true,\n  submissionId: true,\n  userId: true,\n  action: true,\n  oldValue: true,\n  newValue: true,\n  description: true,\n  metadata: true,\n  ipAddress: true,\n  userAgent: true\n});\n\nexport const insertModerationNotificationSchema = createInsertSchema(moderationNotifications).pick({\n  recipientId: true,\n  senderId: true,\n  reviewId: true,\n  type: true,\n  title: true,\n  message: true,\n  priority: true,\n  actionUrl: true,\n  metadata: true\n});\n\n// Type exports for moderation system\nexport type ModerationTeam = typeof moderationTeam.$inferSelect;\nexport type InsertModerationTeam = z.infer<typeof insertModerationTeamSchema>;\n\nexport type ModerationReview = typeof moderationReviews.$inferSelect;\nexport type InsertModerationReview = z.infer<typeof insertModerationReviewSchema>;\n\nexport type ModerationComment = typeof moderationComments.$inferSelect;\nexport type InsertModerationComment = z.infer<typeof insertModerationCommentSchema>;\n\nexport type ModerationAuditLog = typeof moderationAuditLog.$inferSelect;\nexport type InsertModerationAuditLog = z.infer<typeof insertModerationAuditLogSchema>;\n\nexport type ModerationNotification = typeof moderationNotifications.$inferSelect;\nexport type InsertModerationNotification = z.infer<typeof insertModerationNotificationSchema>;\n\n// Cryptocurrency Payment Tables\nexport const cryptoWallets = pgTable(\"crypto_wallets\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  walletType: text(\"wallet_type\").notNull(), // binance, metamask, trust_wallet, etc.\n  walletAddress: text(\"wallet_address\").notNull(), // encrypted\n  network: text(\"network\").notNull(), // bitcoin, ethereum, bsc, tron, etc.\n  isVerified: boolean(\"is_verified\").default(false),\n  verificationCode: text(\"verification_code\"),\n  lastUsed: timestamp(\"last_used\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\")\n});\n\nexport const cryptoPaymentIntents = pgTable(\"crypto_payment_intents\", {\n  id: serial(\"id\").primaryKey(),\n  companyId: integer(\"company_id\").notNull().references(() => users.id),\n  amount: integer(\"amount\").notNull(), // in cents\n  currency: text(\"currency\").default(\"USDT\"), // USDT, BTC, ETH, BNB, etc.\n  purpose: text(\"purpose\").notNull(), // wallet_topup, bounty_payment, subscription\n  status: text(\"status\").default(\"pending\"), // pending, completed, failed, expired\n  provider: text(\"provider\").notNull().default(\"binance_pay\"), // binance_pay, coinbase, etc.\n  providerOrderId: text(\"provider_order_id\").unique(),\n  merchantOrderId: text(\"merchant_order_id\").unique(),\n  transactionId: text(\"transaction_id\"), // blockchain transaction ID\n  paymentMemo: text(\"payment_memo\"), // company name in memo field\n  metadata: jsonb(\"metadata\"), // provider-specific data\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\")\n});\n\nexport const cryptoWithdrawals = pgTable(\"crypto_withdrawals\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  amount: integer(\"amount\").notNull(), // in cents\n  currency: text(\"currency\").notNull(), // USDT, BTC, ETH, BNB, etc.\n  walletAddress: text(\"wallet_address\").notNull(), // encrypted destination address\n  network: text(\"network\").notNull(), // bitcoin, ethereum, bsc, tron, etc.\n  status: text(\"status\").default(\"pending\"), // pending, processing, completed, failed, cancelled\n  provider: text(\"provider\").notNull().default(\"binance_pay\"),\n  transactionId: text(\"transaction_id\"), // blockchain transaction ID\n  providerWithdrawalId: text(\"provider_withdrawal_id\"), // provider's withdrawal ID\n  networkFee: integer(\"network_fee\").default(0), // network fee in cents\n  failureReason: text(\"failure_reason\"),\n  scheduledFor: timestamp(\"scheduled_for\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\")\n});\n\nexport const cryptoTransactions = pgTable(\"crypto_transactions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  companyId: integer(\"company_id\").references(() => users.id),\n  transactionType: text(\"transaction_type\").notNull(), // payment_in, withdrawal_out, fee, commission\n  amount: integer(\"amount\").notNull(), // in cents\n  currency: text(\"currency\").notNull(),\n  fromAddress: text(\"from_address\"),\n  toAddress: text(\"to_address\"),\n  transactionHash: text(\"transaction_hash\"),\n  blockNumber: integer(\"block_number\"),\n  networkFee: integer(\"network_fee\").default(0),\n  confirmations: integer(\"confirmations\").default(0),\n  requiredConfirmations: integer(\"required_confirmations\").default(1),\n  status: text(\"status\").default(\"pending\"), // pending, confirmed, failed\n  relatedPaymentIntentId: integer(\"related_payment_intent_id\").references(() => cryptoPaymentIntents.id),\n  relatedWithdrawalId: integer(\"related_withdrawal_id\").references(() => cryptoWithdrawals.id),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\")\n});\n\nexport const cryptoWalletVerifications = pgTable(\"crypto_wallet_verifications\", {\n  id: serial(\"id\").primaryKey(),\n  walletId: integer(\"wallet_id\").notNull().references(() => cryptoWallets.id),\n  verificationMethod: text(\"verification_method\").notNull(), // signature, micro_transaction, message_signing\n  verificationData: text(\"verification_data\"), // signature, transaction hash, etc.\n  status: text(\"status\").default(\"pending\"), // pending, verified, failed\n  attempts: integer(\"attempts\").default(0),\n  maxAttempts: integer(\"max_attempts\").default(3),\n  expiresAt: timestamp(\"expires_at\"),\n  verifiedAt: timestamp(\"verified_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\nexport const cryptoNetworkSettings = pgTable(\"crypto_network_settings\", {\n  id: serial(\"id\").primaryKey(),\n  network: text(\"network\").notNull().unique(), // bitcoin, ethereum, bsc, tron, etc.\n  displayName: text(\"display_name\").notNull(),\n  currency: text(\"currency\").notNull(), // BTC, ETH, BNB, TRX, etc.\n  isActive: boolean(\"is_active\").default(true),\n  minWithdrawal: integer(\"min_withdrawal\").notNull(), // minimum withdrawal in cents\n  maxWithdrawal: integer(\"max_withdrawal\").notNull(), // maximum withdrawal in cents\n  networkFee: integer(\"network_fee\").notNull(), // standard network fee in cents\n  confirmationsRequired: integer(\"confirmations_required\").default(1),\n  processingTimeMinutes: integer(\"processing_time_minutes\").default(30),\n  metadata: jsonb(\"metadata\"), // network-specific configuration\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\")\n});\n\n// Admin Crypto Payment Approvals - For manual confirmation of crypto payments\nexport const cryptoPaymentApprovals = pgTable(\"crypto_payment_approvals\", {\n  id: serial(\"id\").primaryKey(),\n  cryptoPaymentIntentId: integer(\"crypto_payment_intent_id\").notNull().references(() => cryptoPaymentIntents.id),\n  companyId: integer(\"company_id\").notNull().references(() => users.id),\n  paymentMemo: text(\"payment_memo\").notNull(), // company name from memo\n  amount: integer(\"amount\").notNull(), // in cents\n  currency: text(\"currency\").notNull(),\n  status: text(\"status\").default(\"pending\"), // pending, approved, rejected\n  adminId: integer(\"admin_id\").references(() => users.id), // admin who processed\n  adminNotes: text(\"admin_notes\"),\n  approvedAt: timestamp(\"approved_at\"),\n  rejectedAt: timestamp(\"rejected_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\")\n});\n\n// Insert schemas for crypto tables\nexport const insertCryptoWalletSchema = createInsertSchema(cryptoWallets).pick({\n  userId: true,\n  walletType: true,\n  walletAddress: true,\n  network: true,\n  isVerified: true\n});\n\nexport const insertCryptoPaymentIntentSchema = createInsertSchema(cryptoPaymentIntents).pick({\n  companyId: true,\n  amount: true,\n  currency: true,\n  purpose: true,\n  provider: true,\n  providerOrderId: true,\n  merchantOrderId: true,\n  paymentMemo: true,\n  metadata: true\n});\n\nexport const insertCryptoPaymentApprovalSchema = createInsertSchema(cryptoPaymentApprovals).pick({\n  cryptoPaymentIntentId: true,\n  companyId: true,\n  paymentMemo: true,\n  amount: true,\n  currency: true,\n  adminNotes: true\n});\n\nexport const insertCryptoWithdrawalSchema = createInsertSchema(cryptoWithdrawals).pick({\n  userId: true,\n  amount: true,\n  currency: true,\n  walletAddress: true,\n  network: true,\n  provider: true,\n  scheduledFor: true\n});\n\nexport const insertCryptoTransactionSchema = createInsertSchema(cryptoTransactions).pick({\n  userId: true,\n  companyId: true,\n  transactionType: true,\n  amount: true,\n  currency: true,\n  fromAddress: true,\n  toAddress: true,\n  transactionHash: true,\n  networkFee: true,\n  relatedPaymentIntentId: true,\n  relatedWithdrawalId: true,\n  metadata: true\n});\n\nexport const insertCryptoNetworkSettingsSchema = createInsertSchema(cryptoNetworkSettings).pick({\n  network: true,\n  displayName: true,\n  currency: true,\n  isActive: true,\n  minWithdrawal: true,\n  maxWithdrawal: true,\n  networkFee: true,\n  confirmationsRequired: true,\n  processingTimeMinutes: true,\n  metadata: true\n});\n\n// Type exports for crypto system\nexport type CryptoWallet = typeof cryptoWallets.$inferSelect;\nexport type InsertCryptoWallet = z.infer<typeof insertCryptoWalletSchema>;\n\nexport type CryptoPaymentIntent = typeof cryptoPaymentIntents.$inferSelect;\nexport type InsertCryptoPaymentIntent = z.infer<typeof insertCryptoPaymentIntentSchema>;\n\nexport type CryptoWithdrawal = typeof cryptoWithdrawals.$inferSelect;\nexport type InsertCryptoWithdrawal = z.infer<typeof insertCryptoWithdrawalSchema>;\n\nexport type CryptoTransaction = typeof cryptoTransactions.$inferSelect;\nexport type InsertCryptoTransaction = z.infer<typeof insertCryptoTransactionSchema>;\n\nexport type CryptoNetworkSettings = typeof cryptoNetworkSettings.$inferSelect;\nexport type InsertCryptoNetworkSettings = z.infer<typeof insertCryptoNetworkSettingsSchema>;\n\nexport type CryptoPaymentApproval = typeof cryptoPaymentApprovals.$inferSelect;\nexport type InsertCryptoPaymentApproval = z.infer<typeof insertCryptoPaymentApprovalSchema>;","size_bytes":41229},"src/App.css":{"content":"/* App-specific styles */\n.app-container {\n  min-height: 100vh;\n  background-color: var(--background);\n  color: var(--foreground);\n}\n\n/* Cybersecurity-themed styles */\n.cyber-container {\n  border: 1px solid var(--primary);\n  box-shadow: 0 0 10px var(--primary);\n  border-radius: 4px;\n  padding: 1rem;\n  background-color: rgba(0, 0, 0, 0.8);\n}\n\n.cyber-text {\n  color: var(--primary);\n  text-shadow: 0 0 5px var(--primary);\n  font-family: monospace;\n}\n\n.matrix-bg {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: -1;\n}","size_bytes":575},"src/App.tsx":{"content":"import React from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"./components/ui/toaster\";\nimport NotFound from \"./pages/not-found\";\nimport AuthPage from \"./pages/auth-page\";\nimport LandingPage from \"./pages/landing-page\";\nimport DashboardPage from \"./pages/dashboard-page\";\nimport ProgramsPage from \"./pages/programs-page\";\nimport SubmitBugPage from \"./pages/submit-bug-page\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\nimport { AuthProvider } from \"./hooks/use-auth\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={LandingPage} />\n      <ProtectedRoute path=\"/dashboard\" component={DashboardPage} />\n      <ProtectedRoute path=\"/programs\" component={ProgramsPage} />\n      <ProtectedRoute path=\"/submit-bug\" component={SubmitBugPage} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <Router />\n        <Toaster />\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":1240},"src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n  --matrix-color: 14, 232, 109;\n  --accent-color: 255, 50, 120;\n  --primary-glow: 0 0 10px rgba(var(--matrix-color), 0.5), 0 0 20px rgba(var(--matrix-color), 0.3);\n  --accent-glow: 0 0 10px rgba(var(--accent-color), 0.5), 0 0 20px rgba(var(--accent-color), 0.3);\n  --scanner-line: rgba(var(--matrix-color), 0.6);\n  --scanner-speed: 4s;\n  --glitch-duration: 0.8s;\n  --background: #0b0b0e;\n  --background-dark: #050507;\n  --text-color: #e0e0e0;\n  --muted-text: #a0a0a0;\n  --border-color: rgba(var(--matrix-color), 0.3);\n  --accent-border-color: rgba(var(--accent-color), 0.3);\n}\n\nbody {\n  font-family: var(--font-mono);\n  background-color: var(--background);\n  color: var(--text-color);\n  overflow-x: hidden;\n}\n\n/* Matrix Background */\n.matrix-canvas {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 0;\n  opacity: 0.15;\n  pointer-events: none;\n}\n\n/* Neon Effects */\n.neon-text {\n  color: rgb(var(--matrix-color));\n  text-shadow: var(--primary-glow);\n  letter-spacing: 2px;\n}\n\n.neon-border {\n  border: 1px solid var(--border-color);\n  box-shadow: var(--primary-glow);\n}\n\n/* Terminal Text Style */\n.terminal-text {\n  font-family: var(--font-mono);\n  color: rgb(var(--matrix-color));\n  line-height: 1.6;\n}\n\n/* Scanner effect for cards and sections */\n.scanner {\n  position: relative;\n  overflow: hidden;\n}\n\n.scanner::after {\n  content: \"\";\n  position: absolute;\n  top: -50%;\n  left: 0;\n  right: 0;\n  height: 200%;\n  background: linear-gradient(\n    to bottom,\n    transparent 0%,\n    var(--scanner-line) 50%,\n    transparent 100%\n  );\n  animation: scan var(--scanner-speed) ease-in-out infinite;\n  opacity: 0;\n  z-index: 1;\n  pointer-events: none;\n}\n\n.scanner:hover::after {\n  opacity: 0.5;\n}\n\n@keyframes scan {\n  0% {\n    transform: translateY(-50%);\n  }\n  100% {\n    transform: translateY(50%);\n  }\n}\n\n/* Typing animation for text */\n.typing-text {\n  overflow: hidden;\n  white-space: nowrap;\n  border-right: 3px solid rgb(var(--matrix-color));\n  width: 0;\n  animation: typing 3s steps(40, end) forwards, \n             cursor 0.75s step-end infinite;\n}\n\n@keyframes typing {\n  from { width: 0 }\n  to { width: 100% }\n}\n\n@keyframes cursor {\n  from, to { border-color: transparent }\n  50% { border-color: rgb(var(--matrix-color)) }\n}\n\n/* Glitch effect for text headings */\n.glitch {\n  position: relative;\n  color: rgb(var(--matrix-color));\n  text-shadow: var(--primary-glow);\n}\n\n.glitch::before,\n.glitch::after {\n  content: attr(data-text);\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n}\n\n.glitch::before {\n  left: 2px;\n  color: rgba(255, 0, 127, 0.8);\n  text-shadow: -1px 0 rgb(0, 255, 255);\n  animation: glitch-animation-1 var(--glitch-duration) infinite linear alternate-reverse;\n}\n\n.glitch::after {\n  left: -2px;\n  color: rgba(0, 255, 255, 0.8);\n  text-shadow: 1px 0 rgb(255, 0, 127);\n  animation: glitch-animation-2 var(--glitch-duration) infinite linear alternate-reverse;\n}\n\n@keyframes glitch-animation-1 {\n  0% {\n    clip-path: inset(78% 0 13% 0);\n  }\n  20% {\n    clip-path: inset(29% 0 41% 0);\n  }\n  40% {\n    clip-path: inset(54% 0 18% 0);\n  }\n  60% {\n    clip-path: inset(77% 0 0% 0);\n  }\n  80% {\n    clip-path: inset(15% 0 47% 0);\n  }\n  100% {\n    clip-path: inset(91% 0 6% 0);\n  }\n}\n\n@keyframes glitch-animation-2 {\n  0% {\n    clip-path: inset(75% 0 17% 0);\n  }\n  20% {\n    clip-path: inset(49% 0 36% 0);\n  }\n  40% {\n    clip-path: inset(19% 0 39% 0);\n  }\n  60% {\n    clip-path: inset(93% 0 4% 0);\n  }\n  80% {\n    clip-path: inset(0% 0 94% 0);\n  }\n  100% {\n    clip-path: inset(58% 0 5% 0);\n  }\n}\n\n/* Cyberpunk-style cards */\n.cyber-card {\n  background: rgba(0, 0, 0, 0.8);\n  border: 1px solid var(--border-color);\n  border-radius: 4px;\n  padding: 1rem;\n  box-shadow: var(--primary-glow);\n  position: relative;\n  overflow: hidden;\n}\n\n.cyber-card::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 2px;\n  background: linear-gradient(\n    90deg,\n    transparent,\n    rgb(var(--matrix-color)),\n    transparent\n  );\n  opacity: 0.5;\n}\n\n/* Cyber buttons */\n.cyber-button {\n  background-color: rgba(var(--matrix-color), 0.1);\n  color: rgb(var(--matrix-color));\n  border: 1px solid var(--border-color);\n  border-radius: 4px;\n  padding: 0.5rem 1rem;\n  font-family: var(--font-mono);\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  position: relative;\n  overflow: hidden;\n  transition: all 0.3s ease;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.cyber-button:hover {\n  background-color: rgba(var(--matrix-color), 0.2);\n  box-shadow: var(--primary-glow);\n}\n\n.cyber-button:active {\n  transform: translateY(1px);\n}\n\n.cyber-button:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n/* Dashboard components */\n.dashboard-section {\n  border-left: 2px solid rgba(var(--matrix-color), 0.5);\n  padding-left: 1rem;\n  margin-bottom: 2rem;\n}\n\n/* Form fields with cyberpunk styling */\n.cyber-input {\n  background-color: rgba(0, 0, 0, 0.5);\n  border: 1px solid var(--border-color);\n  color: var(--text-color);\n  border-radius: 4px;\n  padding: 0.75rem 1rem;\n  font-family: var(--font-mono);\n  transition: all 0.3s ease;\n  width: 100%;\n}\n\n.cyber-input:focus {\n  border-color: rgb(var(--matrix-color));\n  box-shadow: var(--primary-glow);\n  outline: none;\n}\n\n/* Outline button variant */\n.cyber-button-outline {\n  background-color: transparent;\n  color: var(--text-color);\n  border: 1px solid var(--border-color);\n  border-radius: 4px;\n  padding: 0.5rem 1rem;\n  font-family: var(--font-mono);\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  position: relative;\n  overflow: hidden;\n  transition: all 0.3s ease;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.cyber-button-outline:hover {\n  border-color: rgb(var(--matrix-color));\n  color: rgb(var(--matrix-color));\n  box-shadow: var(--primary-glow);\n}\n\n.cyber-button-outline:active {\n  transform: translateY(1px);\n}\n\n/* Terminal window for code displays */\n.cyber-terminal {\n  background-color: var(--background-dark);\n  border: 1px solid var(--border-color);\n  border-radius: 4px;\n  padding: 1rem;\n  font-family: var(--font-mono);\n  color: var(--text-color);\n  line-height: 1.5;\n  position: relative;\n  overflow: hidden;\n}\n\n.cyber-terminal::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 4px;\n  background: linear-gradient(\n    90deg,\n    rgb(var(--matrix-color)),\n    rgb(var(--accent-color))\n  );\n  opacity: 0.7;\n}\n\n.terminal-window {\n  background-color: var(--background-dark);\n  border: 1px solid var(--border-color);\n  border-radius: 4px;\n  padding: 1rem;\n  font-family: var(--font-mono);\n  color: var(--text-color);\n  line-height: 1.5;\n}\n\n/* Multiple typing text animations with delays */\n.typing-text-1 {\n  overflow: hidden;\n  white-space: nowrap;\n  border-right: 3px solid rgb(var(--matrix-color));\n  width: 0;\n  animation: typing 2s steps(40, end) forwards, \n             cursor 0.75s step-end infinite;\n}\n\n.typing-text-2 {\n  overflow: hidden;\n  white-space: nowrap;\n  border-right: 3px solid rgb(var(--matrix-color));\n  width: 0;\n  opacity: 0;\n  animation: typing 2s steps(40, end) 2s forwards, \n             cursor 0.75s step-end 2s infinite,\n             fadeIn 0.1s linear 2s forwards;\n}\n\n.typing-text-3 {\n  overflow: hidden;\n  white-space: nowrap;\n  border-right: 3px solid rgb(var(--matrix-color));\n  width: 0;\n  opacity: 0;\n  animation: typing 2s steps(40, end) 4s forwards, \n             cursor 0.75s step-end 4s infinite,\n             fadeIn 0.1s linear 4s forwards;\n}\n\n.typing-text-4 {\n  overflow: hidden;\n  white-space: nowrap;\n  border-right: 3px solid rgb(var(--matrix-color));\n  width: 0;\n  opacity: 0;\n  animation: typing 2s steps(40, end) 6s forwards, \n             cursor 0.75s step-end 6s infinite,\n             fadeIn 0.1s linear 6s forwards;\n}\n\n.typing-text-5 {\n  overflow: hidden;\n  white-space: nowrap;\n  border-right: 3px solid rgb(var(--matrix-color));\n  width: 0;\n  opacity: 0;\n  animation: typing 2s steps(40, end) 8s forwards, \n             cursor 0.75s step-end 8s infinite,\n             fadeIn 0.1s linear 8s forwards;\n}\n\n.typing-text-6 {\n  overflow: hidden;\n  white-space: nowrap;\n  border-right: 3px solid rgb(var(--matrix-color));\n  width: 0;\n  opacity: 0;\n  animation: typing 2s steps(40, end) 10s forwards, \n             cursor 0.75s step-end 10s infinite,\n             fadeIn 0.1s linear 10s forwards;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0 }\n  to { opacity: 1 }\n}\n\n/* Fade-in animation */\n.fade-in {\n  animation: fadeIn 1s ease-in-out;\n}\n\n/* Loading animation */\n.cyber-loading {\n  display: inline-block;\n  position: relative;\n  width: 80px;\n  height: 80px;\n}\n\n.cyber-loading:after {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border: 2px solid rgba(var(--matrix-color), 0.2);\n  border-radius: 50%;\n  border-top-color: rgb(var(--matrix-color));\n  animation: cyber-spinner 1s linear infinite;\n}\n\n@keyframes cyber-spinner {\n  to {\n    transform: rotate(360deg);\n  }\n}","size_bytes":9214},"src/main.tsx":{"content":"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);","size_bytes":249},"src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n\n// Allow importing .png files\ndeclare module \"*.png\" {\n  const value: string;\n  export default value;\n}\n\n// Allow importing .jpg files\ndeclare module \"*.jpg\" {\n  const value: string;\n  export default value;\n}\n\n// Allow importing .svg files\ndeclare module \"*.svg\" {\n  const value: string;\n  export default value;\n}","size_bytes":352},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { useState, useEffect } from \"react\";\nimport NotFound from \"@/pages/not-found\";\nimport AuthPage from \"@/pages/auth-page\";\nimport LandingPage from \"@/pages/landing-page\";\nimport DashboardPage from \"@/pages/dashboard-page\";\nimport CompanyDashboardPage from \"@/pages/company-dashboard-page\";\nimport TriageDashboardPage from \"@/pages/triage-dashboard-page\";\nimport ModerationDashboard from \"@/components/moderation-dashboard\";\nimport CreateProgramPage from \"@/pages/create-program-page\";\nimport ProgramsPage from \"@/pages/programs-page\";\nimport ProgramDetailPage from \"@/pages/program-detail-page\";\nimport SubmitBugPage from \"@/pages/submit-bug-page\";\nimport VerifyEmailPage from \"@/pages/verify-email-page\";\nimport ProfilePage from \"@/pages/profile-page\";\nimport SettingsPage from \"@/pages/settings-page\";\nimport LeaderboardPage from \"@/pages/leaderboard-page\";\nimport TermsOfServicePage from \"@/pages/terms-of-service\";\nimport PrivacyPolicyPage from \"@/pages/privacy-policy\";\nimport ResourcesPage from \"@/pages/resources-page\";\nimport LegalPage from \"@/pages/legal-page\";\nimport HelpCenterPage from \"@/pages/help-center-page\";\nimport BlogPage from \"@/pages/blog-page\";\nimport DocumentationPage from \"@/pages/documentation-page\";\nimport SecurityPage from \"@/pages/security-page\";\nimport BadgesPage from \"./pages/badges-page\";\nimport ActivitiesPage from \"@/pages/activities-page\";\nimport AboutPage from \"@/pages/about-page\";\nimport AdminWithdrawalsPage from \"./pages/admin-withdrawals-page\";\nimport AdminCryptoWithdrawalsPage from \"./pages/admin-crypto-withdrawals-page\";\nimport AdminCompanyWalletsPage from \"@/pages/admin-company-wallets-page\";\nimport AdminPaymentDashboard from './pages/admin-payment-dashboard';\nimport CryptoPaymentPage from './pages/crypto-payment-page';\nimport CryptoWithdrawalPage from './pages/crypto-withdrawal-page';\nimport PaymentDashboardPage from \"./pages/payment-dashboard-page\";\nimport ResearcherPayoutsPage from \"./pages/researcher-payouts-page\";\nimport CompanyWalletPage from \"@/pages/company-wallet-page\";\nimport AdminLoginPage from \"@/pages/admin-login-page\";\nimport AdminDashboardPage from \"@/pages/admin-dashboard-page\";\nimport AdminPage from \"./pages/admin-page\";\nimport { AdminRoute } from \"@/components/admin-route\";\nimport SimpleAdminLogin from \"@/pages/simple-admin-login\";\nimport ForceAdmin from \"@/pages/force-admin\";\nimport ForgotPasswordPage from \"./pages/forgot-password-page\";\nimport WalletPage from \"./pages/wallet-page\";\nimport HacktivityPage from \"./pages/hacktivity-page\";\nimport FindProgramsPage from \"./pages/find-programs-page\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\nimport { AuthProvider, useAuth } from \"@/hooks/use-auth\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport ClientLandingPage from \"@/pages/client-landing-page\";\n\n\nfunction Router() {\n  const { user } = useAuth();\n\n  // Determine the component for the dashboard based on userType\n  const DashboardComponent = () => {\n    if (user?.userType === 'company') {\n      return <CompanyDashboardPage />;\n    }\n    return <DashboardPage />;\n  };\n\n  // Wallet route component \n  const WalletComponent = () => {\n    if (!user) {\n      return <Redirect to=\"/auth\" />;\n    }\n    return <WalletPage />;\n  };\n\n  // Admin route component with enhanced security checks\n  const AdminComponent = () => {\n    const [isAuthorized, setIsAuthorized] = useState(false);\n\n    useEffect(() => {\n      // Verify admin status on component mount\n      const verifyAdmin = async () => {\n        try {\n          const response = await fetch('/api/admin/verify', {\n            credentials: 'include'\n          });\n          setIsAuthorized(response.ok);\n        } catch (error) {\n          console.error('Admin verification failed');\n          setIsAuthorized(false);\n        }\n      };\n      verifyAdmin();\n    }, []);\n\n    // Multiple layers of protection\n    if (!user || user.userType !== 'admin' || !isAuthorized) {\n      return <Redirect to=\"/dashboard\" />;\n    }\n    return <AdminPage />;\n  };\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={LandingPage} />\n      <ProtectedRoute path=\"/dashboard\" component={DashboardComponent} />\n      <ProtectedRoute path=\"/company-dashboard\" component={CompanyDashboardPage} />\n      <ProtectedRoute path=\"/triage-dashboard\" component={TriageDashboardPage} />\n      <Route path=\"/programs\" component={ProgramsPage} />\n      <Route path=\"/programs/:id\" component={ProgramDetailPage} />\n      <Route path=\"/hacktivity\" component={HacktivityPage} />\n      <Route path=\"/find-programs\" component={FindProgramsPage} />\n      <ProtectedRoute path=\"/submit\" component={SubmitBugPage} />\n      <ProtectedRoute path=\"/submit-bug\" component={SubmitBugPage} />\n      <ProtectedRoute path=\"/profile\" component={ProfilePage} />\n      <ProtectedRoute path=\"/profile/:id\" component={ProfilePage} />\n      <ProtectedRoute path=\"/settings\" component={SettingsPage} />\n      <ProtectedRoute path=\"/leaderboard\" component={LeaderboardPage} />\n      <ProtectedRoute path=\"/badges\" component={BadgesPage} />\n      <ProtectedRoute path=\"/activities\" component={ActivitiesPage} />\n      <ProtectedRoute path=\"/wallet\" component={WalletComponent} />\n      <ProtectedRoute path=\"/company/wallet\" component={CompanyWalletPage} />\n      <ProtectedRoute path=\"/admin/company-wallets\" component={AdminCompanyWalletsPage} />\n      <ProtectedRoute path=\"/admin/withdrawals\" component={AdminWithdrawalsPage} />\n      <ProtectedRoute path=\"/admin/crypto/withdrawals\" component={AdminCryptoWithdrawalsPage} />\n      <ProtectedRoute path=\"/admin/payments\" component={AdminPaymentDashboard} />\n      <ProtectedRoute path=\"/crypto/payments\" component={CryptoPaymentPage} />\n      <ProtectedRoute path=\"/crypto/payment\" component={CryptoPaymentPage} />\n      <ProtectedRoute path=\"/crypto/withdrawals\" component={CryptoWithdrawalPage} />\n      <Route path=\"/terms-of-service\">\n        {() => <TermsOfServicePage />}\n      </Route>\n      <Route path=\"/terms\">\n        {() => <Redirect to=\"/terms-of-service\" />}\n      </Route>\n      <ProtectedRoute path=\"/payment-dashboard\" component={PaymentDashboardPage} />\n      <ProtectedRoute path=\"/researcher-payouts\" component={ResearcherPayoutsPage} />\n      <Route path=\"/admin\" component={AdminLoginPage} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route path=\"/forgot-password\" component={ForgotPasswordPage} />\n      <Route path=\"/verify-email\" component={VerifyEmailPage} />\n      <Route path=\"/privacy-policy\">\n        {() => <PrivacyPolicyPage />}\n      </Route>\n      <Route path=\"/resources\">\n        {() => <ResourcesPage />}\n      </Route>\n      <Route path=\"/legal\">\n        {() => <LegalPage />}\n      </Route>\n      <Route path=\"/help-center\">\n        {() => <HelpCenterPage />}\n      </Route>\n      <Route path=\"/blog\">\n        {() => <BlogPage />}\n      </Route>\n      <Route path=\"/documentation\">\n        {() => <DocumentationPage />}\n      </Route>\n      <Route path=\"/security\">\n        {() => <SecurityPage />}\n      </Route>\n      <Route path=\"/about\">\n        {() => <AboutPage />}\n      </Route>\n      <Route path=\"/create-program\" component={CreateProgramPage} />\n\n      {/* Admin Routes */}\n      <Route path=\"/admin\">\n        {() => <ForceAdmin />}\n      </Route>\n      <Route path=\"/admin/dashboard\" component={AdminDashboardPage} />\n      <Route path=\"/for-organizations\" component={ClientLandingPage} />\n      <Route path=\"/for-organisations\" component={ClientLandingPage} />\n\n      <ProtectedRoute path=\"/moderation\" component={ModerationDashboard} />\n\n      <Route path=\"/*\" component={NotFound} />\n    </Switch>\n  );\n}\n\n\n\nfunction App() {\n  return (\n    <ThemeProvider defaultTheme=\"dark\" storageKey=\"vite-ui-theme\">\n      <QueryClientProvider client={queryClient}>\n        <AuthProvider>\n          <Router />\n          <Toaster />\n        </AuthProvider>\n      </QueryClientProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;","size_bytes":8182},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;500;600;700&family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 7%;\n    --foreground: 0 0% 98%;\n\n    --card: 0 0% 5%;\n    --card-foreground: 0 0% 98%;\n\n    --popover: 0 0% 5%;\n    --popover-foreground: 0 0% 98%;\n\n    --primary: 120 100% 50%;\n    --primary-foreground: 0 0% 0%;\n\n    --secondary: 120 5% 15%;\n    --secondary-foreground: 0 0% 98%;\n\n    --muted: 120 5% 15%;\n    --muted-foreground: 240 5% 65%;\n\n    --accent: 210 100% 55%;\n    --accent-foreground: 0 0% 98%;\n\n    --destructive: 0 100% 62%;\n    --destructive-foreground: 0 0% 98%;\n\n    --border: 120 100% 30% / 0.3;\n    --input: 120 100% 30% / 0.3;\n    --ring: 120 100% 50%;\n\n    --radius: 0.5rem;\n\n    --chart-1: 120 100% 50%;\n    --chart-2: 210 100% 55%;\n    --chart-3: 0 100% 62%;\n    --chart-4: 45 100% 56%;\n    --chart-5: 275 100% 76%;\n  }\n\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    background-image: \n      radial-gradient(rgba(0, 255, 0, 0.05) 1px, transparent 1px),\n      radial-gradient(rgba(0, 255, 0, 0.05) 1px, transparent 1px);\n    background-size: 50px 50px;\n    background-position: 0 0, 25px 25px;\n    position: relative;\n    overflow-x: hidden;\n  }\n\n  /* Terminal/cyberpunk specific styles */\n  .font-mono {\n    font-family: 'Fira Code', monospace;\n  }\n\n  .font-sans {\n    font-family: 'Inter', sans-serif;\n  }\n\n  .terminal-card {\n    @apply bg-card/80 border border-primary/30 shadow-md backdrop-blur-md transition-all duration-300;\n  }\n\n  .terminal-card:hover {\n    @apply shadow-lg border-primary/50;\n    box-shadow: 0 0 15px rgba(0, 255, 0, 0.3);\n  }\n\n  .terminal-input {\n    @apply bg-black/50 border border-primary/30 rounded px-3 py-2 font-mono focus:outline-none focus:border-primary focus:ring-1 focus:ring-primary;\n    color: white;\n    caret-color: #00ff00;\n    text-shadow: 0 0 5px rgba(0, 255, 0, 0.3);\n  }\n\n  .glow-button {\n    @apply py-2 bg-primary/10 border border-primary text-primary font-mono rounded hover:bg-primary/20 transition-all duration-300;\n  }\n\n  .glow-button:hover {\n    box-shadow: 0 0 10px rgba(0, 255, 0, 0.7);\n  }\n\n  /* Terminal header */\n  .terminal-header {\n    @apply relative h-10 border-b border-primary/30;\n  }\n\n  .terminal-header::before {\n    content: \"● ● ●\";\n    @apply absolute top-3 left-4 text-muted-foreground text-xs tracking-widest;\n  }\n\n  /* Matrix text effect */\n  @keyframes blink {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0; }\n  }\n\n  .terminal-text-effect::after {\n    content: \"|\";\n    @apply absolute right-[-10px] animate-[blink_1s_step-end_infinite];\n  }\n\n  /* Matrix animations */\n  @keyframes matrix-fall {\n    0% { transform: translateY(-100%); }\n    100% { transform: translateY(1000%); }\n  }\n\n  /* Additional terminal effects */\n  .matrix-code {\n    animation: matrix-fall linear infinite;\n  }\n\n  @keyframes pulse-glow {\n    0%, 100% { \n      box-shadow: 0 0 5px rgba(var(--matrix-color), 0.3);\n    }\n    50% { \n      box-shadow: 0 0 20px rgba(var(--matrix-color), 0.6), 0 0 30px rgba(var(--matrix-color), 0.4);\n    }\n  }\n\n  .animate-pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite;\n  }\n}\n\n@layer utilities {\n  .bg-deep-black {\n    background-color: #121212;\n  }\n\n  .bg-surface {\n    background-color: #1e1e1e;\n  }\n\n  .bg-terminal {\n    background-color: #0c0c0c;\n  }\n\n  .text-matrix {\n    color: #00ff00;\n  }\n\n  .text-matrix-dark {\n    color: #00cc00;\n  }\n\n  .text-electric-blue {\n    color: #0a84ff;\n  }\n\n  .text-light-gray {\n    color: #e0e0e0;\n  }\n\n  .text-dim-gray {\n    color: #aaaaaa;\n  }\n\n  .text-alert-red {\n    color: #ff3e3e;\n  }\n\n  .text-warning-yellow {\n    color: #ffc107;\n  }\n\n  .animate-matrix-fall {\n    animation: matrix-fall 15s linear infinite;\n  }\n\n  .animate-pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite;\n  }\n\n  .animate-terminal-cursor {\n    animation: blink 1s step-end infinite;\n  }\n}","size_bytes":4054},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"src/components/matrix-background.tsx":{"content":"import React, { useEffect, useRef } from 'react';\n\ninterface Drop {\n  x: number;\n  y: number;\n  speed: number;\n  value: string;\n  fontSize: number;\n  opacity: number;\n}\n\ninterface MatrixBackgroundProps {\n  className?: string;\n}\n\nexport default function MatrixBackground({ className = '' }: MatrixBackgroundProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  \n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    \n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    \n    // Set canvas dimensions to match window\n    const setCanvasDimensions = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    \n    setCanvasDimensions();\n    window.addEventListener('resize', setCanvasDimensions);\n    \n    // Matrix character set\n    const chars = 'アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲン0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz[]/\\\\+-*=<>:;(){}';\n    \n    // Create drops\n    const drops: Drop[] = [];\n    const dropCount = Math.floor(canvas.width / 20); // Adjust drop density\n    \n    for (let i = 0; i < dropCount; i++) {\n      drops.push({\n        x: Math.random() * canvas.width,\n        y: Math.random() * canvas.height,\n        speed: 1 + Math.random() * 3,\n        value: chars.charAt(Math.floor(Math.random() * chars.length)),\n        fontSize: 10 + Math.random() * 14,\n        opacity: 0.1 + Math.random() * 0.9\n      });\n    }\n    \n    // Animation loop\n    const draw = () => {\n      // Semi-transparent black to create trail effect\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      \n      // Draw characters\n      drops.forEach(drop => {\n        // Set font and color\n        ctx.font = `${drop.fontSize}px monospace`;\n        ctx.fillStyle = `rgba(14, 232, 109, ${drop.opacity})`;\n        \n        // Draw the character\n        ctx.fillText(drop.value, drop.x, drop.y);\n        \n        // Move the drop\n        drop.y += drop.speed;\n        \n        // Reset drop if it goes offscreen\n        if (drop.y > canvas.height) {\n          drop.y = 0;\n          drop.x = Math.random() * canvas.width;\n          drop.value = chars.charAt(Math.floor(Math.random() * chars.length));\n        }\n        \n        // Occasionally change character\n        if (Math.random() > 0.95) {\n          drop.value = chars.charAt(Math.floor(Math.random() * chars.length));\n        }\n      });\n      \n      animationRef.current = requestAnimationFrame(draw);\n    };\n    \n    const animationRef = { current: 0 };\n    animationRef.current = requestAnimationFrame(draw);\n    \n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', setCanvasDimensions);\n      cancelAnimationFrame(animationRef.current);\n    };\n  }, []);\n  \n  return <canvas ref={canvasRef} className={`matrix-canvas ${className}`} />;\n}","size_bytes":2984},"src/hooks/use-auth.tsx":{"content":"import React, { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n  QueryFunction,\n  QueryKey,\n} from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { insertUserSchema, User as SelectUser } from \"../shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"./use-toast\";\n\n// Define the types for our authentication context\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, RegisterData>;\n};\n\n// Define the data shapes for login and registration\ntype LoginData = Pick<z.infer<typeof insertUserSchema>, \"username\" | \"password\">;\ntype RegisterData = z.infer<typeof insertUserSchema>;\n\n// Create the authentication context\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\n// Auth provider component\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  \n  // Query to fetch the current authenticated user\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | null, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }) as QueryFunction<SelectUser | null, QueryKey>,\n  });\n\n  // Mutation for user login\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Logged in successfully\",\n        description: `Welcome back, ${user.username}!`,\n        variant: \"default\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation for user registration\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: RegisterData) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Account created\",\n        description: `Welcome to CyberHunt, ${user.username}!`,\n        variant: \"default\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation for user logout\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Logged out\",\n        description: \"You have been successfully logged out.\",\n        variant: \"default\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\n// Hook to use the auth context\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}","size_bytes":3776},"src/hooks/use-toast.ts":{"content":"import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\n/**\n * Utility function to merge Tailwind CSS classes.\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport type ToastProps = {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: React.ReactNode;\n  variant?: \"default\" | \"destructive\";\n};\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: React.ReactNode;\n};\n\nfunction genId() {\n  return Math.random().toString(36).substring(2, 9);\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const;\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"];\n      toast: ToasterToast;\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"];\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case actionTypes.ADD_TOAST:\n      return {\n        ...state,\n        toasts: [...state.toasts, action.toast],\n      };\n\n    case actionTypes.UPDATE_TOAST:\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      };\n\n    case actionTypes.DISMISS_TOAST: {\n      const { toastId } = action;\n\n      // If no id is specified, dismiss all\n      if (toastId === undefined) {\n        return {\n          ...state,\n          toasts: state.toasts.map((t) => ({\n            ...t,\n            dismissed: true,\n          })),\n        };\n      }\n\n      // Dismiss by id\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId ? { ...t, dismissed: true } : t\n        ),\n      };\n    }\n    \n    case actionTypes.REMOVE_TOAST: {\n      const { toastId } = action;\n\n      // If no id is specified, remove all\n      if (toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n\n      // Remove by id\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== toastId),\n      };\n    }\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, \"id\">;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    });\n  \n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open: boolean) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  return {\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n    dismissAll: () => dispatch({ type: \"DISMISS_TOAST\" }),\n  };\n}\n\nexport { useToast, toast };","size_bytes":3512},"src/hooks/use-toast.tsx":{"content":"import React, { createContext, useContext, useReducer } from 'react';\n\nexport type ToastProps = {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: React.ReactNode;\n  variant?: 'default' | 'destructive';\n  dismiss?: () => void;\n};\n\ntype ToasterToast = ToastProps;\n\nfunction genId() {\n  return Math.random().toString(36).substring(2, 9);\n}\n\nconst actionTypes = {\n  ADD_TOAST: 'ADD_TOAST',\n  UPDATE_TOAST: 'UPDATE_TOAST',\n  DISMISS_TOAST: 'DISMISS_TOAST',\n  REMOVE_TOAST: 'REMOVE_TOAST',\n} as const;\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType['ADD_TOAST'];\n      toast: ToasterToast;\n    }\n  | {\n      type: ActionType['UPDATE_TOAST'];\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: ActionType['DISMISS_TOAST'];\n      toastId?: ToasterToast['id'];\n    }\n  | {\n      type: ActionType['REMOVE_TOAST'];\n      toastId?: ToasterToast['id'];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case actionTypes.ADD_TOAST:\n      return {\n        ...state,\n        toasts: [...state.toasts, action.toast],\n      };\n\n    case actionTypes.UPDATE_TOAST:\n      if (!action.toast.id) {\n        return state;\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      };\n\n    case actionTypes.DISMISS_TOAST:\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: state.toasts.map((t) => ({\n            ...t,\n            dismiss: true,\n          })),\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toastId ? { ...t, dismiss: true } : t\n        ),\n      };\n\n    case actionTypes.REMOVE_TOAST:\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, \"id\">;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: actionTypes.UPDATE_TOAST,\n      toast: { ...props, id },\n    });\n\n  const dismiss = () =>\n    dispatch({\n      type: actionTypes.DISMISS_TOAST,\n      toastId: id,\n    });\n\n  dispatch({\n    type: actionTypes.ADD_TOAST,\n    toast: {\n      ...props,\n      id,\n      dismiss,\n    },\n  });\n\n  return {\n    id,\n    dismiss,\n    update,\n  };\n}\n\nexport function useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) =>\n      dispatch({ type: actionTypes.DISMISS_TOAST, toastId }),\n  };\n}\n\ntype ToastContextType = ReturnType<typeof useToast>;\n\nexport const ToastContext = createContext<ToastContextType | null>(null);\n\nexport function ToastProvider({ children }: { children: React.ReactNode }) {\n  const toast = useToast();\n  return <ToastContext.Provider value={toast}>{children}</ToastContext.Provider>;\n}\n\nexport function useToastContext() {\n  const context = useContext(ToastContext);\n  if (!context) {\n    throw new Error('useToastContext must be used within a ToastProvider');\n  }\n  return context;\n}\n\nfunction ToastContainer({ toasts }: { toasts: ToasterToast[] }) {\n  return (\n    <div className=\"fixed top-0 right-0 z-50 flex flex-col p-4 space-y-4 w-full max-w-md\">\n      {toasts.map(function ({ id, title, description, action, variant, dismiss }) {\n        return (\n          <div\n            key={id}\n            className={`cyber-card cyber-${variant || 'default'} p-4 w-full flex flex-col space-y-2 pointer-events-auto animate-in slide-in-from-right-5 transition-all duration-300`}\n          >\n            <div className=\"flex justify-between items-start\">\n              <div className=\"flex-1\">\n                {title && <div className=\"font-medium text-sm\">{title}</div>}\n                {description && (\n                  <div className=\"text-sm text-gray-400 mt-1\">{description}</div>\n                )}\n              </div>\n              <button\n                onClick={() => dismiss && dismiss()}\n                className=\"text-gray-400 hover:text-white\"\n              >\n                &times;\n              </button>\n            </div>\n            {action && <div className=\"flex justify-end\">{action}</div>}\n          </div>\n        );\n      })}\n    </div>\n  );\n}","size_bytes":5061},"src/lib/protected-route.tsx":{"content":"import React from 'react';\nimport { Redirect, Route } from 'wouter';\nimport { Loader2 } from 'lucide-react';\nimport { useAuth } from '../hooks/use-auth';\n\ntype ProtectedRouteProps = {\n  path: string;\n  component: () => React.JSX.Element;\n};\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: ProtectedRouteProps) {\n  const { user, isLoading } = useAuth();\n\n  return (\n    <Route path={path}>\n      {isLoading ? (\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        </div>\n      ) : user ? (\n        <Component />\n      ) : (\n        <Redirect to=\"/auth\" />\n      )}\n    </Route>\n  );\n}","size_bytes":699},"src/lib/queryClient.ts":{"content":"import { QueryClient } from \"@tanstack/react-query\";\n\n/**\n * Utility function to check if a response is ok. Throws if not.\n */\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const errorText = await res.text();\n    throw new Error(errorText || `Request failed with status ${res.status}`);\n  }\n  return res;\n}\n\n/**\n * Utility function to make API requests.\n */\nexport async function apiRequest(\n  method: string,\n  url: string,\n  body?: any,\n  customHeaders?: HeadersInit\n) {\n  const headers: HeadersInit = {\n    \"Content-Type\": \"application/json\",\n    ...customHeaders,\n  };\n\n  const options: RequestInit = {\n    method,\n    headers,\n    credentials: \"include\",\n  };\n\n  if (body) {\n    options.body = JSON.stringify(body);\n  }\n\n  const res = await fetch(url, options);\n  return await throwIfResNotOk(res);\n}\n\n/**\n * Options to control behavior when a 401 response is received.\n */\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\n\n/**\n * Creates a query function with custom behavior for 401 responses.\n */\nexport const getQueryFn =\n  <T>({\n    on401 = \"throw\",\n  }: {\n    on401?: UnauthorizedBehavior;\n  }) =>\n  async ({ queryKey }: { queryKey: string[] }) => {\n    try {\n      const res = await fetch(queryKey[0], {\n        credentials: \"include\",\n      });\n\n      if (res.status === 401 && on401 === \"returnNull\") {\n        return null as unknown as T;\n      }\n\n      await throwIfResNotOk(res);\n      return (await res.json()) as T;\n    } catch (error) {\n      if (\n        error instanceof Error &&\n        error.message.includes(\"401\") &&\n        on401 === \"returnNull\"\n      ) {\n        return null as unknown as T;\n      }\n      throw error;\n    }\n  };\n\n/**\n * Configure and export the QueryClient instance.\n */\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchOnWindowFocus: false,\n      retry: false,\n      staleTime: 1000 * 60 * 5, // 5 minutes\n    },\n  },\n});","size_bytes":1939},"src/lib/utils.ts":{"content":"import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\n/**\n * Utility function to merge Tailwind CSS classes.\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}","size_bytes":227},"src/pages/auth-page.tsx":{"content":"import React, { useState } from 'react';\nimport { useLocation, Redirect } from 'wouter';\nimport { z } from 'zod';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Lock, Eye, EyeOff, User, Mail, Terminal, ShieldCheck } from 'lucide-react';\n\nimport { useAuth } from '../hooks/use-auth';\nimport { insertUserSchema } from '../../shared/schema';\nimport MatrixBackground from '../components/matrix-background';\n\n// Login form schema\nconst loginSchema = z.object({\n  username: z.string().min(3, 'Username must be at least 3 characters'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n});\n\n// Registration form schema with extended validation\nconst registerSchema = insertUserSchema\n  .extend({\n    password: z\n      .string()\n      .min(8, 'Password must be at least 8 characters')\n      .regex(/[A-Z]/, 'Password must contain at least one uppercase letter')\n      .regex(/[a-z]/, 'Password must contain at least one lowercase letter')\n      .regex(/[0-9]/, 'Password must contain at least one number'),\n    confirmPassword: z.string(),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: 'Passwords do not match',\n    path: ['confirmPassword'],\n  });\n\ntype LoginFormValues = z.infer<typeof loginSchema>;\ntype RegisterFormValues = z.infer<typeof registerSchema>;\n\nexport default function AuthPage() {\n  const [isLogin, setIsLogin] = useState(true);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [location] = useLocation();\n  const { user, loginMutation, registerMutation } = useAuth();\n\n  // Login form\n  const loginForm = useForm<LoginFormValues>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: '',\n      password: '',\n    },\n  });\n\n  // Registration form\n  const registerForm = useForm<RegisterFormValues>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n    },\n  });\n\n  const onLoginSubmit = (data: LoginFormValues) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegisterSubmit = (data: RegisterFormValues) => {\n    const { confirmPassword, ...registerData } = data;\n    registerMutation.mutate(registerData);\n  };\n\n  // If the user is already logged in, redirect to dashboard\n  if (user) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col relative\">\n      <MatrixBackground />\n      \n      {/* Header */}\n      <header className=\"relative z-10 flex items-center justify-between p-4 md:p-6\">\n        <div className=\"flex items-center space-x-2\">\n          <Terminal className=\"h-6 w-6 text-primary\" />\n          <span className=\"text-xl font-bold neon-text\">CyberHunt</span>\n        </div>\n      </header>\n      \n      <div className=\"flex-1 flex flex-col md:flex-row relative z-10\">\n        {/* Form Section */}\n        <div className=\"w-full md:w-1/2 p-4 md:p-8 flex items-center justify-center\">\n          <div className=\"cyber-card w-full max-w-md p-6 md:p-8 scanner\">\n            <div className=\"mb-8 flex justify-center\">\n              <h2 className=\"text-2xl md:text-3xl font-bold terminal-text\">\n                {isLogin ? 'Access Portal' : 'New Identity'}\n              </h2>\n            </div>\n            \n            {/* Login Form */}\n            {isLogin ? (\n              <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <div className=\"flex items-center mb-2\">\n                      <User className=\"h-4 w-4 mr-2 text-primary\" />\n                      <label htmlFor=\"login-username\" className=\"text-sm font-medium\">\n                        Username\n                      </label>\n                    </div>\n                    <div className=\"relative\">\n                      <input\n                        id=\"login-username\"\n                        type=\"text\"\n                        className=\"cyber-input\"\n                        placeholder=\"Enter your username\"\n                        {...loginForm.register('username')}\n                      />\n                    </div>\n                    {loginForm.formState.errors.username && (\n                      <p className=\"mt-1 text-sm text-red-500\">\n                        {loginForm.formState.errors.username.message}\n                      </p>\n                    )}\n                  </div>\n                  \n                  <div>\n                    <div className=\"flex items-center mb-2\">\n                      <Lock className=\"h-4 w-4 mr-2 text-primary\" />\n                      <label htmlFor=\"login-password\" className=\"text-sm font-medium\">\n                        Password\n                      </label>\n                    </div>\n                    <div className=\"relative\">\n                      <input\n                        id=\"login-password\"\n                        type={showPassword ? 'text' : 'password'}\n                        className=\"cyber-input pr-10\"\n                        placeholder=\"Enter your password\"\n                        {...loginForm.register('password')}\n                      />\n                      <button\n                        type=\"button\"\n                        className=\"absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-primary\"\n                        onClick={() => setShowPassword(!showPassword)}\n                      >\n                        {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </button>\n                    </div>\n                    {loginForm.formState.errors.password && (\n                      <p className=\"mt-1 text-sm text-red-500\">\n                        {loginForm.formState.errors.password.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n                \n                <button\n                  type=\"submit\"\n                  className=\"cyber-button w-full py-2 flex items-center justify-center\"\n                  disabled={loginMutation.isPending}\n                >\n                  {loginMutation.isPending ? (\n                    <div className=\"cyber-loading h-5 w-5 mr-2\" />\n                  ) : (\n                    <ShieldCheck className=\"mr-2 h-5 w-5\" />\n                  )}\n                  {loginMutation.isPending ? 'Authenticating...' : 'Access System'}\n                </button>\n                \n                <div className=\"text-center mt-4\">\n                  <button\n                    type=\"button\"\n                    className=\"text-sm text-primary hover:underline\"\n                    onClick={() => setIsLogin(false)}\n                  >\n                    Need an account? Register\n                  </button>\n                </div>\n              </form>\n            ) : (\n              <form onSubmit={registerForm.handleSubmit(onRegisterSubmit)} className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <div className=\"flex items-center mb-2\">\n                      <User className=\"h-4 w-4 mr-2 text-primary\" />\n                      <label htmlFor=\"register-username\" className=\"text-sm font-medium\">\n                        Username\n                      </label>\n                    </div>\n                    <input\n                      id=\"register-username\"\n                      type=\"text\"\n                      className=\"cyber-input\"\n                      placeholder=\"Choose a username\"\n                      {...registerForm.register('username')}\n                    />\n                    {registerForm.formState.errors.username && (\n                      <p className=\"mt-1 text-sm text-red-500\">\n                        {registerForm.formState.errors.username.message}\n                      </p>\n                    )}\n                  </div>\n                  \n                  <div>\n                    <div className=\"flex items-center mb-2\">\n                      <Mail className=\"h-4 w-4 mr-2 text-primary\" />\n                      <label htmlFor=\"register-email\" className=\"text-sm font-medium\">\n                        Email\n                      </label>\n                    </div>\n                    <input\n                      id=\"register-email\"\n                      type=\"email\"\n                      className=\"cyber-input\"\n                      placeholder=\"Enter your email\"\n                      {...registerForm.register('email')}\n                    />\n                    {registerForm.formState.errors.email && (\n                      <p className=\"mt-1 text-sm text-red-500\">\n                        {registerForm.formState.errors.email.message}\n                      </p>\n                    )}\n                  </div>\n                  \n                  <div>\n                    <div className=\"flex items-center mb-2\">\n                      <Lock className=\"h-4 w-4 mr-2 text-primary\" />\n                      <label htmlFor=\"register-password\" className=\"text-sm font-medium\">\n                        Password\n                      </label>\n                    </div>\n                    <div className=\"relative\">\n                      <input\n                        id=\"register-password\"\n                        type={showPassword ? 'text' : 'password'}\n                        className=\"cyber-input pr-10\"\n                        placeholder=\"Create a strong password\"\n                        {...registerForm.register('password')}\n                      />\n                      <button\n                        type=\"button\"\n                        className=\"absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-primary\"\n                        onClick={() => setShowPassword(!showPassword)}\n                      >\n                        {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </button>\n                    </div>\n                    {registerForm.formState.errors.password && (\n                      <p className=\"mt-1 text-sm text-red-500\">\n                        {registerForm.formState.errors.password.message}\n                      </p>\n                    )}\n                  </div>\n                  \n                  <div>\n                    <div className=\"flex items-center mb-2\">\n                      <Lock className=\"h-4 w-4 mr-2 text-primary\" />\n                      <label htmlFor=\"register-confirm-password\" className=\"text-sm font-medium\">\n                        Confirm Password\n                      </label>\n                    </div>\n                    <div className=\"relative\">\n                      <input\n                        id=\"register-confirm-password\"\n                        type={showConfirmPassword ? 'text' : 'password'}\n                        className=\"cyber-input pr-10\"\n                        placeholder=\"Confirm your password\"\n                        {...registerForm.register('confirmPassword')}\n                      />\n                      <button\n                        type=\"button\"\n                        className=\"absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-primary\"\n                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                      >\n                        {showConfirmPassword ? (\n                          <EyeOff className=\"h-4 w-4\" />\n                        ) : (\n                          <Eye className=\"h-4 w-4\" />\n                        )}\n                      </button>\n                    </div>\n                    {registerForm.formState.errors.confirmPassword && (\n                      <p className=\"mt-1 text-sm text-red-500\">\n                        {registerForm.formState.errors.confirmPassword.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n                \n                <button\n                  type=\"submit\"\n                  className=\"cyber-button w-full py-2 flex items-center justify-center\"\n                  disabled={registerMutation.isPending}\n                >\n                  {registerMutation.isPending ? (\n                    <div className=\"cyber-loading h-5 w-5 mr-2\" />\n                  ) : (\n                    <ShieldCheck className=\"mr-2 h-5 w-5\" />\n                  )}\n                  {registerMutation.isPending ? 'Creating Identity...' : 'Create Identity'}\n                </button>\n                \n                <div className=\"text-center mt-4\">\n                  <button\n                    type=\"button\"\n                    className=\"text-sm text-primary hover:underline\"\n                    onClick={() => setIsLogin(true)}\n                  >\n                    Already have an account? Login\n                  </button>\n                </div>\n              </form>\n            )}\n          </div>\n        </div>\n        \n        {/* Hero Section */}\n        <div className=\"w-full md:w-1/2 bg-black/40 p-6 md:p-12 flex items-center relative overflow-hidden\">\n          <div className=\"relative z-10 max-w-lg mx-auto\">\n            <h1 className=\"glitch text-3xl md:text-4xl lg:text-5xl font-bold mb-6\" data-text=\"Join CyberHunt\">\n              Join CyberHunt\n            </h1>\n            <div className=\"mb-8\">\n              <p className=\"text-lg mb-4 terminal-text typing-text\">\n                Enter the world of ethical hacking\n              </p>\n              <p className=\"text-gray-300 mb-3\">\n                Find vulnerabilities in real applications and earn rewards for your skills. \n                Join our community of security researchers making the digital world safer.\n              </p>\n              <p className=\"text-gray-300\">\n                Whether you're a seasoned security professional or just starting out, \n                CyberHunt offers a platform to showcase your talents and build your reputation.\n              </p>\n            </div>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-start\">\n                <div className=\"h-8 w-8 rounded-full bg-black border border-primary flex items-center justify-center mr-3 mt-1 neon-border\">\n                  <ShieldCheck className=\"h-4 w-4 text-primary\" />\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold neon-text\">Secure Platform</h3>\n                  <p className=\"text-gray-300\">End-to-end encrypted communications and secure submission handling</p>\n                </div>\n              </div>\n              <div className=\"flex items-start\">\n                <div className=\"h-8 w-8 rounded-full bg-black border border-primary flex items-center justify-center mr-3 mt-1 neon-border\">\n                  <Terminal className=\"h-4 w-4 text-primary\" />\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold neon-text\">Active Programs</h3>\n                  <p className=\"text-gray-300\">Access to a diverse range of bug bounty programs with competitive rewards</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15382},"src/pages/dashboard-page.tsx":{"content":"import React, { useState } from 'react';\nimport { Link } from 'wouter';\nimport { Terminal, Shield, Award, ArrowRight, Code, LogOut, User, Activity, FileCode, Search, Menu, X } from 'lucide-react';\nimport { useAuth } from '../hooks/use-auth';\nimport MatrixBackground from '../components/matrix-background';\n\ntype DashboardTab = 'overview' | 'programs' | 'submissions' | 'activity';\n\nexport default function DashboardPage() {\n  const [activeTab, setActiveTab] = useState<DashboardTab>('overview');\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const { user, logoutMutation } = useAuth();\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col relative\">\n      <MatrixBackground />\n      \n      {/* Header */}\n      <header className=\"relative z-10 border-b border-gray-800 bg-black/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex h-16 items-center justify-between\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0 flex items-center\">\n                <Terminal className=\"h-6 w-6 text-primary mr-2\" />\n                <span className=\"text-xl font-bold neon-text\">CyberHunt</span>\n              </div>\n              \n              {/* Desktop Navigation */}\n              <nav className=\"hidden md:ml-8 md:flex md:space-x-8\">\n                <Link href=\"/dashboard\">\n                  <a className={`px-3 py-2 text-sm font-medium rounded-md ${\n                    activeTab === 'overview' ? 'text-primary bg-black/30 neon-border' : 'text-gray-300 hover:text-white'\n                  }`}>\n                    Overview\n                  </a>\n                </Link>\n                <Link href=\"/programs\">\n                  <a className=\"px-3 py-2 text-sm font-medium rounded-md text-gray-300 hover:text-white\">\n                    Programs\n                  </a>\n                </Link>\n                <Link href=\"/dashboard?tab=submissions\">\n                  <a className={`px-3 py-2 text-sm font-medium rounded-md ${\n                    activeTab === 'submissions' ? 'text-primary bg-black/30 neon-border' : 'text-gray-300 hover:text-white'\n                  }`}>\n                    My Submissions\n                  </a>\n                </Link>\n                <Link href=\"/dashboard?tab=activity\">\n                  <a className={`px-3 py-2 text-sm font-medium rounded-md ${\n                    activeTab === 'activity' ? 'text-primary bg-black/30 neon-border' : 'text-gray-300 hover:text-white'\n                  }`}>\n                    Activity\n                  </a>\n                </Link>\n              </nav>\n            </div>\n            \n            <div className=\"hidden md:flex items-center\">\n              <button \n                onClick={handleLogout}\n                className=\"cyber-button ml-4 px-3 py-1 text-sm flex items-center\"\n              >\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                Logout\n              </button>\n            </div>\n            \n            {/* Mobile menu button */}\n            <div className=\"flex md:hidden\">\n              <button\n                type=\"button\"\n                className=\"inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-white hover:bg-gray-800\"\n                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n              >\n                <span className=\"sr-only\">Open main menu</span>\n                {mobileMenuOpen ? (\n                  <X className=\"block h-6 w-6\" aria-hidden=\"true\" />\n                ) : (\n                  <Menu className=\"block h-6 w-6\" aria-hidden=\"true\" />\n                )}\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n      \n      {/* Mobile menu */}\n      {mobileMenuOpen && (\n        <div className=\"md:hidden relative z-10 bg-black/90 backdrop-blur-sm\">\n          <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3\">\n            <Link href=\"/dashboard\">\n              <a className={`block px-3 py-2 rounded-md text-base font-medium ${\n                activeTab === 'overview' ? 'text-primary bg-black neon-border' : 'text-gray-300 hover:text-white'\n              }`}>\n                Overview\n              </a>\n            </Link>\n            <Link href=\"/programs\">\n              <a className=\"block px-3 py-2 rounded-md text-base font-medium text-gray-300 hover:text-white\">\n                Programs\n              </a>\n            </Link>\n            <Link href=\"/dashboard?tab=submissions\">\n              <a className={`block px-3 py-2 rounded-md text-base font-medium ${\n                activeTab === 'submissions' ? 'text-primary bg-black neon-border' : 'text-gray-300 hover:text-white'\n              }`}>\n                My Submissions\n              </a>\n            </Link>\n            <Link href=\"/dashboard?tab=activity\">\n              <a className={`block px-3 py-2 rounded-md text-base font-medium ${\n                activeTab === 'activity' ? 'text-primary bg-black neon-border' : 'text-gray-300 hover:text-white'\n              }`}>\n                Activity\n              </a>\n            </Link>\n            <button \n              onClick={handleLogout}\n              className=\"w-full text-left block px-3 py-2 rounded-md text-base font-medium text-gray-300 hover:text-white\"\n            >\n              Logout\n            </button>\n          </div>\n        </div>\n      )}\n      \n      {/* Main content */}\n      <main className=\"flex-1 relative z-10\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          {/* Welcome section */}\n          <div className=\"mb-8 cyber-card p-6 scanner\">\n            <div className=\"mb-4 flex items-center justify-between\">\n              <h1 className=\"text-2xl md:text-3xl font-bold terminal-text\">\n                Welcome, {user?.username || 'Hacker'}\n              </h1>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"h-10 w-10 rounded-full bg-black flex items-center justify-center border border-primary neon-border\">\n                  <User className=\"h-5 w-5 text-primary\" />\n                </div>\n                <div>\n                  <div className=\"text-sm font-medium\">{user?.username || 'Hacker'}</div>\n                  <div className=\"text-xs text-gray-400\">Reputation: {user?.reputation || 0}</div>\n                </div>\n              </div>\n            </div>\n            <p className=\"text-gray-300\">\n              Ready to hunt for vulnerabilities? Browse the active programs and start hacking today!\n            </p>\n          </div>\n          \n          {/* Dashboard sections */}\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {/* Active Programs */}\n            <div className=\"cyber-card p-6\">\n              <h2 className=\"text-lg font-bold mb-4 terminal-text flex items-center\">\n                <FileCode className=\"h-5 w-5 mr-2\" />\n                Active Programs\n              </h2>\n              <p className=\"text-gray-300 mb-4\">\n                These programs are accepting new vulnerability reports.\n              </p>\n              <Link href=\"/programs\">\n                <a className=\"cyber-button w-full justify-center\">\n                  View All Programs\n                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n                </a>\n              </Link>\n            </div>\n            \n            {/* My Submissions */}\n            <div className=\"cyber-card p-6\">\n              <h2 className=\"text-lg font-bold mb-4 terminal-text flex items-center\">\n                <Shield className=\"h-5 w-5 mr-2\" />\n                My Submissions\n              </h2>\n              <p className=\"text-gray-300 mb-4\">\n                Track the status of your submitted vulnerabilities.\n              </p>\n              <Link href=\"/dashboard?tab=submissions\">\n                <a className=\"cyber-button w-full justify-center\">\n                  View My Submissions\n                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n                </a>\n              </Link>\n            </div>\n            \n            {/* Activity Feed */}\n            <div className=\"cyber-card p-6\">\n              <h2 className=\"text-lg font-bold mb-4 terminal-text flex items-center\">\n                <Activity className=\"h-5 w-5 mr-2\" />\n                Recent Activity\n              </h2>\n              <p className=\"text-gray-300 mb-4\">\n                Stay updated with your latest activities and notifications.\n              </p>\n              <Link href=\"/dashboard?tab=activity\">\n                <a className=\"cyber-button w-full justify-center\">\n                  View Activity Feed\n                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n                </a>\n              </Link>\n            </div>\n          </div>\n          \n          {/* Quick Actions */}\n          <div className=\"mt-8\">\n            <h2 className=\"text-xl font-bold mb-4 neon-text\">Quick Actions</h2>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <Link href=\"/programs\">\n                <a className=\"cyber-card p-4 text-center hover:neon-border transition-all duration-200\">\n                  <Search className=\"h-6 w-6 mx-auto mb-2 text-primary\" />\n                  <span className=\"text-sm\">Find Programs</span>\n                </a>\n              </Link>\n              <Link href=\"/submit-bug\">\n                <a className=\"cyber-card p-4 text-center hover:neon-border transition-all duration-200\">\n                  <Code className=\"h-6 w-6 mx-auto mb-2 text-primary\" />\n                  <span className=\"text-sm\">Submit Bug</span>\n                </a>\n              </Link>\n              <Link href=\"/dashboard?tab=submissions\">\n                <a className=\"cyber-card p-4 text-center hover:neon-border transition-all duration-200\">\n                  <Shield className=\"h-6 w-6 mx-auto mb-2 text-primary\" />\n                  <span className=\"text-sm\">My Reports</span>\n                </a>\n              </Link>\n              <Link href=\"/dashboard?tab=activity\">\n                <a className=\"cyber-card p-4 text-center hover:neon-border transition-all duration-200\">\n                  <Award className=\"h-6 w-6 mx-auto mb-2 text-primary\" />\n                  <span className=\"text-sm\">Reputation</span>\n                </a>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </main>\n      \n      {/* Footer */}\n      <footer className=\"relative z-10 border-t border-gray-800 bg-black/50 py-6 px-4 md:px-6\">\n        <div className=\"max-w-7xl mx-auto flex flex-col md:flex-row justify-between items-center\">\n          <div className=\"flex items-center mb-4 md:mb-0\">\n            <Terminal className=\"h-5 w-5 text-primary mr-2\" />\n            <span className=\"text-lg font-bold terminal-text\">CyberHunt</span>\n          </div>\n          <div className=\"text-sm text-gray-400\">\n            &copy; {new Date().getFullYear()} CyberHunt. All rights reserved.\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":11125},"src/pages/landing-page.tsx":{"content":"import React from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Shield, Terminal, Cpu, Zap, ArrowRight, Github, User, LockKeyhole } from 'lucide-react';\nimport MatrixBackground from '../components/matrix-background';\n\nexport default function LandingPage() {\n  const [location, setLocation] = useLocation();\n  \n  return (\n    <div className=\"min-h-screen flex flex-col bg-black\">\n      <MatrixBackground />\n      \n      {/* Header/Navbar */}\n      <header className=\"relative z-10 border-b border-gray-800 bg-black/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex h-16 items-center justify-between\">\n            <div className=\"flex-shrink-0 flex items-center\">\n              <Terminal className=\"h-6 w-6 text-primary mr-2\" />\n              <span className=\"text-xl font-bold neon-text\">CyberHunt</span>\n            </div>\n            \n            <nav className=\"hidden md:flex space-x-8\">\n              <a href=\"#features\" className=\"text-gray-300 hover:text-primary px-3 py-2 text-sm font-medium\">\n                Features\n              </a>\n              <a href=\"#how-it-works\" className=\"text-gray-300 hover:text-primary px-3 py-2 text-sm font-medium\">\n                How It Works\n              </a>\n              <a href=\"#rewards\" className=\"text-gray-300 hover:text-primary px-3 py-2 text-sm font-medium\">\n                Rewards\n              </a>\n            </nav>\n            \n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/auth\">\n                <a className=\"cyber-button flex items-center\">\n                  <LockKeyhole className=\"h-4 w-4 mr-2\" />\n                  <span>Enter Platform</span>\n                </a>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </header>\n      \n      {/* Hero section */}\n      <section className=\"relative z-10 flex-1 flex items-center\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16 md:py-24\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h1 className=\"text-4xl md:text-5xl lg:text-6xl font-extrabold mb-6 glitch\" data-text=\"CYBERHUNT\">\n                CYBERHUNT\n              </h1>\n              <h2 className=\"text-xl md:text-2xl text-gray-300 mb-8 terminal-text typing-text\">\n                Secure the digital frontier. Earn rewards.\n              </h2>\n              <p className=\"text-gray-400 mb-8\">\n                Join our elite network of ethical hackers to discover vulnerabilities, \n                strengthen cybersecurity defenses, and earn competitive rewards for \n                your findings.\n              </p>\n              \n              <div className=\"flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4\">\n                <Link href=\"/auth\">\n                  <a className=\"cyber-button flex items-center justify-center\">\n                    <User className=\"h-4 w-4 mr-2\" />\n                    <span>Join as Researcher</span>\n                  </a>\n                </Link>\n                <Link href=\"/auth\">\n                  <a className=\"cyber-button-outline flex items-center justify-center\">\n                    <Shield className=\"h-4 w-4 mr-2\" />\n                    <span>Create Security Program</span>\n                  </a>\n                </Link>\n              </div>\n            </div>\n            \n            <div className=\"cyber-card scanner p-2 order-first md:order-last\">\n              <div className=\"cyber-terminal text-sm h-64 overflow-y-auto\">\n                <div className=\"typing-text-1\">\n                  <span className=\"text-primary\">$</span> initializing secure connection...\n                </div>\n                <div className=\"typing-text-2\">\n                  <span className=\"text-green-400\">Connection established</span>\n                </div>\n                <div className=\"typing-text-3\">\n                  <span className=\"text-primary\">$</span> scanning for active programs...\n                </div>\n                <div className=\"typing-text-4\">\n                  <span className=\"text-primary\">$</span> found: 142 active vulnerability programs\n                </div>\n                <div className=\"typing-text-5\">\n                  <span className=\"text-primary\">$</span> current payouts: $50 - $25,000 per finding\n                </div>\n                <div className=\"typing-text-6\">\n                  <span className=\"text-primary\">$</span> accessing CyberHunt platform...\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      \n      {/* Features section */}\n      <section id=\"features\" className=\"relative z-10 bg-black/80 py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-2xl md:text-3xl font-bold neon-text mb-4\">PLATFORM FEATURES</h2>\n            <p className=\"text-gray-400 max-w-2xl mx-auto\">\n              Our cutting-edge platform offers powerful tools for both hackers and program owners.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"cyber-card p-6 scanner fade-in\">\n              <div className=\"flex items-center mb-4\">\n                <Cpu className=\"h-8 w-8 text-primary mr-3\" />\n                <h3 className=\"text-xl font-bold\">Advanced Security Testing</h3>\n              </div>\n              <p className=\"text-gray-400\">\n                Access specialized tools and methodologies to uncover critical vulnerabilities in applications, networks, and systems.\n              </p>\n            </div>\n            \n            <div className=\"cyber-card p-6 scanner fade-in\">\n              <div className=\"flex items-center mb-4\">\n                <Zap className=\"h-8 w-8 text-primary mr-3\" />\n                <h3 className=\"text-xl font-bold\">Real-time Reporting</h3>\n              </div>\n              <p className=\"text-gray-400\">\n                Submit and track vulnerability reports with comprehensive details, evidence, and impact assessments in real-time.\n              </p>\n            </div>\n            \n            <div className=\"cyber-card p-6 scanner fade-in\">\n              <div className=\"flex items-center mb-4\">\n                <Shield className=\"h-8 w-8 text-primary mr-3\" />\n                <h3 className=\"text-xl font-bold\">Secure Collaboration</h3>\n              </div>\n              <p className=\"text-gray-400\">\n                Collaborate securely with program owners through encrypted channels to verify findings and implement fixes.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n      \n      {/* How it works section */}\n      <section id=\"how-it-works\" className=\"relative z-10 py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-2xl md:text-3xl font-bold neon-text mb-4\">HOW IT WORKS</h2>\n            <p className=\"text-gray-400 max-w-2xl mx-auto\">\n              Start finding vulnerabilities and earning rewards in just a few simple steps.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <div className=\"cyber-card p-6 scanner relative\">\n              <div className=\"absolute -top-3 -left-3 w-8 h-8 bg-black border border-primary rounded-full flex items-center justify-center text-primary font-bold\">1</div>\n              <h3 className=\"text-lg font-bold mb-3 mt-2\">Create an Account</h3>\n              <p className=\"text-gray-400 text-sm\">\n                Sign up and complete your hacker profile with your skills and expertise.\n              </p>\n            </div>\n            \n            <div className=\"cyber-card p-6 scanner relative\">\n              <div className=\"absolute -top-3 -left-3 w-8 h-8 bg-black border border-primary rounded-full flex items-center justify-center text-primary font-bold\">2</div>\n              <h3 className=\"text-lg font-bold mb-3 mt-2\">Explore Programs</h3>\n              <p className=\"text-gray-400 text-sm\">\n                Browse available security programs and their scope, rewards, and requirements.\n              </p>\n            </div>\n            \n            <div className=\"cyber-card p-6 scanner relative\">\n              <div className=\"absolute -top-3 -left-3 w-8 h-8 bg-black border border-primary rounded-full flex items-center justify-center text-primary font-bold\">3</div>\n              <h3 className=\"text-lg font-bold mb-3 mt-2\">Submit Findings</h3>\n              <p className=\"text-gray-400 text-sm\">\n                Document and report discovered vulnerabilities with detailed proof of concept.\n              </p>\n            </div>\n            \n            <div className=\"cyber-card p-6 scanner relative\">\n              <div className=\"absolute -top-3 -left-3 w-8 h-8 bg-black border border-primary rounded-full flex items-center justify-center text-primary font-bold\">4</div>\n              <h3 className=\"text-lg font-bold mb-3 mt-2\">Get Rewarded</h3>\n              <p className=\"text-gray-400 text-sm\">\n                Receive bounties for valid findings based on severity and impact.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n      \n      {/* Rewards section */}\n      <section id=\"rewards\" className=\"relative z-10 bg-black/80 py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-2xl md:text-3xl font-bold neon-text mb-4\">BOUNTY REWARDS</h2>\n            <p className=\"text-gray-400 max-w-2xl mx-auto\">\n              Our programs offer competitive rewards based on vulnerability severity.\n            </p>\n          </div>\n          \n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full cyber-card\">\n              <thead>\n                <tr className=\"border-b border-gray-800\">\n                  <th className=\"py-3 px-4 text-left\">Severity</th>\n                  <th className=\"py-3 px-4 text-left\">Description</th>\n                  <th className=\"py-3 px-4 text-right\">Typical Reward</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr className=\"border-b border-gray-800\">\n                  <td className=\"py-3 px-4\">\n                    <span className=\"flex items-center\">\n                      <span className=\"h-2 w-2 bg-red-500 rounded-full mr-2\"></span>\n                      Critical\n                    </span>\n                  </td>\n                  <td className=\"py-3 px-4 text-gray-300\">Remote code execution, data breaches</td>\n                  <td className=\"py-3 px-4 text-right neon-text\">$10,000 - $25,000</td>\n                </tr>\n                <tr className=\"border-b border-gray-800\">\n                  <td className=\"py-3 px-4\">\n                    <span className=\"flex items-center\">\n                      <span className=\"h-2 w-2 bg-orange-500 rounded-full mr-2\"></span>\n                      High\n                    </span>\n                  </td>\n                  <td className=\"py-3 px-4 text-gray-300\">Authentication bypass, significant logic flaws</td>\n                  <td className=\"py-3 px-4 text-right neon-text\">$3,000 - $10,000</td>\n                </tr>\n                <tr className=\"border-b border-gray-800\">\n                  <td className=\"py-3 px-4\">\n                    <span className=\"flex items-center\">\n                      <span className=\"h-2 w-2 bg-yellow-500 rounded-full mr-2\"></span>\n                      Medium\n                    </span>\n                  </td>\n                  <td className=\"py-3 px-4 text-gray-300\">Sensitive data exposure, XSS, CSRF</td>\n                  <td className=\"py-3 px-4 text-right neon-text\">$500 - $3,000</td>\n                </tr>\n                <tr>\n                  <td className=\"py-3 px-4\">\n                    <span className=\"flex items-center\">\n                      <span className=\"h-2 w-2 bg-blue-500 rounded-full mr-2\"></span>\n                      Low\n                    </span>\n                  </td>\n                  <td className=\"py-3 px-4 text-gray-300\">Minor configuration issues, best practice violations</td>\n                  <td className=\"py-3 px-4 text-right neon-text\">$50 - $500</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </section>\n      \n      {/* CTA section */}\n      <section className=\"relative z-10 py-16\">\n        <div className=\"max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-2xl md:text-3xl font-bold mb-6\">Ready to join the elite ranks of CyberHunt?</h2>\n          <p className=\"text-gray-400 mb-8\">\n            Create your account today and start hunting for vulnerabilities or launch your own security program.\n          </p>\n          <Link href=\"/auth\">\n            <a className=\"cyber-button inline-flex items-center justify-center text-lg px-8 py-3\">\n              <span>Join Now</span>\n              <ArrowRight className=\"h-5 w-5 ml-2\" />\n            </a>\n          </Link>\n        </div>\n      </section>\n      \n      {/* Footer */}\n      <footer className=\"relative z-10 border-t border-gray-800 bg-black/50 py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center mb-4\">\n                <Terminal className=\"h-6 w-6 text-primary mr-2\" />\n                <span className=\"text-xl font-bold neon-text\">CyberHunt</span>\n              </div>\n              <p className=\"text-gray-400 text-sm\">\n                The premier platform for ethical hackers and security-conscious organizations.\n              </p>\n              <div className=\"flex mt-4 space-x-4\">\n                <a href=\"#\" className=\"text-gray-400 hover:text-primary\">\n                  <Github className=\"h-5 w-5\" />\n                </a>\n                <a href=\"#\" className=\"text-gray-400 hover:text-primary\">\n                  <Terminal className=\"h-5 w-5\" />\n                </a>\n              </div>\n            </div>\n            \n            <div>\n              <h3 className=\"text-lg font-bold mb-4\">Platform</h3>\n              <ul className=\"space-y-2 text-sm\">\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-primary\">How It Works</a></li>\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-primary\">Programs</a></li>\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-primary\">Leaderboard</a></li>\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-primary\">Rewards</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"text-lg font-bold mb-4\">Resources</h3>\n              <ul className=\"space-y-2 text-sm\">\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-primary\">Documentation</a></li>\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-primary\">API Reference</a></li>\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-primary\">Blog</a></li>\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-primary\">Community</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"text-lg font-bold mb-4\">Company</h3>\n              <ul className=\"space-y-2 text-sm\">\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-primary\">About Us</a></li>\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-primary\">Careers</a></li>\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-primary\">Contact</a></li>\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-primary\">Legal</a></li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"mt-12 pt-8 border-t border-gray-800 text-center\">\n            <p className=\"text-gray-400 text-sm\">\n              &copy; {new Date().getFullYear()} CyberHunt. All rights reserved. \n              <br className=\"md:hidden\" /> Securing the digital frontier, one vulnerability at a time.\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":16476},"src/pages/not-found.tsx":{"content":"import React from 'react';\nimport { useLocation, Link } from 'wouter';\nimport { Home, Terminal, RefreshCw } from 'lucide-react';\nimport MatrixBackground from '../components/matrix-background';\n\nexport default function NotFound() {\n  const [location] = useLocation();\n\n  return (\n    <div className=\"min-h-screen flex flex-col relative\">\n      <MatrixBackground />\n      \n      {/* Header */}\n      <header className=\"relative z-10 border-b border-gray-800 bg-black/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex h-16 items-center justify-between\">\n            <div className=\"flex-shrink-0 flex items-center\">\n              <Terminal className=\"h-6 w-6 text-primary mr-2\" />\n              <span className=\"text-xl font-bold neon-text\">CyberHunt</span>\n            </div>\n          </div>\n        </div>\n      </header>\n      \n      {/* Main content */}\n      <main className=\"flex-1 flex items-center justify-center relative z-10 p-4\">\n        <div className=\"max-w-md w-full\">\n          <div className=\"cyber-card p-8 scanner text-center\">\n            <h1 className=\"glitch text-6xl font-bold mb-4\" data-text=\"404\">\n              404\n            </h1>\n            <div className=\"mb-8\">\n              <p className=\"text-xl font-bold mb-2 terminal-text\">\n                // SYSTEM BREACH DETECTED\n              </p>\n              <p className=\"text-gray-300 mb-4\">\n                The resource at <span className=\"text-primary font-mono\">{location}</span> could not be found.\n              </p>\n              <div className=\"cyber-terminal text-sm text-left mb-4 py-2 px-3\">\n                <p className=\"typing-text-1\">\n                  <span className=\"text-primary\">$</span> scan_directory -r {location}\n                </p>\n                <p className=\"typing-text-2 text-red-500\">\n                  Error: Path not found in the system.\n                </p>\n                <p className=\"typing-text-3\">\n                  <span className=\"text-primary\">$</span> suggest_alternatives\n                </p>\n                <p className=\"typing-text-4\">\n                  Recommended paths:\n                </p>\n                <p className=\"typing-text-5\">\n                  <span className=\"text-green-400\">- /</span> (home)\n                </p>\n                <p className=\"typing-text-6\">\n                  <span className=\"text-green-400\">- /dashboard</span> (secure area)\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex flex-col md:flex-row space-y-3 md:space-y-0 md:space-x-3\">\n              <Link href=\"/\">\n                <a className=\"cyber-button py-2 flex items-center justify-center\">\n                  <Home className=\"h-4 w-4 mr-2\" />\n                  Return Home\n                </a>\n              </Link>\n              <button \n                onClick={() => window.history.back()}\n                className=\"cyber-button-outline py-2 flex items-center justify-center\"\n              >\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                Go Back\n              </button>\n            </div>\n            \n            <div className=\"mt-8 text-xs text-gray-400\">\n              Error Code: 0x8007001F • Timestamp: {new Date().toISOString()}\n            </div>\n          </div>\n        </div>\n      </main>\n      \n      {/* Footer */}\n      <footer className=\"relative z-10 border-t border-gray-800 bg-black/50 py-4 px-4\">\n        <div className=\"max-w-7xl mx-auto flex flex-col md:flex-row justify-between items-center\">\n          <div className=\"flex items-center mb-4 md:mb-0\">\n            <Terminal className=\"h-5 w-5 text-primary mr-2\" />\n            <span className=\"text-lg font-bold terminal-text\">CyberHunt</span>\n          </div>\n          <div className=\"text-sm text-gray-400\">\n            &copy; {new Date().getFullYear()} CyberHunt. All rights reserved.\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":3981},"src/pages/programs-page.tsx":{"content":"import { useAuth } from \"../hooks/use-auth\";\nimport { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport MatrixBackground from \"../components/matrix-background\";\n\nexport default function ProgramsPage() {\n  const { user, logoutMutation } = useAuth();\n\n  // Mock data for demonstrations\n  const { data: programs } = useQuery({\n    queryKey: [\"/api/programs\"],\n    queryFn: () => Promise.resolve([\n      { \n        id: 1, \n        name: \"SecureBank Web App\", \n        description: \"Find vulnerabilities in our banking web application.\",\n        company: \"SecureBank Inc.\",\n        minReward: 100,\n        maxReward: 5000,\n        isActive: true\n      },\n      { \n        id: 2, \n        name: \"CloudStore API\", \n        description: \"Security testing for our cloud storage API endpoints.\",\n        company: \"CloudStore Technologies\",\n        minReward: 250,\n        maxReward: 10000,\n        isActive: true\n      },\n      { \n        id: 3, \n        name: \"HealthTrack Mobile App\", \n        description: \"Security assessment of our health tracking mobile application.\",\n        company: \"HealthTrack Systems\",\n        minReward: 150,\n        maxReward: 3000,\n        isActive: true\n      },\n    ]),\n    enabled: !!user,\n  });\n\n  return (\n    <div className=\"min-h-screen bg-black text-green-500 relative\">\n      <MatrixBackground />\n      \n      {/* Navbar */}\n      <nav className=\"bg-black/90 border-b border-green-800 p-4 sticky top-0 z-20\">\n        <div className=\"container mx-auto flex justify-between items-center\">\n          <Link href=\"/\">\n            <a className=\"text-2xl font-bold cyber-text\">CyberHunt</a>\n          </Link>\n          \n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/dashboard\">\n              <a className=\"hover:text-green-400 transition-colors duration-200 font-mono\">Dashboard</a>\n            </Link>\n            <Link href=\"/programs\">\n              <a className=\"text-green-400 border-b border-green-400 pb-1 font-mono\">Programs</a>\n            </Link>\n            <Link href=\"/submit\">\n              <a className=\"hover:text-green-400 transition-colors duration-200 font-mono\">Submit Bug</a>\n            </Link>\n            \n            <div className=\"relative group\">\n              <button className=\"flex items-center space-x-1 hover:text-green-400 transition-colors duration-200 font-mono\">\n                <span>{user?.username}</span>\n                <span>▼</span>\n              </button>\n              \n              <div className=\"absolute right-0 mt-2 w-48 bg-black border border-green-700 rounded shadow-lg py-1 hidden group-hover:block\">\n                <button\n                  onClick={() => logoutMutation.mutate()}\n                  className=\"block w-full text-left px-4 py-2 hover:bg-green-900/30 transition-colors duration-200 font-mono\"\n                >\n                  Logout\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n      \n      {/* Main Content */}\n      <main className=\"container mx-auto p-6 relative z-10\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2 cyber-text\">Bug Bounty Programs</h1>\n          <p className=\"font-mono\">Explore available bug bounty programs and start hunting vulnerabilities.</p>\n        </div>\n        \n        {/* Search & Filter */}\n        <div className=\"cyber-container p-4 mb-8\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-grow\">\n              <input\n                type=\"text\"\n                placeholder=\"Search programs...\"\n                className=\"w-full p-2 bg-black border border-green-700 focus:border-green-500 rounded outline-none font-mono\"\n              />\n            </div>\n            \n            <div className=\"md:w-48\">\n              <select className=\"w-full p-2 bg-black border border-green-700 focus:border-green-500 rounded outline-none font-mono\">\n                <option value=\"\">All Rewards</option>\n                <option value=\"low\">$100 - $500</option>\n                <option value=\"medium\">$500 - $2000</option>\n                <option value=\"high\">$2000+</option>\n              </select>\n            </div>\n            \n            <div className=\"md:w-48\">\n              <select className=\"w-full p-2 bg-black border border-green-700 focus:border-green-500 rounded outline-none font-mono\">\n                <option value=\"\">All Programs</option>\n                <option value=\"web\">Web Applications</option>\n                <option value=\"mobile\">Mobile Apps</option>\n                <option value=\"api\">APIs & Services</option>\n              </select>\n            </div>\n          </div>\n        </div>\n        \n        {/* Programs List */}\n        {programs && programs.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {programs.map((program) => (\n              <div key={program.id} className=\"cyber-container hover:shadow-lg hover:shadow-green-900/20 transition-shadow duration-300\">\n                <div className=\"p-6\">\n                  <div className=\"flex justify-between items-start mb-4\">\n                    <h2 className=\"text-xl font-bold cyber-text\">{program.name}</h2>\n                    {program.isActive && (\n                      <span className=\"text-xs px-2 py-1 rounded-full bg-green-900/50 text-green-400\">\n                        Active\n                      </span>\n                    )}\n                  </div>\n                  \n                  <p className=\"text-sm mb-4 font-mono\">{program.description}</p>\n                  \n                  <div className=\"text-sm mb-4 font-mono text-green-700\">\n                    <span>{program.company}</span>\n                  </div>\n                  \n                  <div className=\"mb-6\">\n                    <div className=\"flex justify-between text-sm font-mono\">\n                      <span>Reward Range:</span>\n                      <span className=\"text-green-400\">\n                        ${program.minReward} - ${program.maxReward}\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <Link href={`/programs/${program.id}`}>\n                    <a className=\"block w-full text-center py-2 bg-green-600 hover:bg-green-700 text-black font-bold rounded transition-colors duration-300\">\n                      View Details\n                    </a>\n                  </Link>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"cyber-container p-8 text-center\">\n            <p className=\"font-mono mb-4\">No programs found matching your criteria.</p>\n            <button className=\"px-4 py-2 bg-green-900/30 hover:bg-green-900/50 border border-green-700 rounded transition-colors duration-300 font-mono\">\n              Reset Filters\n            </button>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}","size_bytes":7029},"src/pages/submit-bug-page.tsx":{"content":"import { useAuth } from \"../hooks/use-auth\";\nimport { Link } from \"wouter\";\nimport { z } from \"zod\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"../lib/queryClient\";\nimport MatrixBackground from \"../components/matrix-background\";\n\n// Form validation schema\nconst submitBugSchema = z.object({\n  programId: z.string().min(1, \"Please select a program\"),\n  title: z.string().min(5, \"Title must be at least 5 characters\"),\n  description: z.string().min(20, \"Description must be at least 20 characters\"),\n  severity: z.string().min(1, \"Please select a severity level\"),\n  stepsToReproduce: z.string().min(20, \"Steps to reproduce must be at least 20 characters\"),\n  impact: z.string().min(20, \"Impact must be at least 20 characters\"),\n});\n\ntype SubmitBugFormValues = z.infer<typeof submitBugSchema>;\n\nexport default function SubmitBugPage() {\n  const { user, logoutMutation } = useAuth();\n\n  // Mock data for programs\n  const { data: programs } = useQuery({\n    queryKey: [\"/api/programs\"],\n    queryFn: () => Promise.resolve([\n      { id: \"1\", name: \"SecureBank Web App\" },\n      { id: \"2\", name: \"CloudStore API\" },\n      { id: \"3\", name: \"HealthTrack Mobile App\" },\n    ]),\n    enabled: !!user,\n  });\n\n  // Form setup\n  const form = useForm<SubmitBugFormValues>({\n    resolver: zodResolver(submitBugSchema),\n    defaultValues: {\n      programId: \"\",\n      title: \"\",\n      description: \"\",\n      severity: \"\",\n      stepsToReproduce: \"\",\n      impact: \"\",\n    },\n  });\n\n  // Submit bug mutation\n  const submitBugMutation = useMutation({\n    mutationFn: async (data: SubmitBugFormValues) => {\n      const res = await apiRequest(\"POST\", \"/api/submissions\", {\n        ...data,\n        userId: user?.id,\n        status: \"pending\",\n        submittedAt: new Date().toISOString(),\n      });\n      return await res.json();\n    },\n    onSuccess: () => {\n      // Reset form and invalidate queries\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/submissions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/activities\"] });\n    },\n    onError: (error: Error) => {\n      console.error(\"Failed to submit bug report:\", error);\n    },\n  });\n\n  // Handle form submission\n  const onSubmit = (data: SubmitBugFormValues) => {\n    submitBugMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black text-green-500 relative\">\n      <MatrixBackground />\n      \n      {/* Navbar */}\n      <nav className=\"bg-black/90 border-b border-green-800 p-4 sticky top-0 z-20\">\n        <div className=\"container mx-auto flex justify-between items-center\">\n          <Link href=\"/\">\n            <a className=\"text-2xl font-bold cyber-text\">CyberHunt</a>\n          </Link>\n          \n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/dashboard\">\n              <a className=\"hover:text-green-400 transition-colors duration-200 font-mono\">Dashboard</a>\n            </Link>\n            <Link href=\"/programs\">\n              <a className=\"hover:text-green-400 transition-colors duration-200 font-mono\">Programs</a>\n            </Link>\n            <Link href=\"/submit\">\n              <a className=\"text-green-400 border-b border-green-400 pb-1 font-mono\">Submit Bug</a>\n            </Link>\n            \n            <div className=\"relative group\">\n              <button className=\"flex items-center space-x-1 hover:text-green-400 transition-colors duration-200 font-mono\">\n                <span>{user?.username}</span>\n                <span>▼</span>\n              </button>\n              \n              <div className=\"absolute right-0 mt-2 w-48 bg-black border border-green-700 rounded shadow-lg py-1 hidden group-hover:block\">\n                <button\n                  onClick={() => logoutMutation.mutate()}\n                  className=\"block w-full text-left px-4 py-2 hover:bg-green-900/30 transition-colors duration-200 font-mono\"\n                >\n                  Logout\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n      \n      {/* Main Content */}\n      <main className=\"container mx-auto p-6 relative z-10\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2 cyber-text\">Submit Vulnerability Report</h1>\n          <p className=\"font-mono\">Report a security vulnerability you've discovered.</p>\n        </div>\n        \n        {/* Submission Form */}\n        <div className=\"cyber-container p-6\">\n          {submitBugMutation.isSuccess ? (\n            <div className=\"text-center py-8\">\n              <h2 className=\"text-2xl font-bold mb-4 cyber-text\">Report Submitted Successfully!</h2>\n              <p className=\"font-mono mb-6\">\n                Thank you for your contribution to making the digital world more secure.\n                Our team will review your submission and get back to you.\n              </p>\n              <div className=\"flex justify-center space-x-4\">\n                <Link href=\"/dashboard\">\n                  <a className=\"px-4 py-2 bg-green-600 hover:bg-green-700 text-black font-bold rounded transition-colors duration-300\">\n                    Back to Dashboard\n                  </a>\n                </Link>\n                <button\n                  onClick={() => {\n                    submitBugMutation.reset();\n                    form.reset();\n                  }}\n                  className=\"px-4 py-2 bg-green-900/30 hover:bg-green-900/50 border border-green-700 rounded transition-colors duration-300 font-mono\"\n                >\n                  Submit Another Bug\n                </button>\n              </div>\n            </div>\n          ) : (\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              {/* Program Selection */}\n              <div>\n                <label htmlFor=\"programId\" className=\"block mb-1 font-mono\">\n                  Program <span className=\"text-red-500\">*</span>\n                </label>\n                <select\n                  id=\"programId\"\n                  {...form.register(\"programId\")}\n                  className=\"w-full p-2 bg-black border border-green-700 focus:border-green-500 rounded outline-none font-mono\"\n                >\n                  <option value=\"\">Select a program</option>\n                  {programs?.map((program) => (\n                    <option key={program.id} value={program.id}>\n                      {program.name}\n                    </option>\n                  ))}\n                </select>\n                {form.formState.errors.programId && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {form.formState.errors.programId.message}\n                  </p>\n                )}\n              </div>\n              \n              {/* Title */}\n              <div>\n                <label htmlFor=\"title\" className=\"block mb-1 font-mono\">\n                  Vulnerability Title <span className=\"text-red-500\">*</span>\n                </label>\n                <input\n                  id=\"title\"\n                  type=\"text\"\n                  {...form.register(\"title\")}\n                  className=\"w-full p-2 bg-black border border-green-700 focus:border-green-500 rounded outline-none font-mono\"\n                  placeholder=\"Brief title describing the vulnerability\"\n                />\n                {form.formState.errors.title && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {form.formState.errors.title.message}\n                  </p>\n                )}\n              </div>\n              \n              {/* Severity */}\n              <div>\n                <label htmlFor=\"severity\" className=\"block mb-1 font-mono\">\n                  Severity <span className=\"text-red-500\">*</span>\n                </label>\n                <select\n                  id=\"severity\"\n                  {...form.register(\"severity\")}\n                  className=\"w-full p-2 bg-black border border-green-700 focus:border-green-500 rounded outline-none font-mono\"\n                >\n                  <option value=\"\">Select severity level</option>\n                  <option value=\"low\">Low</option>\n                  <option value=\"medium\">Medium</option>\n                  <option value=\"high\">High</option>\n                  <option value=\"critical\">Critical</option>\n                </select>\n                {form.formState.errors.severity && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {form.formState.errors.severity.message}\n                  </p>\n                )}\n              </div>\n              \n              {/* Description */}\n              <div>\n                <label htmlFor=\"description\" className=\"block mb-1 font-mono\">\n                  Description <span className=\"text-red-500\">*</span>\n                </label>\n                <textarea\n                  id=\"description\"\n                  {...form.register(\"description\")}\n                  rows={5}\n                  className=\"w-full p-2 bg-black border border-green-700 focus:border-green-500 rounded outline-none font-mono\"\n                  placeholder=\"Detailed description of the vulnerability\"\n                />\n                {form.formState.errors.description && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {form.formState.errors.description.message}\n                  </p>\n                )}\n              </div>\n              \n              {/* Steps to Reproduce */}\n              <div>\n                <label htmlFor=\"stepsToReproduce\" className=\"block mb-1 font-mono\">\n                  Steps to Reproduce <span className=\"text-red-500\">*</span>\n                </label>\n                <textarea\n                  id=\"stepsToReproduce\"\n                  {...form.register(\"stepsToReproduce\")}\n                  rows={5}\n                  className=\"w-full p-2 bg-black border border-green-700 focus:border-green-500 rounded outline-none font-mono\"\n                  placeholder=\"Step-by-step instructions to reproduce the vulnerability\"\n                />\n                {form.formState.errors.stepsToReproduce && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {form.formState.errors.stepsToReproduce.message}\n                  </p>\n                )}\n              </div>\n              \n              {/* Impact */}\n              <div>\n                <label htmlFor=\"impact\" className=\"block mb-1 font-mono\">\n                  Business Impact <span className=\"text-red-500\">*</span>\n                </label>\n                <textarea\n                  id=\"impact\"\n                  {...form.register(\"impact\")}\n                  rows={4}\n                  className=\"w-full p-2 bg-black border border-green-700 focus:border-green-500 rounded outline-none font-mono\"\n                  placeholder=\"Describe the potential impact of this vulnerability\"\n                />\n                {form.formState.errors.impact && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {form.formState.errors.impact.message}\n                  </p>\n                )}\n              </div>\n              \n              {/* Submit Button */}\n              <div className=\"pt-4\">\n                <button\n                  type=\"submit\"\n                  disabled={submitBugMutation.isPending}\n                  className=\"w-full py-3 bg-green-600 hover:bg-green-700 text-black font-bold rounded transition-colors duration-300\"\n                >\n                  {submitBugMutation.isPending ? \"Submitting...\" : \"Submit Vulnerability Report\"}\n                </button>\n              </div>\n              \n              <p className=\"text-xs text-green-700 font-mono\">\n                <span className=\"text-red-500\">*</span> Required fields\n              </p>\n            </form>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":12081},"src/server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"../shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"cyberhunt-secret-key-dev-only\",\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 1 week\n    }\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        if (!user || !(await comparePasswords(password, user.password))) {\n          return done(null, false, { message: \"Incorrect username or password\" });\n        } else {\n          return done(null, user);\n        }\n      } catch (err) {\n        return done(err);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  \n  passport.deserializeUser(async (id: number, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (err) {\n      done(err);\n    }\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const existingUser = await storage.getUserByUsername(req.body.username);\n      if (existingUser) {\n        return res.status(400).json({ error: \"Username already exists\" });\n      }\n\n      const user = await storage.createUser({\n        ...req.body,\n        password: await hashPassword(req.body.password),\n      });\n\n      // Create an initial activity for the new user\n      await storage.createActivity({\n        userId: user.id,\n        type: \"account\",\n        message: \"Welcome to CyberHunt! Your ethical hacking journey begins now.\",\n      });\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        \n        // Don't send password back to the client\n        const { password, ...userWithoutPassword } = user;\n        res.status(201).json(userWithoutPassword);\n      });\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err, user, info) => {\n      if (err) return next(err);\n      if (!user) return res.status(401).json({ error: info?.message || \"Authentication failed\" });\n      \n      req.login(user, (err) => {\n        if (err) return next(err);\n        \n        // Don't send password back to the client\n        const { password, ...userWithoutPassword } = user;\n        res.status(200).json(userWithoutPassword);\n      });\n    })(req, res, next);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: \"Not authenticated\" });\n    }\n    \n    // Don't send password back to the client\n    const { password, ...userWithoutPassword } = req.user as SelectUser;\n    res.json(userWithoutPassword);\n  });\n}","size_bytes":4034},"src/server/routes.ts":{"content":"import { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { setupAuth } from \"./auth\";\nimport { storage } from \"./storage\";\nimport { z } from \"zod\";\nimport { insertSubmissionSchema } from \"../shared/schema\";\n\n// Middleware to ensure a user is authenticated\nfunction ensureAuthenticated(req: Request, res: Response, next: NextFunction) {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ error: \"Unauthorized\" });\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Set up authentication routes\n  setupAuth(app);\n  \n  // Get all bug bounty programs\n  app.get(\"/api/programs\", async (req, res, next) => {\n    try {\n      const programs = await storage.getPublicPrograms();\n      res.json(programs);\n    } catch (err) {\n      next(err);\n    }\n  });\n  \n  // Get a specific program\n  app.get(\"/api/programs/:id\", async (req, res, next) => {\n    try {\n      const id = parseInt(req.params.id);\n      const program = await storage.getProgram(id);\n      if (!program) {\n        return res.status(404).json({ error: \"Program not found\" });\n      }\n      res.json(program);\n    } catch (err) {\n      next(err);\n    }\n  });\n  \n  // Get submissions for the authenticated user\n  app.get(\"/api/submissions\", ensureAuthenticated, async (req, res, next) => {\n    try {\n      const userId = (req.user as Express.User).id;\n      const submissions = await storage.getSubmissionsByUser(userId);\n      res.json(submissions);\n    } catch (err) {\n      next(err);\n    }\n  });\n  \n  // Create a new submission\n  app.post(\"/api/submissions\", ensureAuthenticated, async (req, res, next) => {\n    try {\n      const userId = (req.user as Express.User).id;\n      \n      // Validate the submission data\n      const submissionData = insertSubmissionSchema.parse(req.body);\n      \n      const submission = await storage.createSubmission({\n        ...submissionData,\n        userId\n      });\n      \n      res.status(201).json(submission);\n    } catch (err) {\n      if (err instanceof z.ZodError) {\n        return res.status(400).json({ error: err.errors });\n      }\n      next(err);\n    }\n  });\n  \n  // Get activities for the authenticated user\n  app.get(\"/api/activities\", ensureAuthenticated, async (req, res, next) => {\n    try {\n      const userId = (req.user as Express.User).id;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : undefined;\n      const activities = await storage.getUserActivities(userId, limit);\n      res.json(activities);\n    } catch (err) {\n      next(err);\n    }\n  });\n  \n  // Get user profile with stats\n  app.get(\"/api/profile\", ensureAuthenticated, async (req, res, next) => {\n    try {\n      const userId = (req.user as Express.User).id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      const submissions = await storage.getSubmissionsByUser(userId);\n      \n      // Calculate stats\n      const totalSubmissions = submissions.length;\n      const acceptedSubmissions = submissions.filter(s => s.status === \"accepted\").length;\n      const rejectedSubmissions = submissions.filter(s => s.status === \"rejected\").length;\n      const pendingSubmissions = submissions.filter(s => s.status === \"pending\").length;\n      const totalRewards = submissions\n        .filter(s => s.status === \"accepted\" && s.reward !== null)\n        .reduce((sum, s) => sum + (s.reward || 0), 0);\n      \n      // Don't send password back to client\n      const { password, ...userWithoutPassword } = user;\n      \n      res.json({\n        user: userWithoutPassword,\n        stats: {\n          totalSubmissions,\n          acceptedSubmissions,\n          rejectedSubmissions,\n          pendingSubmissions,\n          totalRewards\n        }\n      });\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":3984},"src/server/storage.ts":{"content":"import session from \"express-session\";\nimport createMemoryStore from \"memorystore\";\nimport { User, InsertUser, Program, InsertProgram, Submission, InsertSubmission, Activity, InsertActivity } from \"../shared/schema\";\n\nconst MemoryStore = createMemoryStore(session);\n\nexport interface IStorage {\n  // User CRUD\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserReputation(id: number, reputation: number): Promise<User | undefined>;\n  \n  // Program CRUD\n  getProgram(id: number): Promise<Program | undefined>;\n  getAllPrograms(): Promise<Program[]>;\n  getPublicPrograms(): Promise<Program[]>;\n  createProgram(program: InsertProgram): Promise<Program>;\n  \n  // Submission CRUD\n  getSubmission(id: number): Promise<Submission | undefined>;\n  getSubmissionsByUser(userId: number): Promise<Submission[]>;\n  getSubmissionsByProgram(programId: number): Promise<Submission[]>;\n  createSubmission(submission: InsertSubmission & { userId: number }): Promise<Submission>;\n  updateSubmissionStatus(id: number, status: string, reward?: number): Promise<Submission | undefined>;\n  \n  // Activity CRUD\n  getUserActivities(userId: number, limit?: number): Promise<Activity[]>;\n  createActivity(activity: InsertActivity): Promise<Activity>;\n  \n  // Session storage\n  sessionStore: session.SessionStore;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private programs: Map<number, Program>;\n  private submissions: Map<number, Submission>;\n  private activities: Map<number, Activity>;\n  \n  currentUserId: number;\n  currentProgramId: number;\n  currentSubmissionId: number;\n  currentActivityId: number;\n  sessionStore: session.SessionStore;\n  \n  constructor() {\n    this.users = new Map();\n    this.programs = new Map();\n    this.submissions = new Map();\n    this.activities = new Map();\n    \n    this.currentUserId = 1;\n    this.currentProgramId = 1;\n    this.currentSubmissionId = 1;\n    this.currentActivityId = 1;\n    \n    this.sessionStore = new MemoryStore({\n      checkPeriod: 86400000, // 24 hours\n    });\n    \n    // Initialize with some example programs\n    this.initializePrograms();\n  }\n  \n  private initializePrograms() {\n    const programs: InsertProgram[] = [\n      {\n        name: \"SecureBank Web App\",\n        description: \"Find vulnerabilities in our banking web application.\",\n        company: \"SecureBank Inc.\",\n        minReward: 100,\n        maxReward: 5000,\n        isActive: true,\n      },\n      {\n        name: \"CloudStore API\",\n        description: \"Security testing for our cloud storage API endpoints.\",\n        company: \"CloudStore Technologies\",\n        minReward: 250,\n        maxReward: 10000,\n        isActive: true,\n      },\n      {\n        name: \"HealthTrack Mobile App\",\n        description: \"Security assessment of our health tracking mobile application.\",\n        company: \"HealthTrack Systems\",\n        minReward: 150,\n        maxReward: 3000,\n        isActive: true,\n      },\n    ];\n    \n    programs.forEach(program => this.createProgram(program));\n  }\n  \n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n  \n  async getUserByUsername(username: string): Promise<User | undefined> {\n    for (const user of this.users.values()) {\n      if (user.username === username) {\n        return user;\n      }\n    }\n    return undefined;\n  }\n  \n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentUserId++;\n    const now = new Date();\n    \n    const user: User = { \n      id, \n      ...insertUser,\n      createdAt: now\n    };\n    \n    this.users.set(id, user);\n    return user;\n  }\n  \n  async updateUserReputation(id: number, reputation: number): Promise<User | undefined> {\n    const user = await this.getUser(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, reputation };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n  \n  async getProgram(id: number): Promise<Program | undefined> {\n    return this.programs.get(id);\n  }\n  \n  async getAllPrograms(): Promise<Program[]> {\n    return Array.from(this.programs.values());\n  }\n  \n  async getPublicPrograms(): Promise<Program[]> {\n    return Array.from(this.programs.values()).filter(p => p.isActive);\n  }\n  \n  async createProgram(insertProgram: InsertProgram): Promise<Program> {\n    const id = this.currentProgramId++;\n    const now = new Date();\n    \n    const program: Program = { \n      id, \n      ...insertProgram,\n      createdAt: now \n    };\n    \n    this.programs.set(id, program);\n    return program;\n  }\n  \n  async getSubmission(id: number): Promise<Submission | undefined> {\n    return this.submissions.get(id);\n  }\n  \n  async getSubmissionsByUser(userId: number): Promise<Submission[]> {\n    return Array.from(this.submissions.values()).filter(s => s.userId === userId);\n  }\n  \n  async getSubmissionsByProgram(programId: number): Promise<Submission[]> {\n    return Array.from(this.submissions.values()).filter(s => s.programId === programId);\n  }\n  \n  async createSubmission(submission: InsertSubmission & { userId: number }): Promise<Submission> {\n    const id = this.currentSubmissionId++;\n    const now = new Date();\n    \n    const newSubmission: Submission = {\n      id,\n      userId: submission.userId,\n      programId: submission.programId as number,\n      title: submission.title,\n      description: submission.description,\n      severity: submission.severity,\n      stepsToReproduce: submission.stepsToReproduce,\n      impact: submission.impact,\n      status: submission.status || \"pending\",\n      reward: null,\n      submittedAt: now,\n      updatedAt: now,\n    };\n    \n    this.submissions.set(id, newSubmission);\n    \n    // Create an activity for this submission\n    await this.createActivity({\n      userId: submission.userId,\n      type: \"submission\",\n      message: `You submitted a vulnerability report: ${submission.title}`,\n    });\n    \n    return newSubmission;\n  }\n  \n  async updateSubmissionStatus(id: number, status: string, reward?: number): Promise<Submission | undefined> {\n    const submission = await this.getSubmission(id);\n    if (!submission) return undefined;\n    \n    const updatedSubmission = {\n      ...submission,\n      status,\n      reward: reward ?? submission.reward,\n      updatedAt: new Date(),\n    };\n    \n    this.submissions.set(id, updatedSubmission);\n    \n    // Create an activity for this status update\n    let message = `Your submission #${id} status changed to ${status}`;\n    if (reward) message += ` with a reward of $${reward}`;\n    \n    await this.createActivity({\n      userId: submission.userId,\n      type: \"status\",\n      message,\n    });\n    \n    return updatedSubmission;\n  }\n  \n  async getUserActivities(userId: number, limit = 10): Promise<Activity[]> {\n    return Array.from(this.activities.values())\n      .filter(a => a.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())\n      .slice(0, limit);\n  }\n  \n  async createActivity(insertActivity: InsertActivity): Promise<Activity> {\n    const id = this.currentActivityId++;\n    const now = new Date();\n    \n    const activity: Activity = {\n      id,\n      ...insertActivity,\n      createdAt: now,\n    };\n    \n    this.activities.set(id, activity);\n    return activity;\n  }\n}\n\nexport const storage = new MemStorage();","size_bytes":7417},"src/shared/schema.ts":{"content":"import { pgTable, serial, text, timestamp, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").notNull(),\n  reputation: integer(\"reputation\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  email: true,\n  reputation: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Programs table\nexport const programs = pgTable(\"programs\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  company: text(\"company\").notNull(),\n  minReward: integer(\"min_reward\").notNull(),\n  maxReward: integer(\"max_reward\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertProgramSchema = createInsertSchema(programs).pick({\n  name: true,\n  description: true,\n  company: true,\n  minReward: true,\n  maxReward: true,\n  isActive: true,\n});\n\nexport type InsertProgram = z.infer<typeof insertProgramSchema>;\nexport type Program = typeof programs.$inferSelect;\n\n// Submissions table\nexport const submissions = pgTable(\"submissions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  programId: integer(\"program_id\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  severity: text(\"severity\").notNull(),\n  stepsToReproduce: text(\"steps_to_reproduce\").notNull(),\n  impact: text(\"impact\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"),\n  reward: integer(\"reward\"),\n  submittedAt: timestamp(\"submitted_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertSubmissionSchema = createInsertSchema(submissions).pick({\n  programId: true,\n  title: true,\n  description: true,\n  severity: true,\n  stepsToReproduce: true,\n  impact: true,\n  status: true,\n});\n\nexport type InsertSubmission = z.infer<typeof insertSubmissionSchema>;\nexport type Submission = typeof submissions.$inferSelect;\n\n// Activities table\nexport const activities = pgTable(\"activities\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  type: text(\"type\").notNull(),\n  message: text(\"message\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertActivitySchema = createInsertSchema(activities).pick({\n  userId: true,\n  type: true,\n  message: true,\n});\n\nexport type InsertActivity = z.infer<typeof insertActivitySchema>;\nexport type Activity = typeof activities.$inferSelect;","size_bytes":2919},"client/src/components/admin-route.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport AdminLoginPage from \"@/pages/admin-login-page\";\nimport AdminDashboardPage from \"@/pages/admin-dashboard-page\";\n\nexport function AdminRoute() {\n  const [, navigate] = useLocation();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem('adminToken');\n      \n      if (!token) {\n        setIsAuthenticated(false);\n        setIsLoading(false);\n        return;\n      }\n\n      try {\n        const response = await fetch(\"/api/admin/verify\", {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          },\n          credentials: 'include'\n        });\n        \n        if (response.ok) {\n          setIsAuthenticated(true);\n        } else {\n          localStorage.removeItem('adminToken');\n          setIsAuthenticated(false);\n        }\n      } catch (error) {\n        localStorage.removeItem('adminToken');\n        setIsAuthenticated(false);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkAuth();\n  }, []);\n\n  // Always show login page first, let it handle the redirect logic\n  return <AdminLoginPage />;\n}","size_bytes":1295},"client/src/components/ai-report-enhancer.tsx":{"content":"\nimport { useState } from \"react\";\nimport { Wand2 } from \"lucide-react\";\nimport { Button } from \"./ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"./ui/dialog\";\n\ninterface AIReportEnhancerProps {\n  currentReport: {\n    title: string;\n    type: string;\n    severity: string;\n    description: string;\n  };\n  onEnhancedReport: (enhancedReport: {\n    title: string;\n    type: string;\n    severity: string;\n    description: string;\n  }) => void;\n}\n\nexport function AIReportEnhancer({ currentReport, onEnhancedReport }: AIReportEnhancerProps) {\n  const [isEnhancing, setIsEnhancing] = useState(false);\n\n  const enhanceReport = async () => {\n    setIsEnhancing(true);\n    try {\n      const response = await fetch('/api/enhance-report', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(currentReport),\n      });\n      \n      const enhancedReport = await response.json();\n      onEnhancedReport(enhancedReport);\n    } catch (error) {\n      console.error('Failed to enhance report:', error);\n    } finally {\n      setIsEnhancing(false);\n    }\n  };\n\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button \n          variant=\"outline\"\n          className=\"w-full border-matrix/30 hover:bg-matrix/10 text-matrix\"\n        >\n          <Wand2 className=\"mr-2 h-4 w-4\" />\n          Enhance with AI\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"bg-terminal border border-matrix/30\">\n        <DialogHeader>\n          <DialogTitle className=\"text-light-gray\">AI Report Enhancement</DialogTitle>\n          <DialogDescription className=\"text-dim-gray\">\n            The AI will analyze and improve your report's structure, clarity, and technical details.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"space-y-4\">\n          <Button\n            onClick={enhanceReport}\n            disabled={isEnhancing}\n            className=\"w-full\"\n          >\n            {isEnhancing ? (\n              <>Processing...</>\n            ) : (\n              <>Enhance Report</>\n            )}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":2264},"client/src/components/audit-trail.tsx":{"content":"\nimport { useQuery } from \"@tanstack/react-query\";\nimport { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer } from \"recharts\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\n\nexport function AuditTrail() {\n  const { data: auditLogs } = useQuery({\n    queryKey: [\"audit-logs\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/admin/audit-logs\");\n      return res.json();\n    }\n  });\n\n  return (\n    <Card className=\"bg-terminal border-matrix/30\">\n      <CardHeader>\n        <CardTitle className=\"text-light-gray\">Audit Trail</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <LineChart data={auditLogs}>\n            <XAxis dataKey=\"timestamp\" />\n            <YAxis />\n            <Tooltip />\n            <Line type=\"monotone\" dataKey=\"count\" stroke=\"#50fa7b\" />\n          </LineChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":973},"client/src/components/bug-price-estimator.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"./ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\ninterface BugPriceEstimatorProps {\n  bugType: string;\n  severity: string;\n  programId: number;\n}\n\nexport function BugPriceEstimator({ bugType, severity, programId }: BugPriceEstimatorProps) {\n  const [estimate, setEstimate] = useState({ min: 0, max: 0 });\n\n  useEffect(() => {\n    if (!bugType || !severity) return;\n\n    // Base multipliers for bug types\n    const typeMultipliers: Record<string, number> = {\n      \"Remote Code Execution (RCE)\": 5.0,\n      \"SQL Injection\": 4.0,\n      \"Authentication Bypass\": 3.5,\n      \"Authorization Bypass\": 3.0,\n      \"Cross-Site Scripting (XSS)\": 2.0,\n      \"Cross-Site Request Forgery (CSRF)\": 1.5,\n      \"Information Disclosure\": 1.5,\n      \"Server-Side Request Forgery (SSRF)\": 2.5,\n      \"XML External Entity (XXE)\": 2.5,\n      \"Open Redirect\": 1.0,\n      \"Business Logic Vulnerability\": 2.0,\n      \"Other\": 1.0\n    };\n\n    // Severity multipliers\n    const severityMultipliers: Record<string, number> = {\n      \"Critical\": 4.0,\n      \"High\": 3.0,\n      \"Medium\": 2.0,\n      \"Low\": 1.0,\n      \"Info\": 0.5\n    };\n\n    // Base reward ranges\n    const baseMin = 100;\n    const baseMax = 500;\n\n    // Calculate estimate\n    const typeMultiplier = typeMultipliers[bugType] || 1;\n    const severityMultiplier = severityMultipliers[severity] || 1;\n\n    const minReward = Math.round(baseMin * typeMultiplier * severityMultiplier);\n    const maxReward = Math.round(baseMax * typeMultiplier * severityMultiplier);\n\n    setEstimate({ min: minReward, max: maxReward });\n  }, [bugType, severity, programId]);\n\n  if (!bugType || !severity) return null;\n\n  return (\n    <Card className=\"bg-terminal border border-matrix/20\">\n      <CardContent className=\"pt-6\">\n        <div className=\"flex items-start space-x-4\">\n          <AlertCircle className=\"h-5 w-5 text-matrix mt-0.5\" />\n          <div>\n            <h4 className=\"text-sm font-medium mb-1\">Estimated Reward Range</h4>\n            <p className=\"text-2xl font-mono text-matrix\">\n              ${estimate.min} - ${estimate.max}\n            </p>\n            <p className=\"text-xs text-dim-gray mt-1\">\n              *This is an estimate. Actual reward may vary based on impact and other factors.\n            </p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2405},"client/src/components/bug-report-templates.tsx":{"content":"import { useState } from \"react\";\nimport { FileWarning, AlertTriangle, ShieldAlert, KeyRound, Database, Globe, ExternalLink, ChevronRight, BookOpen } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { KnowledgeBase } from \"./knowledge-base\";\n\ninterface BugReportTemplateProps {\n  onSelectTemplate: (template: string) => void;\n}\n\nconst templates = [\n  {\n    id: \"xss\",\n    label: \"Cross-Site Scripting (XSS)\",\n    icon: <AlertTriangle className=\"h-4 w-4\" />,\n    template: `## Vulnerability Description\nI've discovered a Cross-Site Scripting (XSS) vulnerability that allows attackers to inject malicious scripts into web pages viewed by users.\n\n## Steps to Reproduce\n1. Navigate to [affected page/functionality]\n2. Input the following payload into the [input field/parameter]: \n   \\`<script>alert(document.cookie)</script>\\`\n3. [Submit form/Click button/Perform action]\n4. The script executes in the context of the application\n\n## Impact\nThis vulnerability could allow attackers to:\n- Steal user cookies and hijack sessions\n- Perform actions on behalf of the victim\n- Access sensitive information\n- Deface the website or redirect users to malicious sites\n\n## Affected Components\n- URL/endpoint: [specify URL]\n- Parameter: [specify parameter]\n- Browser: [specify browser and version]\n\n## Suggestions for Remediation\n- Implement proper input validation\n- Apply context-appropriate output encoding\n- Implement Content Security Policy (CSP) headers\n- Consider using frameworks that automatically escape XSS\n- Validate and sanitize HTML content`,\n  },\n  {\n    id: \"sqli\",\n    label: \"SQL Injection\",\n    icon: <Database className=\"h-4 w-4\" />,\n    template: `## Vulnerability Description\nI've discovered a SQL Injection vulnerability that allows attackers to interfere with database queries made by the application.\n\n## Steps to Reproduce\n1. Navigate to [affected page/functionality]\n2. Input the following payload into the [input field/parameter]:\n   \\`' OR 1=1 --\\`\n3. [Submit form/Click button/Perform action]\n4. The application reveals [unexpected data/error message/behavior]\n\n## Further Testing\nI was able to extract the following information:\n- [List any data structures or information discovered]\n- [Include any additional testing performed]\n\n## Impact\nThis vulnerability could allow attackers to:\n- Access unauthorized data\n- Modify database contents\n- Delete database records\n- Execute administrative operations\n- Potentially gain access to the underlying server\n\n## Affected Components\n- URL/endpoint: [specify URL]\n- Parameter: [specify parameter]\n- Database type: [if known]\n\n## Suggestions for Remediation\n- Use parameterized queries or prepared statements\n- Implement ORM frameworks\n- Apply strict input validation\n- Enforce principle of least privilege for database accounts\n- Implement proper error handling to avoid leaking technical details`,\n  },\n  {\n    id: \"auth-bypass\",\n    label: \"Authentication Bypass\",\n    icon: <KeyRound className=\"h-4 w-4\" />,\n    template: `## Vulnerability Description\nI've discovered an authentication bypass vulnerability that allows unauthorized access to protected functionality or resources.\n\n## Steps to Reproduce\n1. [Start with the normal authentication flow]\n2. [Describe exact steps to bypass authentication control]\n3. [Explain how to verify successful bypass]\n\n## Technical Details\nThe bypass works by:\n- [Explain the technical mechanism behind the bypass]\n- [Include any relevant request/response details]\n\n## Impact\nThis vulnerability allows attackers to:\n- Access protected resources without authentication\n- Bypass security controls\n- [Other specific impacts]\n\n## Affected Components\n- URL/endpoint: [specify URL]\n- Feature: [specify feature/functionality]\n- User role: [if specific to certain roles]\n\n## Suggestions for Remediation\n- Implement consistent authentication checks across all protected resources\n- Enforce server-side validation of authentication state\n- Consider implementing multi-factor authentication\n- Review and refactor authentication logic\n- Implement proper session management`,\n  },\n  {\n    id: \"ssrf\",\n    label: \"Server-Side Request Forgery (SSRF)\",\n    icon: <Globe className=\"h-4 w-4\" />,\n    template: `## Vulnerability Description\nI've discovered a Server-Side Request Forgery (SSRF) vulnerability that allows an attacker to induce the server to make requests to an unintended location.\n\n## Steps to Reproduce\n1. Navigate to [affected page/functionality]\n2. Input the following URL into the [input field/parameter]:\n   \\`http://internal-service.local\\` or \\`http://localhost:port\\`\n3. [Submit form/Click button/Perform action]\n4. The server makes a request to the specified internal resource\n\n## Technical Details\n- [Details about the request being made]\n- [Any filters or restrictions observed]\n- [Any successful bypasses discovered]\n\n## Impact\nThis vulnerability could allow attackers to:\n- Access internal services not exposed to the internet\n- Bypass network access controls\n- Perform port scanning of internal networks\n- Access metadata services in cloud environments\n- Execute command & control operations\n\n## Affected Components\n- URL/endpoint: [specify URL]\n- Parameter: [specify parameter]\n- Feature: [specify feature/functionality]\n\n## Suggestions for Remediation\n- Implement a whitelist of allowed domains/IPs\n- Use a URL parser and validate each component\n- Disable redirects or limit redirect chains\n- Block requests to private IP ranges\n- Consider using a dedicated service for external resource fetching`,\n  },\n  {\n    id: \"idor\",\n    label: \"Insecure Direct Object Reference (IDOR)\",\n    icon: <ShieldAlert className=\"h-4 w-4\" />,\n    template: `## Vulnerability Description\nI've discovered an Insecure Direct Object Reference (IDOR) vulnerability that allows access to resources belonging to other users or restricted resources.\n\n## Steps to Reproduce\n1. Login as [User A]\n2. Navigate to [affected page/functionality]\n3. Observe the [ID/reference] in the request: [original ID]\n4. Change the [ID/reference] to [different ID]: [modified ID]\n5. [Submit request/Reload page]\n6. Observe that data belonging to [another user/restricted resource] is accessible\n\n## Technical Details\n- [Explain how object references are exposed]\n- [Detail any attempts to obfuscate IDs and how they were bypassed]\n- [Include HTTP requests/responses if relevant]\n\n## Impact\nThis vulnerability allows attackers to:\n- Access other users' private data\n- Modify information belonging to other users\n- Access restricted functionality or resources\n- [Other specific impacts]\n\n## Affected Components\n- URL/endpoint: [specify URL]\n- Parameter: [specify parameter]\n- Feature: [specify feature/functionality]\n\n## Suggestions for Remediation\n- Implement proper authorization checks for all resource accesses\n- Use indirect references that are specific to the user's session\n- Verify object ownership before allowing operations\n- Consider using UUIDs instead of sequential or predictable IDs\n- Implement proper access control lists`,\n  },\n  {\n    id: \"open-redirect\",\n    label: \"Open Redirect\",\n    icon: <ExternalLink className=\"h-4 w-4\" />,\n    template: `## Vulnerability Description\nI've discovered an Open Redirect vulnerability that allows attackers to redirect users to arbitrary external websites.\n\n## Steps to Reproduce\n1. Navigate to [affected page/functionality]\n2. Modify the [redirect parameter] to point to an external domain:\n   \\`https://example.com/login?redirect=https://attacker.com\\`\n3. [Complete action that triggers redirect]\n4. User is redirected to the external site\n\n## Technical Details\n- [Explain which parameters are vulnerable]\n- [Detail any validation attempted by the application]\n- [Include any bypass techniques discovered]\n\n## Impact\nThis vulnerability could allow attackers to:\n- Conduct convincing phishing attacks\n- Redirect users to malicious websites\n- Exploit users' trust in your domain\n- Lead to further exploitation when combined with other vulnerabilities\n\n## Affected Components\n- URL/endpoint: [specify URL]\n- Parameter: [specify parameter]\n- Feature: [specify feature/functionality]\n\n## Suggestions for Remediation\n- Implement a whitelist of allowed redirect destinations\n- Use relative URLs for internal redirects\n- If external redirects are necessary, implement an intermediate confirmation page\n- Validate redirect URLs against a strict pattern\n- Consider using signed redirect URLs for sensitive operations`,\n  },\n  {\n    id: \"custom\",\n    label: \"Custom (blank template)\",\n    icon: <FileWarning className=\"h-4 w-4\" />,\n    template: `## Vulnerability Description\n[Provide a clear and concise description of the vulnerability]\n\n## Steps to Reproduce\n1. [Step 1]\n2. [Step 2]\n3. [Step 3]\n[Add as many steps as needed]\n\n## Technical Details\n[Provide any technical details, code snippets, or screenshots that help explain the vulnerability]\n\n## Impact\n[Describe the potential impact of this vulnerability, including what an attacker might be able to accomplish]\n\n## Affected Components\n- URL/endpoint: [specify URL]\n- Parameter: [specify parameter]\n- Feature: [specify feature/functionality]\n- Environment: [specify environment]\n\n## Suggestions for Remediation\n[Provide constructive suggestions on how to fix the vulnerability]`,\n  },\n];\n\nexport function BugReportTemplates({ onSelectTemplate }: BugReportTemplateProps) {\n  const handleSelectTemplate = (template: string) => {\n    onSelectTemplate(template);\n  };\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"flex flex-col sm:flex-row gap-3 items-start sm:items-center justify-between\">\n        <div>\n          <h3 className=\"text-sm font-mono text-dim-gray mb-1\">Report Templates</h3>\n          <p className=\"text-xs text-dim-gray/70\">\n            Use a template to quickly create a well-structured bug report\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button \n                variant=\"outline\" \n                className=\"border-matrix/30 hover:bg-matrix/10\"\n              >\n                <BookOpen className=\"mr-2 h-4 w-4\" />\n                Select Template\n                <ChevronRight className=\"ml-2 h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent className=\"w-56 bg-terminal border border-matrix/30\">\n              <DropdownMenuLabel className=\"font-mono text-xs text-dim-gray\">Vulnerability Templates</DropdownMenuLabel>\n              <DropdownMenuSeparator className=\"bg-matrix/20\" />\n              {templates.map((template) => (\n                <DropdownMenuItem \n                  key={template.id}\n                  className=\"cursor-pointer font-mono text-sm hover:bg-matrix/10 flex items-center\"\n                  onClick={() => handleSelectTemplate(template.template)}\n                >\n                  <span className=\"mr-2\">{template.icon}</span>\n                  {template.label}\n                </DropdownMenuItem>\n              ))}\n            </DropdownMenuContent>\n          </DropdownMenu>\n          \n          <KnowledgeBase />\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11358},"client/src/components/knowledge-base.tsx":{"content":"import { useState } from \"react\";\nimport { Search, Book, Shield, Terminal, AlertTriangle, Code, Database, Globe, Lock, ChevronRight, ExternalLink } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\n\ntype KnowledgeCategory = {\n  id: string;\n  name: string;\n  icon: React.ReactNode;\n  description: string;\n  articles: KnowledgeArticle[];\n};\n\ntype KnowledgeArticle = {\n  id: string;\n  title: string;\n  content: string;\n  tags: string[];\n  references?: { label: string; url: string }[];\n};\n\n// Knowledge base data\nconst knowledgeCategories: KnowledgeCategory[] = [\n  {\n    id: \"web\",\n    name: \"Web Vulnerabilities\",\n    icon: <Globe className=\"h-5 w-5\" />,\n    description: \"Common web application security vulnerabilities\",\n    articles: [\n      {\n        id: \"xss\",\n        title: \"Cross-Site Scripting (XSS)\",\n        tags: [\"web\", \"critical\", \"injection\"],\n        content: `# Cross-Site Scripting (XSS)\n\n## Overview\nCross-Site Scripting (XSS) is a client-side code injection attack where attackers inject malicious scripts into web pages viewed by users. These scripts execute in the victim's browser, allowing attackers to steal sensitive information, hijack sessions, or perform actions on behalf of the victim.\n\n## Types of XSS\n1. **Reflected XSS**: Malicious script is reflected off a web server, such as in search results or error messages.\n2. **Stored XSS**: Malicious script is stored on the target server, such as in a database, and later retrieved by victims.\n3. **DOM-based XSS**: Vulnerability exists in client-side code rather than server-side code.\n\n## Attack Vectors\n- User input fields (search boxes, comment forms, etc.)\n- URL parameters\n- HTTP headers\n- File uploads with HTML content\n- Third-party JavaScript libraries\n\n## Prevention Techniques\n1. **Input Validation**: Validate all user input on the server side.\n2. **Output Encoding**: Encode HTML special characters before displaying user input.\n3. **Content Security Policy (CSP)**: Implement strict CSP headers to restrict script execution.\n4. **HTTPOnly Cookies**: Prevent JavaScript access to sensitive cookies.\n5. **X-XSS-Protection Header**: Enable browser's built-in XSS filter.\n6. **Sanitize HTML**: Use libraries to clean HTML content of potentially malicious code.\n\n## Impact\n- Account hijacking\n- Data theft\n- Malware distribution\n- Website defacement\n- Bypassing CSRF protections`,\n        references: [\n          { label: \"OWASP XSS Prevention Cheat Sheet\", url: \"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\" },\n          { label: \"PortSwigger XSS Tutorial\", url: \"https://portswigger.net/web-security/cross-site-scripting\" }\n        ]\n      },\n      {\n        id: \"sqli\",\n        title: \"SQL Injection\",\n        tags: [\"database\", \"critical\", \"injection\"],\n        content: `# SQL Injection\n\n## Overview\nSQL Injection is a code injection technique that exploits vulnerabilities in applications that interact with databases. Attackers insert malicious SQL statements into entry fields, which are then executed by the database.\n\n## Types of SQL Injection\n1. **Error-based**: Extract data through error messages\n2. **Union-based**: Use UNION operator to combine results from injected query\n3. **Blind SQL Injection**: No visible feedback, but can extract data bit by bit\n4. **Time-based Blind**: Use time delays to determine if conditions are true/false\n5. **Out-of-band**: Extract data through alternative channels (DNS, HTTP requests)\n\n## Common Attack Patterns\n- \\`' OR 1=1 --\\`\n- \\`' UNION SELECT username, password FROM users --\\`\n- \\`' OR '1'='1\\`\n- \\`'; DROP TABLE users; --\\`\n\n## Prevention Techniques\n1. **Parameterized Queries**: Use prepared statements with bound parameters\n2. **ORM Frameworks**: Utilize Object-Relational Mapping frameworks that handle SQL escaping\n3. **Input Validation**: Validate and sanitize all user inputs\n4. **Least Privilege**: Run database with minimal required permissions\n5. **Stored Procedures**: Use stored procedures to abstract direct database access\n6. **WAF**: Implement Web Application Firewalls to detect and block SQL injection attempts\n\n## Impact\n- Data theft\n- Data manipulation\n- Data destruction\n- Authentication bypass\n- Server compromise`,\n        references: [\n          { label: \"OWASP SQL Injection Prevention Cheat Sheet\", url: \"https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\" },\n          { label: \"PortSwigger SQL Injection Tutorial\", url: \"https://portswigger.net/web-security/sql-injection\" }\n        ]\n      }\n    ]\n  },\n  {\n    id: \"authentication\",\n    name: \"Authentication & Authorization\",\n    icon: <Lock className=\"h-5 w-5\" />,\n    description: \"Security issues related to user authentication and authorization\",\n    articles: [\n      {\n        id: \"auth-bypass\",\n        title: \"Authentication Bypass Techniques\",\n        tags: [\"authentication\", \"critical\"],\n        content: `# Authentication Bypass Techniques\n\n## Overview\nAuthentication bypass vulnerabilities allow attackers to gain unauthorized access to systems by circumventing login mechanisms. These vulnerabilities often result from flawed logic, weak implementations, or insecure configurations.\n\n## Common Bypass Techniques\n\n### 1. Parameter Manipulation\n- Manipulating authentication parameters in requests\n- Changing user IDs or role parameters in cookies/tokens\n- Modifying authentication flow parameters\n\n### 2. Forced Browsing\n- Directly accessing protected pages by URL\n- Skipping authentication steps in multi-step processes\n- Accessing resources without proper authorization checks\n\n### 3. Session Management Attacks\n- Session fixation\n- Session hijacking\n- Weak session ID generation\n- Missing session validation\n\n### 4. Logic Flaws\n- Race conditions\n- Flawed implementation of business rules\n- Improper validation of authentication state\n\n### 5. Technical Attacks\n- SQL injection in login forms\n- Credential stuffing\n- Brute force attacks\n- Default or weak credentials\n\n## Prevention Techniques\n1. **Strong Authentication**: Implement multi-factor authentication\n2. **Proper Session Management**: Secure cookie flags, session timeouts, re-authentication for sensitive actions\n3. **Server-side Validation**: Never trust client-side controls alone\n4. **Defense in Depth**: Multiple layers of security controls\n5. **Secure Coding Practices**: Follow secure coding standards\n6. **Continuous Testing**: Regular security testing and code reviews\n\n## Impact\n- Unauthorized access to sensitive information\n- Account takeover\n- Privilege escalation\n- System compromise\n- Data breaches`,\n        references: [\n          { label: \"OWASP Authentication Cheat Sheet\", url: \"https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html\" },\n          { label: \"PortSwigger Authentication Vulnerabilities\", url: \"https://portswigger.net/web-security/authentication\" }\n        ]\n      }\n    ]\n  },\n  {\n    id: \"mobile\",\n    name: \"Mobile Security\",\n    icon: <Terminal className=\"h-5 w-5\" />,\n    description: \"Security vulnerabilities specific to mobile applications\",\n    articles: [\n      {\n        id: \"insecure-data-storage\",\n        title: \"Insecure Data Storage\",\n        tags: [\"mobile\", \"high\", \"data-protection\"],\n        content: `# Insecure Data Storage in Mobile Applications\n\n## Overview\nInsecure data storage vulnerabilities occur when sensitive information is stored improperly on mobile devices, allowing unauthorized access to that data. This affects both Android and iOS platforms and can lead to significant data breaches.\n\n## Common Vulnerabilities\n\n### 1. Unencrypted Storage\n- Storing sensitive data in plaintext\n- Using weak encryption algorithms\n- Poor key management practices\n\n### 2. Improper Storage Locations\n- External storage (SD cards)\n- Shared preferences without proper restrictions\n- Temporary files not properly secured\n- Unprotected SQLite databases\n- Log files containing sensitive information\n\n### 3. Data Leakage Channels\n- Application backups\n- Keyboard caches\n- Screenshots in app switcher\n- Copy/paste buffers\n- Crash logs and analytics\n\n## Detection Methods\n1. Static analysis of application code\n2. Dynamic analysis through runtime inspection\n3. File system analysis on rooted/jailbroken devices\n4. Traffic analysis for data transmission\n5. Reverse engineering application binaries\n\n## Prevention Techniques\n1. **Use Platform Security Features**:\n   - iOS: Keychain, Data Protection API\n   - Android: EncryptedSharedPreferences, Android Keystore\n\n2. **Encryption Best Practices**:\n   - Use strong, industry-standard encryption (AES-256)\n   - Implement proper key management\n   - Avoid storing encryption keys in the application\n\n3. **Minimize Data Storage**:\n   - Only store what's necessary\n   - Implement proper data retention policies\n   - Securely delete data when no longer needed\n\n4. **Secure Coding Practices**:\n   - Avoid hardcoded credentials\n   - Implement proper access controls\n   - Follow platform-specific security guidelines\n\n## Impact\n- Exposure of personal user data\n- Financial information compromise\n- Authentication credential theft\n- Privacy violations\n- Compliance violations`,\n        references: [\n          { label: \"OWASP Mobile Top 10\", url: \"https://owasp.org/www-project-mobile-top-10/\" },\n          { label: \"OWASP Mobile Security Testing Guide\", url: \"https://owasp.org/www-project-mobile-security-testing-guide/\" }\n        ]\n      }\n    ]\n  },\n  {\n    id: \"api\",\n    name: \"API Security\",\n    icon: <Code className=\"h-5 w-5\" />,\n    description: \"Securing API endpoints and preventing common API vulnerabilities\",\n    articles: [\n      {\n        id: \"broken-object-level-auth\",\n        title: \"Broken Object Level Authorization\",\n        tags: [\"api\", \"critical\", \"authorization\"],\n        content: `# Broken Object Level Authorization\n\n## Overview\nBroken Object Level Authorization (BOLA), also known as Insecure Direct Object Reference (IDOR), is a vulnerability where an application fails to properly validate that a user has permission to access or modify a specific resource. This is one of the most common and high-impact API vulnerabilities.\n\n## Vulnerability Patterns\n\n### 1. Direct Resource Access Without Authorization\n- API endpoints that accept IDs without proper permission checks\n- Example: \\`GET /api/users/123\\` where any authenticated user can access any user's data by changing the ID\n\n### 2. Predictable Resource Identifiers\n- Sequential IDs (e.g., incremental integers)\n- Easily guessable UUIDs or patterns\n- Non-random resource identifiers\n\n### 3. Horizontal Privilege Escalation\n- User accessing other users' resources at the same permission level\n- Example: User A accessing User B's private messages\n\n### 4. Vertical Privilege Escalation\n- User accessing resources requiring higher privilege levels\n- Example: Regular user accessing admin-only functionality\n\n## Detection Methods\n1. **Manual Testing**: Attempting to access resources belonging to other users\n2. **Automated Scanning**: Using tools that detect resource access control issues\n3. **Code Review**: Examining authorization logic in API implementations\n4. **Proxy Interception**: Manipulating request parameters to attempt unauthorized access\n\n## Prevention Techniques\n1. **Centralized Authorization**:\n   - Implement a centralized authorization mechanism\n   - Use policy-based access control frameworks\n\n2. **Proper Resource Ownership Validation**:\n   - Always verify resource ownership before granting access\n   - Implement user context in every authorization decision\n\n3. **Unpredictable Resource IDs**:\n   - Use randomly generated UUIDs instead of sequential IDs\n   - Avoid exposing internal IDs directly\n\n4. **Indirect Reference Maps**:\n   - Use indirect reference maps to translate between user-visible IDs and internal IDs\n   - Maintain per-user context for resource mapping\n\n5. **Testing**:\n   - Implement unit and integration tests specifically for authorization checks\n   - Regular penetration testing focused on authorization\n\n## Impact\n- Unauthorized access to sensitive information\n- Data theft or modification\n- Privacy violations\n- Regulatory compliance issues\n- Reputation damage`,\n        references: [\n          { label: \"OWASP API Security Top 10\", url: \"https://owasp.org/www-project-api-security/\" },\n          { label: \"OWASP API Security - BOLA\", url: \"https://github.com/OWASP/API-Security/blob/master/2019/en/src/0xa1-broken-object-level-authorization.md\" }\n        ]\n      }\n    ]\n  },\n  {\n    id: \"secure-coding\",\n    name: \"Secure Coding Practices\",\n    icon: <Shield className=\"h-5 w-5\" />,\n    description: \"Best practices for writing secure code across different platforms\",\n    articles: [\n      {\n        id: \"secure-sdlc\",\n        title: \"Secure Software Development Lifecycle\",\n        tags: [\"process\", \"secure-coding\"],\n        content: `# Secure Software Development Lifecycle (SSDLC)\n\n## Overview\nThe Secure Software Development Lifecycle (SSDLC) is a framework that incorporates security throughout the entire software development process rather than addressing it as an afterthought. It helps organizations build more secure software by identifying and addressing security vulnerabilities early in the development cycle.\n\n## SSDLC Phases\n\n### 1. Planning & Requirements\n- Identify security requirements and compliance needs\n- Define security objectives\n- Create abuse cases alongside use cases\n- Perform threat modeling\n- Define security architecture\n\n### 2. Design\n- Conduct secure design reviews\n- Implement defense in depth\n- Create security control design\n- Apply secure design patterns\n- Document security assumptions\n\n### 3. Implementation\n- Follow secure coding guidelines\n- Use pre-approved, secure libraries\n- Conduct regular code reviews\n- Perform static application security testing (SAST)\n- Enforce peer reviews\n\n### 4. Testing\n- Conduct security-focused testing\n- Perform dynamic application security testing (DAST)\n- Execute penetration testing\n- Fuzz testing for edge cases\n- Validate security requirements\n\n### 5. Deployment\n- Secure configuration management\n- Create secure deployment procedures\n- Implement secure infrastructure\n- Conduct final security review\n- Prepare incident response plan\n\n### 6. Maintenance\n- Security patch management\n- Ongoing security testing\n- Security monitoring\n- Vulnerability management\n- Security incident handling\n\n## Key SSDLC Models\n1. **Microsoft SDL**: Microsoft's Security Development Lifecycle\n2. **OWASP SAMM**: Software Assurance Maturity Model\n3. **NIST 800-64**: Security Considerations in the System Development Life Cycle\n4. **BSIMM**: Building Security In Maturity Model\n5. **DevSecOps**: Integrating security into DevOps pipelines\n\n## Benefits\n- Early identification of security issues\n- Reduced remediation costs\n- Improved security posture\n- Better regulatory compliance\n- Enhanced customer trust\n- Reduced security incidents\n\n## Implementation Strategies\n1. **Start Small**: Begin with high-risk applications\n2. **Automation**: Automate security controls where possible\n3. **Training**: Provide security training for developers\n4. **Tools**: Integrate security tools into development pipeline\n5. **Metrics**: Establish security metrics to measure progress\n6. **Culture**: Foster a security-conscious culture`,\n        references: [\n          { label: \"OWASP Secure SDLC Cheat Sheet\", url: \"https://cheatsheetseries.owasp.org/cheatsheets/Secure_SDLC_Cheat_Sheet.html\" },\n          { label: \"Microsoft Security Development Lifecycle\", url: \"https://www.microsoft.com/en-us/securityengineering/sdl/\" }\n        ]\n      }\n    ]\n  }\n];\n\nexport function KnowledgeBase() {\n  const [open, setOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"browse\");\n  const [activeArticle, setActiveArticle] = useState<KnowledgeArticle | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchResults, setSearchResults] = useState<KnowledgeArticle[]>([]);\n\n  const handleSearch = () => {\n    if (!searchQuery.trim()) {\n      setSearchResults([]);\n      return;\n    }\n\n    const query = searchQuery.toLowerCase();\n    const results: KnowledgeArticle[] = [];\n\n    knowledgeCategories.forEach(category => {\n      category.articles.forEach(article => {\n        if (\n          article.title.toLowerCase().includes(query) ||\n          article.content.toLowerCase().includes(query) ||\n          article.tags.some(tag => tag.toLowerCase().includes(query))\n        ) {\n          results.push(article);\n        }\n      });\n    });\n\n    setSearchResults(results);\n  };\n\n  const openArticle = (article: KnowledgeArticle) => {\n    setActiveArticle(article);\n    setActiveTab(\"article\");\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\" className=\"w-full border-matrix/30 hover:bg-matrix/10\">\n          <Book className=\"mr-2 h-4 w-4\" />\n          Knowledge Base\n          <ChevronRight className=\"ml-auto h-4 w-4\" />\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-4xl border-matrix/30 bg-black backdrop-blur-xl\">\n        <DialogHeader>\n          <DialogTitle className=\"font-mono text-matrix\">Security Knowledge Base</DialogTitle>\n          <DialogDescription className=\"text-gray-400\">\n            Learn about common vulnerabilities, security best practices, and mitigation techniques\n          </DialogDescription>\n        </DialogHeader>\n\n        <Tabs\n          defaultValue=\"browse\"\n          value={activeTab}\n          onValueChange={setActiveTab}\n          className=\"mt-4\"\n        >\n          <TabsList className=\"grid w-full grid-cols-3 bg-black/50 border border-matrix/20\">\n            <TabsTrigger value=\"browse\" className=\"font-mono text-sm\">Browse Categories</TabsTrigger>\n            <TabsTrigger value=\"search\" className=\"font-mono text-sm\">Search</TabsTrigger>\n            <TabsTrigger value=\"article\" className=\"font-mono text-sm\" disabled={!activeArticle}>\n              {activeArticle ? \"Article\" : \"View Article\"}\n            </TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"browse\" className=\"mt-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {knowledgeCategories.map((category) => (\n                <div \n                  key={category.id} \n                  className=\"border border-matrix/20 rounded-md p-4 hover:bg-matrix/5 transition-colors\"\n                >\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <div className=\"bg-matrix/10 p-2 rounded-md\">\n                      {category.icon}\n                    </div>\n                    <h3 className=\"font-mono text-white\">{category.name}</h3>\n                  </div>\n                  <p className=\"text-gray-400 text-sm mb-3\">{category.description}</p>\n                  <ul className=\"space-y-1\">\n                    {category.articles.map((article) => (\n                      <li key={article.id}>\n                        <Button \n                          variant=\"link\" \n                          className=\"p-0 h-auto text-matrix hover:underline text-left font-normal\"\n                          onClick={() => openArticle(article)}\n                        >\n                          {article.title}\n                        </Button>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              ))}\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"search\" className=\"mt-4\">\n            <div className=\"space-y-4\">\n              <div className=\"flex gap-2\">\n                <Input \n                  className=\"bg-black/50 border-matrix/30\"\n                  placeholder=\"Search for vulnerabilities, techniques, etc.\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  onKeyDown={(e) => e.key === \"Enter\" && handleSearch()}\n                />\n                <Button \n                  variant=\"default\" \n                  className=\"bg-matrix/20 hover:bg-matrix/40 text-matrix border-none\"\n                  onClick={handleSearch}\n                >\n                  <Search className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              \n              <div className=\"border border-matrix/20 rounded-md\">\n                {searchResults.length === 0 ? (\n                  <div className=\"p-8 text-center text-gray-500\">\n                    {searchQuery ? \"No results found. Try a different search term.\" : \"Enter a search term to find articles.\"}\n                  </div>\n                ) : (\n                  <div className=\"divide-y divide-matrix/10\">\n                    {searchResults.map((article) => (\n                      <div \n                        key={article.id} \n                        className=\"p-4 hover:bg-matrix/5 cursor-pointer\"\n                        onClick={() => openArticle(article)}\n                      >\n                        <h4 className=\"font-mono text-white mb-1\">{article.title}</h4>\n                        <div className=\"flex gap-1 flex-wrap mb-2\">\n                          {article.tags.map((tag) => (\n                            <Badge \n                              key={tag} \n                              variant=\"outline\" \n                              className=\"text-xs bg-black/50 border-matrix/20\"\n                            >\n                              {tag}\n                            </Badge>\n                          ))}\n                        </div>\n                        <p className=\"text-gray-400 text-sm truncate\">\n                          {article.content.split(\"\\n\")[2] || \"\"}\n                        </p>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"article\" className=\"mt-4\">\n            {activeArticle ? (\n              <div className=\"border border-matrix/20 rounded-md bg-black/30 p-5\">\n                <div className=\"flex justify-between items-start mb-4\">\n                  <div>\n                    <h2 className=\"text-xl font-mono text-matrix mb-2\">{activeArticle.title}</h2>\n                    <div className=\"flex gap-1 flex-wrap\">\n                      {activeArticle.tags.map((tag) => (\n                        <Badge \n                          key={tag} \n                          variant=\"outline\" \n                          className=\"text-xs bg-black/50 border-matrix/20\"\n                        >\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    className=\"border-matrix/30 text-xs\"\n                    onClick={() => setActiveTab(\"browse\")}\n                  >\n                    Back to Categories\n                  </Button>\n                </div>\n                \n                <ScrollArea className=\"h-[500px] pr-4\">\n                  <div className=\"prose prose-invert prose-headings:text-matrix prose-headings:font-mono max-w-none\">\n                    {activeArticle.content.split(\"\\n\").map((line, index) => {\n                      if (line.startsWith(\"# \")) {\n                        return <h1 key={index} className=\"text-2xl font-bold mt-0\">{line.substring(2)}</h1>;\n                      } else if (line.startsWith(\"## \")) {\n                        return <h2 key={index} className=\"text-xl font-bold mt-6\">{line.substring(3)}</h2>;\n                      } else if (line.startsWith(\"### \")) {\n                        return <h3 key={index} className=\"text-lg font-bold mt-4\">{line.substring(4)}</h3>;\n                      } else if (line.startsWith(\"- \")) {\n                        return <li key={index} className=\"ml-4\">{line.substring(2)}</li>;\n                      } else if (line.startsWith(\"1. \") || line.startsWith(\"2. \") || line.startsWith(\"3. \") || \n                                 line.startsWith(\"4. \") || line.startsWith(\"5. \") || line.startsWith(\"6. \")) {\n                        return <li key={index} className=\"ml-4\">{line.substring(3)}</li>;\n                      } else if (line === \"\") {\n                        return <p key={index}>&nbsp;</p>;\n                      } else if (line.startsWith(\"```\")) {\n                        return <pre key={index} className=\"bg-black/50 p-2 rounded border border-matrix/20 mt-2 mb-2 font-mono text-sm overflow-x-auto\">{line.substring(3)}</pre>;\n                      } else if (line.startsWith(\"`\") && line.endsWith(\"`\")) {\n                        return <code key={index} className=\"bg-black/50 px-1 rounded text-sm font-mono\">{line.substring(1, line.length - 1)}</code>;\n                      } else {\n                        return <p key={index} className=\"mb-2\">{line}</p>;\n                      }\n                    })}\n                    \n                    {activeArticle.references && (\n                      <div className=\"mt-8 pt-4 border-t border-matrix/20\">\n                        <h3 className=\"text-lg font-bold font-mono text-matrix\">References</h3>\n                        <ul className=\"space-y-2 mt-2\">\n                          {activeArticle.references.map((ref, index) => (\n                            <li key={index} className=\"flex items-center\">\n                              <ExternalLink className=\"h-3 w-3 mr-2 flex-shrink-0\" />\n                              <a \n                                href={ref.url} \n                                target=\"_blank\" \n                                rel=\"noopener noreferrer\"\n                                className=\"text-matrix hover:underline text-sm\"\n                              >\n                                {ref.label}\n                              </a>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n                  </div>\n                </ScrollArea>\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\">\n                <AlertTriangle className=\"h-8 w-8 mx-auto mb-2\" />\n                <p>No article selected. Browse or search for articles.</p>\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":27091},"client/src/components/matrix-background.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface MatrixBackgroundProps {\n  className?: string;\n}\n\nexport function MatrixBackground({ className }: MatrixBackgroundProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n    \n    const container = containerRef.current;\n    \n    // Clean up any existing columns before creating new ones\n    container.innerHTML = '';\n    \n    // Create matrix columns\n    const createMatrixAnimation = () => {\n      const width = window.innerWidth;\n      const numberOfColumns = Math.floor(width / 20);\n      \n      for (let i = 0; i < numberOfColumns; i++) {\n        const column = document.createElement('div');\n        column.className = 'matrix-code fixed font-mono text-sm text-matrix/70 pointer-events-none z-0 animate-matrix-fall';\n        column.style.left = `${i * 20}px`;\n        column.style.animationDelay = `${Math.random() * 5}s`;\n        column.style.opacity = `${Math.random() * 0.5 + 0.1}`;\n        column.textContent = generateRandomCharacters();\n        container.appendChild(column);\n      }\n    };\n    \n    // Generate random matrix-style characters\n    const generateRandomCharacters = () => {\n      const characters = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+-=[]{}|;:,./<>?';\n      let result = '';\n      const length = Math.floor(Math.random() * 10) + 15;\n      \n      for (let i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * characters.length));\n      }\n      \n      return result;\n    };\n    \n    // Create initial animation\n    createMatrixAnimation();\n    \n    // Recreate on window resize\n    const handleResize = () => {\n      container.innerHTML = '';\n      createMatrixAnimation();\n    };\n    \n    window.addEventListener('resize', handleResize);\n    \n    // Clean up event listener when component unmounts\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return (\n    <div \n      ref={containerRef} \n      className={cn(\"fixed top-0 left-0 w-full h-full z-0\", className)}\n      aria-hidden=\"true\"\n    />\n  );\n}\n","size_bytes":2177},"client/src/components/moderation-dashboard.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { \n  Shield, \n  Users, \n  AlertTriangle, \n  CheckCircle, \n  Clock, \n  MessageSquare, \n  Eye,\n  Edit,\n  UserCheck,\n  Filter,\n  Search,\n  Bell,\n  Activity,\n  TrendingUp,\n  FileText,\n  Calendar,\n  Tag,\n  ChevronRight,\n  AlertCircle,\n  User,\n  Settings\n} from \"lucide-react\";\n\ninterface ModerationStats {\n  total: number;\n  pending: number;\n  inReview: number;\n  approved: number;\n  rejected: number;\n  criticalPriority: number;\n  highPriority: number;\n  avgReviewTime: number;\n}\n\ninterface ModerationReview {\n  id: number;\n  submissionId: number;\n  submissionTitle: string;\n  submissionDescription: string;\n  submissionType: string;\n  submissionSeverity: string;\n  submissionStatus: string;\n  submissionUserUsername: string;\n  reviewerId: number;\n  reviewerUsername: string;\n  assignedBy: number;\n  assignedByUsername: string;\n  status: string;\n  priority: string;\n  category: string;\n  severity: string;\n  decision: string;\n  decisionReason: string;\n  internalNotes: string;\n  publicResponse: string;\n  estimatedReward: number;\n  actualReward: number;\n  reviewStarted: string;\n  reviewCompleted: string;\n  dueDate: string;\n  tags: string[];\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface ModerationComment {\n  id: number;\n  reviewId: number;\n  authorId: number;\n  authorUsername: string;\n  content: string;\n  commentType: string;\n  isResolved: boolean;\n  resolvedBy: number;\n  resolvedAt: string;\n  mentions: number[];\n  attachments: any[];\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface TeamMember {\n  id: number;\n  userId: number;\n  username: string;\n  role: string;\n  department: string;\n  specializations: string[];\n  maxAssignments: number;\n  currentAssignments: number;\n  isActive: boolean;\n}\n\nfunction ModerationDashboard() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  \n  const [selectedTab, setSelectedTab] = useState(\"overview\");\n  const [selectedReview, setSelectedReview] = useState<ModerationReview | null>(null);\n  const [isAssignDialogOpen, setIsAssignDialogOpen] = useState(false);\n  const [isCommentDialogOpen, setIsCommentDialogOpen] = useState(false);\n  const [filters, setFilters] = useState({\n    status: \"\",\n    priority: \"\",\n    category: \"\",\n    search: \"\"\n  });\n  const [newComment, setNewComment] = useState(\"\");\n  const [reviewUpdate, setReviewUpdate] = useState({\n    status: \"\",\n    priority: \"\",\n    decision: \"\",\n    decisionReason: \"\",\n    internalNotes: \"\",\n    publicResponse: \"\",\n    estimatedReward: 0\n  });\n\n  // Fetch moderation stats\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/moderation/stats\"],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", \"/api/moderation/stats\");\n      return res.json() as Promise<ModerationStats>;\n    }\n  });\n\n  // Fetch moderation reviews\n  const { data: reviews = [], isLoading: reviewsLoading } = useQuery({\n    queryKey: [\"/api/moderation/reviews\", filters],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (filters.status) params.append(\"status\", filters.status);\n      if (filters.priority) params.append(\"priority\", filters.priority);\n      if (filters.category) params.append(\"category\", filters.category);\n      \n      const res = await apiRequest(\"GET\", `/api/moderation/reviews?${params}`);\n      return res.json() as Promise<ModerationReview[]>;\n    }\n  });\n\n  // Fetch team members\n  const { data: teamMembers = [], isLoading: teamLoading } = useQuery({\n    queryKey: [\"/api/moderation/team\"],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", \"/api/moderation/team\");\n      return res.json() as Promise<TeamMember[]>;\n    }\n  });\n\n  // Fetch available reviewers\n  const { data: availableReviewers = [] } = useQuery({\n    queryKey: [\"/api/moderation/reviewers\"],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", \"/api/moderation/reviewers\");\n      return res.json() as Promise<TeamMember[]>;\n    }\n  });\n\n  // Fetch comments for selected review\n  const { data: comments = [] } = useQuery({\n    queryKey: [\"/api/moderation/reviews\", selectedReview?.id, \"comments\"],\n    queryFn: async () => {\n      if (!selectedReview) return [];\n      const res = await apiRequest(\"GET\", `/api/moderation/reviews/${selectedReview.id}/comments`);\n      return res.json() as Promise<ModerationComment[]>;\n    },\n    enabled: !!selectedReview\n  });\n\n  // Fetch notifications\n  const { data: notifications = [] } = useQuery({\n    queryKey: [\"/api/moderation/notifications\"],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", \"/api/moderation/notifications\");\n      return res.json();\n    }\n  });\n\n  // Update review mutation\n  const updateReviewMutation = useMutation({\n    mutationFn: async (data: { id: number; updates: any }) => {\n      const res = await apiRequest(\"PUT\", `/api/moderation/reviews/${data.id}`, data.updates);\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Review updated\",\n        description: \"The review has been updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/moderation/reviews\"] });\n      setSelectedReview(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update review\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Assign review mutation\n  const assignReviewMutation = useMutation({\n    mutationFn: async (data: { reviewId: number; reviewerId: number }) => {\n      const res = await apiRequest(\"POST\", `/api/moderation/reviews/${data.reviewId}/assign`, {\n        reviewerId: data.reviewerId\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Review assigned\",\n        description: \"The review has been assigned successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/moderation/reviews\"] });\n      setIsAssignDialogOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to assign review\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Add comment mutation\n  const addCommentMutation = useMutation({\n    mutationFn: async (data: { reviewId: number; content: string; commentType: string }) => {\n      const res = await apiRequest(\"POST\", `/api/moderation/reviews/${data.reviewId}/comments`, data);\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Comment added\",\n        description: \"Your comment has been added successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/moderation/reviews\", selectedReview?.id, \"comments\"] });\n      setNewComment(\"\");\n      setIsCommentDialogOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add comment\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\": return \"bg-yellow-500/20 text-yellow-500\";\n      case \"assigned\": return \"bg-blue-500/20 text-blue-500\";\n      case \"in_review\": return \"bg-purple-500/20 text-purple-500\";\n      case \"approved\": return \"bg-green-500/20 text-green-500\";\n      case \"rejected\": return \"bg-red-500/20 text-red-500\";\n      case \"needs_info\": return \"bg-orange-500/20 text-orange-500\";\n      default: return \"bg-gray-500/20 text-gray-500\";\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"low\": return \"bg-green-500/20 text-green-500\";\n      case \"medium\": return \"bg-yellow-500/20 text-yellow-500\";\n      case \"high\": return \"bg-orange-500/20 text-orange-500\";\n      case \"critical\": return \"bg-red-500/20 text-red-500\";\n      default: return \"bg-gray-500/20 text-gray-500\";\n    }\n  };\n\n  const handleUpdateReview = () => {\n    if (!selectedReview) return;\n    \n    updateReviewMutation.mutate({\n      id: selectedReview.id,\n      updates: reviewUpdate\n    });\n  };\n\n  const handleAssignReview = (reviewerId: number) => {\n    if (!selectedReview) return;\n    \n    assignReviewMutation.mutate({\n      reviewId: selectedReview.id,\n      reviewerId\n    });\n  };\n\n  const handleAddComment = () => {\n    if (!selectedReview || !newComment.trim()) return;\n    \n    addCommentMutation.mutate({\n      reviewId: selectedReview.id,\n      content: newComment,\n      commentType: \"internal\"\n    });\n  };\n\n  const filteredReviews = reviews.filter(review => {\n    if (filters.search && !review.submissionTitle.toLowerCase().includes(filters.search.toLowerCase())) {\n      return false;\n    }\n    return true;\n  });\n\n  return (\n    <div className=\"min-h-screen bg-terminal text-matrix\">\n      <div className=\"container mx-auto p-6\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">Moderation Dashboard</h1>\n          <p className=\"text-matrix/80\">\n            Review and manage vulnerability submissions\n          </p>\n        </div>\n\n        <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"reviews\">Reviews</TabsTrigger>\n            <TabsTrigger value=\"team\">Team</TabsTrigger>\n            <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n            <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <Card className=\"terminal-card\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Reviews</CardTitle>\n                  <FileText className=\"h-4 w-4 text-matrix\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{stats?.total || 0}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    All time reviews\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"terminal-card\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n                  <Clock className=\"h-4 w-4 text-matrix\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{stats?.pending || 0}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Awaiting review\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"terminal-card\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">In Review</CardTitle>\n                  <Activity className=\"h-4 w-4 text-matrix\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{stats?.inReview || 0}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Currently being reviewed\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"terminal-card\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Critical Priority</CardTitle>\n                  <AlertTriangle className=\"h-4 w-4 text-matrix\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{stats?.criticalPriority || 0}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Need immediate attention\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card className=\"terminal-card\">\n                <CardHeader>\n                  <CardTitle>Recent Reviews</CardTitle>\n                  <CardDescription>Latest vulnerability reviews</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {filteredReviews.slice(0, 5).map((review) => (\n                      <div key={review.id} className=\"flex items-center justify-between p-3 rounded-lg bg-terminal/50 border border-matrix/20\">\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium\">{review.submissionTitle}</p>\n                          <div className=\"flex items-center gap-2 mt-1\">\n                            <Badge className={`text-xs ${getStatusColor(review.status)}`}>\n                              {review.status}\n                            </Badge>\n                            <Badge className={`text-xs ${getPriorityColor(review.priority)}`}>\n                              {review.priority}\n                            </Badge>\n                          </div>\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setSelectedReview(review)}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"terminal-card\">\n                <CardHeader>\n                  <CardTitle>Team Performance</CardTitle>\n                  <CardDescription>Current team workload</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {teamMembers.slice(0, 5).map((member) => (\n                      <div key={member.id} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <User className=\"h-4 w-4 text-matrix\" />\n                          <span className=\"text-sm\">{member.username}</span>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {member.role}\n                          </Badge>\n                        </div>\n                        <div className=\"text-sm\">\n                          {member.currentAssignments}/{member.maxAssignments}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"reviews\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-semibold\">Vulnerability Reviews</h2>\n              <div className=\"flex gap-2\">\n                <div className=\"flex items-center gap-2\">\n                  <Search className=\"h-4 w-4 text-matrix\" />\n                  <Input\n                    placeholder=\"Search reviews...\"\n                    value={filters.search}\n                    onChange={(e) => setFilters({ ...filters, search: e.target.value })}\n                    className=\"w-64\"\n                  />\n                </div>\n                <Select value={filters.status} onValueChange={(value) => setFilters({ ...filters, status: value })}>\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue placeholder=\"Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"\">All Status</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"assigned\">Assigned</SelectItem>\n                    <SelectItem value=\"in_review\">In Review</SelectItem>\n                    <SelectItem value=\"approved\">Approved</SelectItem>\n                    <SelectItem value=\"rejected\">Rejected</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Select value={filters.priority} onValueChange={(value) => setFilters({ ...filters, priority: value })}>\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue placeholder=\"Priority\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"\">All Priority</SelectItem>\n                    <SelectItem value=\"low\">Low</SelectItem>\n                    <SelectItem value=\"medium\">Medium</SelectItem>\n                    <SelectItem value=\"high\">High</SelectItem>\n                    <SelectItem value=\"critical\">Critical</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 gap-4\">\n              {reviewsLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-matrix mx-auto\"></div>\n                  <p className=\"mt-2 text-matrix/80\">Loading reviews...</p>\n                </div>\n              ) : filteredReviews.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <AlertTriangle className=\"h-12 w-12 text-matrix/50 mx-auto mb-4\" />\n                  <p className=\"text-matrix/80\">No reviews found</p>\n                </div>\n              ) : (\n                filteredReviews.map((review) => (\n                  <Card key={review.id} className=\"terminal-card\">\n                    <CardContent className=\"pt-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-semibold text-lg\">{review.submissionTitle}</h3>\n                          <p className=\"text-sm text-matrix/80 mt-1\">{review.submissionDescription}</p>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Badge className={`${getStatusColor(review.status)}`}>\n                            {review.status}\n                          </Badge>\n                          <Badge className={`${getPriorityColor(review.priority)}`}>\n                            {review.priority}\n                          </Badge>\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                        <div>\n                          <span className=\"text-matrix/60\">Researcher:</span>\n                          <p className=\"font-medium\">{review.submissionUserUsername}</p>\n                        </div>\n                        <div>\n                          <span className=\"text-matrix/60\">Type:</span>\n                          <p className=\"font-medium\">{review.submissionType}</p>\n                        </div>\n                        <div>\n                          <span className=\"text-matrix/60\">Severity:</span>\n                          <p className=\"font-medium\">{review.submissionSeverity}</p>\n                        </div>\n                        <div>\n                          <span className=\"text-matrix/60\">Reviewer:</span>\n                          <p className=\"font-medium\">{review.reviewerUsername || \"Unassigned\"}</p>\n                        </div>\n                      </div>\n\n                      <div className=\"mt-4 flex gap-2\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => setSelectedReview(review)}\n                        >\n                          <Eye className=\"h-4 w-4 mr-2\" />\n                          View Details\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => {\n                            setSelectedReview(review);\n                            setIsAssignDialogOpen(true);\n                          }}\n                        >\n                          <UserCheck className=\"h-4 w-4 mr-2\" />\n                          Assign\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => {\n                            setSelectedReview(review);\n                            setIsCommentDialogOpen(true);\n                          }}\n                        >\n                          <MessageSquare className=\"h-4 w-4 mr-2\" />\n                          Comment\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"team\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-semibold\">Moderation Team</h2>\n              <Button className=\"bg-matrix/20 border-matrix/30 hover:bg-matrix/30\">\n                <Users className=\"h-4 w-4 mr-2\" />\n                Add Member\n              </Button>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {teamMembers.map((member) => (\n                <Card key={member.id} className=\"terminal-card\">\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"text-lg\">{member.username}</CardTitle>\n                      <Badge className={member.isActive ? \"bg-green-500/20 text-green-500\" : \"bg-red-500/20 text-red-500\"}>\n                        {member.isActive ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </div>\n                    <CardDescription>{member.role} • {member.department}</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Current Load:</span>\n                        <span className=\"font-medium text-matrix\">\n                          {member.currentAssignments}/{member.maxAssignments}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Specializations:</span>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {member.specializations.map((spec) => (\n                            <Badge key={spec} variant=\"outline\" className=\"text-xs\">\n                              {spec}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"mt-4 flex gap-2\">\n                      <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                        <Settings className=\"h-4 w-4 mr-2\" />\n                        Configure\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"notifications\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-semibold\">Notifications</h2>\n              <Button variant=\"outline\" size=\"sm\">\n                <Bell className=\"h-4 w-4 mr-2\" />\n                Mark All Read\n              </Button>\n            </div>\n\n            <div className=\"space-y-4\">\n              {notifications.map((notification: any) => (\n                <Card key={notification.id} className=\"terminal-card\">\n                  <CardContent className=\"pt-6\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold\">{notification.title}</h3>\n                        <p className=\"text-sm text-matrix/80 mt-1\">{notification.message}</p>\n                        <p className=\"text-xs text-matrix/60 mt-2\">\n                          {new Date(notification.createdAt).toLocaleString()}\n                        </p>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Badge className={`${getPriorityColor(notification.priority)}`}>\n                          {notification.priority}\n                        </Badge>\n                        {!notification.isRead && (\n                          <div className=\"w-2 h-2 bg-matrix rounded-full mt-2\"></div>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card className=\"terminal-card\">\n                <CardHeader>\n                  <CardTitle>Review Statistics</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">Average Review Time</span>\n                      <span className=\"text-sm font-medium text-matrix\">\n                        {stats?.avgReviewTime ? `${stats.avgReviewTime.toFixed(1)}h` : \"N/A\"}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">Approval Rate</span>\n                      <span className=\"text-sm font-medium text-matrix\">\n                        {stats?.total ? `${((stats.approved / stats.total) * 100).toFixed(1)}%` : \"0%\"}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">Critical Issues</span>\n                      <span className=\"text-sm font-medium text-matrix\">{stats?.criticalPriority || 0}</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"terminal-card\">\n                <CardHeader>\n                  <CardTitle>Team Performance</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">Active Reviewers</span>\n                      <span className=\"text-sm font-medium text-matrix\">\n                        {teamMembers.filter(m => m.isActive).length}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">Average Workload</span>\n                      <span className=\"text-sm font-medium text-matrix\">\n                        {teamMembers.length > 0 ? \n                          (teamMembers.reduce((sum, m) => sum + m.currentAssignments, 0) / teamMembers.length).toFixed(1) : \n                          \"0\"\n                        }\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">Total Capacity</span>\n                      <span className=\"text-sm font-medium text-matrix\">\n                        {teamMembers.reduce((sum, m) => sum + m.maxAssignments, 0)}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        {/* Review Details Dialog */}\n        {selectedReview && (\n          <Dialog open={!!selectedReview} onOpenChange={() => setSelectedReview(null)}>\n            <DialogContent className=\"terminal-card max-w-4xl\">\n              <DialogHeader>\n                <DialogTitle>Review Details</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-matrix/80\">Title</label>\n                    <p className=\"text-sm\">{selectedReview.submissionTitle}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-matrix/80\">Status</label>\n                    <Select \n                      value={reviewUpdate.status || selectedReview.status} \n                      onValueChange={(value) => setReviewUpdate({...reviewUpdate, status: value})}\n                    >\n                      <SelectTrigger className=\"w-full\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"pending\">Pending</SelectItem>\n                        <SelectItem value=\"assigned\">Assigned</SelectItem>\n                        <SelectItem value=\"in_review\">In Review</SelectItem>\n                        <SelectItem value=\"approved\">Approved</SelectItem>\n                        <SelectItem value=\"rejected\">Rejected</SelectItem>\n                        <SelectItem value=\"needs_info\">Needs Info</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-matrix/80\">Priority</label>\n                    <Select \n                      value={reviewUpdate.priority || selectedReview.priority} \n                      onValueChange={(value) => setReviewUpdate({...reviewUpdate, priority: value})}\n                    >\n                      <SelectTrigger className=\"w-full\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Low</SelectItem>\n                        <SelectItem value=\"medium\">Medium</SelectItem>\n                        <SelectItem value=\"high\">High</SelectItem>\n                        <SelectItem value=\"critical\">Critical</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-matrix/80\">Decision</label>\n                    <Select \n                      value={reviewUpdate.decision || selectedReview.decision} \n                      onValueChange={(value) => setReviewUpdate({...reviewUpdate, decision: value})}\n                    >\n                      <SelectTrigger className=\"w-full\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"accept\">Accept</SelectItem>\n                        <SelectItem value=\"reject\">Reject</SelectItem>\n                        <SelectItem value=\"duplicate\">Duplicate</SelectItem>\n                        <SelectItem value=\"invalid\">Invalid</SelectItem>\n                        <SelectItem value=\"needs_clarification\">Needs Clarification</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                \n                <div>\n                  <label className=\"text-sm font-medium text-matrix/80\">Description</label>\n                  <p className=\"text-sm mt-1\">{selectedReview.submissionDescription}</p>\n                </div>\n                \n                <div>\n                  <label className=\"text-sm font-medium text-matrix/80\">Internal Notes</label>\n                  <Textarea \n                    value={reviewUpdate.internalNotes || selectedReview.internalNotes || \"\"}\n                    onChange={(e) => setReviewUpdate({...reviewUpdate, internalNotes: e.target.value})}\n                    placeholder=\"Add internal notes...\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"text-sm font-medium text-matrix/80\">Public Response</label>\n                  <Textarea \n                    value={reviewUpdate.publicResponse || selectedReview.publicResponse || \"\"}\n                    onChange={(e) => setReviewUpdate({...reviewUpdate, publicResponse: e.target.value})}\n                    placeholder=\"Public response to researcher...\"\n                  />\n                </div>\n                \n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\" onClick={() => setSelectedReview(null)}>\n                    Cancel\n                  </Button>\n                  <Button \n                    onClick={handleUpdateReview}\n                    disabled={updateReviewMutation.isPending}\n                    className=\"bg-matrix/20 border-matrix/30 hover:bg-matrix/30\"\n                  >\n                    {updateReviewMutation.isPending ? \"Updating...\" : \"Update Review\"}\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        )}\n\n        {/* Assign Review Dialog */}\n        <Dialog open={isAssignDialogOpen} onOpenChange={setIsAssignDialogOpen}>\n          <DialogContent className=\"terminal-card\">\n            <DialogHeader>\n              <DialogTitle>Assign Review</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium text-matrix/80\">Select Reviewer</label>\n                <div className=\"grid grid-cols-1 gap-2 mt-2\">\n                  {availableReviewers.map((reviewer) => (\n                    <Button\n                      key={reviewer.id}\n                      variant=\"outline\"\n                      className=\"justify-start\"\n                      onClick={() => handleAssignReview(reviewer.userId)}\n                    >\n                      <User className=\"h-4 w-4 mr-2\" />\n                      {reviewer.username} ({reviewer.currentAssignments}/{reviewer.maxAssignments})\n                    </Button>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Comment Dialog */}\n        <Dialog open={isCommentDialogOpen} onOpenChange={setIsCommentDialogOpen}>\n          <DialogContent className=\"terminal-card\">\n            <DialogHeader>\n              <DialogTitle>Add Comment</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium text-matrix/80\">Comment</label>\n                <Textarea \n                  value={newComment}\n                  onChange={(e) => setNewComment(e.target.value)}\n                  placeholder=\"Add your comment...\"\n                  rows={4}\n                />\n              </div>\n              <div className=\"flex justify-end gap-2\">\n                <Button variant=\"outline\" onClick={() => setIsCommentDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleAddComment}\n                  disabled={addCommentMutation.isPending || !newComment.trim()}\n                  className=\"bg-matrix/20 border-matrix/30 hover:bg-matrix/30\"\n                >\n                  {addCommentMutation.isPending ? \"Adding...\" : \"Add Comment\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n\nexport default ModerationDashboard;\n","size_bytes":37289},"client/src/components/notifications.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Bell, BellOff, X, ExternalLink } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { cn } from \"@/lib/utils\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\n\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@/components/ui/sheet\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\n// Types for notifications\nexport interface Notification {\n  id: number;\n  type: string;\n  message: string;\n  link?: string;\n  isRead: boolean;\n  createdAt: string | Date;\n}\n\nexport function NotificationsIndicator() {\n  const { user } = useAuth();\n  const [open, setOpen] = useState(false);\n  const [unreadCount, setUnreadCount] = useState(0);\n\n  // Query for notifications\n  const { data: notifications = [], isLoading } = useQuery<Notification[]>({\n    queryKey: [\"/api/notifications\"],\n    enabled: !!user,\n    refetchInterval: 30000, // Poll every 30 seconds for new notifications\n  });\n\n  // Mark notification as read\n  const markAsReadMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest(\"POST\", `/api/notifications/${id}/read`);\n    },\n    onSuccess: () => {\n      // Invalidate and refetch notifications\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n  });\n\n  // Calculate unread count whenever notifications change\n  useEffect(() => {\n    if (notifications) {\n      setUnreadCount(notifications.filter(n => !n.isRead).length);\n    }\n  }, [notifications]);\n\n  const handleMarkAllAsRead = async () => {\n    // This would be a batch operation on the backend\n    const unreadNotifications = notifications.filter(n => !n.isRead);\n    \n    // Using Promise.all to mark all unread notifications as read in parallel\n    await Promise.all(\n      unreadNotifications.map(notification => \n        markAsReadMutation.mutate(notification.id)\n      )\n    );\n  };\n\n  const handleNotificationClick = (notification: Notification) => {\n    if (!notification.isRead) {\n      markAsReadMutation.mutate(notification.id);\n    }\n  };\n\n  // Format relative time (like \"2 hours ago\")\n  const getRelativeTime = (date: string | Date) => {\n    const now = new Date();\n    const notificationDate = new Date(date);\n    const diffInSeconds = Math.floor((now.getTime() - notificationDate.getTime()) / 1000);\n    \n    if (diffInSeconds < 60) return `${diffInSeconds} seconds ago`;\n    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;\n    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;\n    if (diffInSeconds < 604800) return `${Math.floor(diffInSeconds / 86400)} days ago`;\n    return notificationDate.toLocaleDateString();\n  };\n\n  // For mobile: full sheet\n  const notificationSheet = (\n    <Sheet open={open} onOpenChange={setOpen}>\n      <SheetTrigger asChild>\n        <Button \n          variant=\"ghost\" \n          size=\"icon\" \n          className=\"relative md:hidden\" \n          aria-label=\"Notifications\"\n        >\n          <Bell className=\"h-5 w-5\" />\n          {unreadCount > 0 && (\n            <Badge \n              className=\"absolute -top-1 -right-1 px-1 min-w-[18px] h-[18px] text-xs bg-red-500 border-none\"\n            >\n              {unreadCount}\n            </Badge>\n          )}\n        </Button>\n      </SheetTrigger>\n      <SheetContent className=\"w-full sm:max-w-sm border-matrix/30 bg-black/90 backdrop-blur-xl\">\n        <SheetHeader className=\"flex flex-row items-center justify-between mb-4\">\n          <SheetTitle className=\"text-lg font-mono text-matrix\">Notifications</SheetTitle>\n          {unreadCount > 0 && (\n            <Button \n              variant=\"outline\" \n              className=\"text-xs border-matrix/30 text-matrix\" \n              size=\"sm\"\n              onClick={handleMarkAllAsRead}\n            >\n              Mark all as read\n            </Button>\n          )}\n        </SheetHeader>\n        \n        <div className=\"space-y-4 mt-4 max-h-[calc(100vh-10rem)] overflow-y-auto pr-2\">\n          {isLoading ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"w-6 h-6 border-2 border-matrix/50 border-t-matrix rounded-full animate-spin\" />\n            </div>\n          ) : notifications.length === 0 ? (\n            <div className=\"text-center py-10 text-gray-500 flex flex-col items-center\">\n              <BellOff className=\"h-8 w-8 mb-2 text-gray-400\" />\n              <p className=\"font-mono\">No notifications yet</p>\n            </div>\n          ) : (\n            notifications.map((notification) => (\n              <div \n                key={notification.id}\n                className={cn(\n                  \"relative p-3 border rounded-md transition-colors\",\n                  notification.isRead \n                    ? \"border-gray-800 bg-black/30\" \n                    : \"border-matrix/30 bg-matrix/5\"\n                )}\n              >\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <p className={cn(\n                      \"text-sm mb-1\",\n                      !notification.isRead && \"text-matrix font-medium\"\n                    )}>\n                      {notification.message}\n                    </p>\n                    <p className=\"text-xs text-gray-500 font-mono\">\n                      {getRelativeTime(notification.createdAt)}\n                    </p>\n                  </div>\n                  \n                  {!notification.isRead && (\n                    <TooltipProvider>\n                      <Tooltip>\n                        <TooltipTrigger asChild>\n                          <Button \n                            size=\"icon\" \n                            variant=\"ghost\"\n                            className=\"h-6 w-6\"\n                            onClick={() => markAsReadMutation.mutate(notification.id)}\n                          >\n                            <X className=\"h-3 w-3\" />\n                          </Button>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                          <p>Mark as read</p>\n                        </TooltipContent>\n                      </Tooltip>\n                    </TooltipProvider>\n                  )}\n                </div>\n                \n                {notification.link && (\n                  <Link \n                    to={notification.link}\n                    className=\"text-xs flex items-center mt-2 text-matrix hover:underline\"\n                    onClick={() => handleNotificationClick(notification)}\n                  >\n                    View details <ExternalLink className=\"ml-1 h-3 w-3\" />\n                  </Link>\n                )}\n              </div>\n            ))\n          )}\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n\n  // For desktop: dropdown\n  const notificationDropdown = (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"ghost\" \n          size=\"icon\" \n          className=\"relative hidden md:flex\" \n          aria-label=\"Notifications\"\n        >\n          <Bell className=\"h-5 w-5\" />\n          {unreadCount > 0 && (\n            <Badge \n              className=\"absolute -top-1 -right-1 px-1 min-w-[18px] h-[18px] text-xs bg-red-500 border-none\"\n            >\n              {unreadCount}\n            </Badge>\n          )}\n        </Button>\n      </DropdownMenuTrigger>\n      \n      <DropdownMenuContent align=\"end\" className=\"w-80 border-matrix/30 bg-black/90 backdrop-blur-xl\">\n        <DropdownMenuLabel className=\"flex justify-between items-center\">\n          <span className=\"font-mono text-matrix\">Notifications</span>\n          {unreadCount > 0 && (\n            <Button \n              variant=\"outline\" \n              className=\"text-xs border-matrix/30 text-matrix\" \n              size=\"sm\"\n              onClick={handleMarkAllAsRead}\n            >\n              Mark all as read\n            </Button>\n          )}\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        \n        {isLoading ? (\n          <div className=\"flex justify-center py-8\">\n            <div className=\"w-6 h-6 border-2 border-matrix/50 border-t-matrix rounded-full animate-spin\" />\n          </div>\n        ) : notifications.length === 0 ? (\n          <div className=\"text-center py-10 text-gray-500 flex flex-col items-center\">\n            <BellOff className=\"h-8 w-8 mb-2 text-gray-400\" />\n            <p className=\"font-mono\">No notifications yet</p>\n          </div>\n        ) : (\n          <div className=\"max-h-[400px] overflow-y-auto\">\n            {notifications.map((notification) => (\n              <DropdownMenuItem \n                key={notification.id}\n                className={cn(\n                  \"flex flex-col items-start p-3 cursor-default\",\n                  !notification.isRead && \"bg-matrix/5\"\n                )}\n              >\n                <div className=\"flex justify-between items-start w-full\">\n                  <p className={cn(\n                    \"text-sm mb-1\",\n                    !notification.isRead && \"text-matrix font-medium\"\n                  )}>\n                    {notification.message}\n                  </p>\n                  \n                  {!notification.isRead && (\n                    <Button \n                      size=\"icon\" \n                      variant=\"ghost\"\n                      className=\"h-6 w-6 -mt-1 -mr-1\"\n                      onClick={() => markAsReadMutation.mutate(notification.id)}\n                    >\n                      <X className=\"h-3 w-3\" />\n                    </Button>\n                  )}\n                </div>\n                \n                <div className=\"flex justify-between items-center w-full mt-1\">\n                  <p className=\"text-xs text-gray-500 font-mono\">\n                    {getRelativeTime(notification.createdAt)}\n                  </p>\n                  \n                  {notification.link && (\n                    <Link \n                      to={notification.link}\n                      className=\"text-xs flex items-center text-matrix hover:underline\"\n                      onClick={() => handleNotificationClick(notification)}\n                    >\n                      View details <ExternalLink className=\"ml-1 h-3 w-3\" />\n                    </Link>\n                  )}\n                </div>\n              </DropdownMenuItem>\n            ))}\n          </div>\n        )}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n\n  return (\n    <>\n      {notificationSheet}\n      {notificationDropdown}\n    </>\n  );\n}","size_bytes":11019},"client/src/components/public-chat.tsx":{"content":"\nimport { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Send, Trash2, MessageCircle, Megaphone, Clock, Shield, User, Building } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { cn } from \"@/lib/utils\";\n\ninterface PublicMessage {\n  id: number;\n  content: string;\n  messageType: string;\n  isEdited: boolean;\n  editedAt: string | null;\n  createdAt: string;\n  userId: number;\n  username: string;\n  userType: string;\n  companyName: string | null;\n  rank: string;\n}\n\nexport default function PublicChat() {\n  const { user } = useAuth();\n  const [message, setMessage] = useState(\"\");\n  const [messageType, setMessageType] = useState<\"message\" | \"announcement\">(\"message\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Query for messages with real-time polling\n  const { data: messages = [], isLoading } = useQuery<PublicMessage[]>({\n    queryKey: [\"/api/public-chat\"],\n    refetchInterval: 3000, // Poll every 3 seconds for real-time updates\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (data: { content: string; messageType: string }) => {\n      return await apiRequest(\"POST\", \"/api/public-chat\", data);\n    },\n    onSuccess: () => {\n      setMessage(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/public-chat\"] });\n    },\n  });\n\n  // Delete message mutation\n  const deleteMessageMutation = useMutation({\n    mutationFn: async (messageId: number) => {\n      return await apiRequest(\"DELETE\", `/api/public-chat/${messageId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/public-chat\"] });\n    },\n  });\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!message.trim()) return;\n\n    sendMessageMutation.mutate({\n      content: message.trim(),\n      messageType\n    });\n  };\n\n  const handleDeleteMessage = (messageId: number) => {\n    deleteMessageMutation.mutate(messageId);\n  };\n\n  const formatTimestamp = (timestamp: string) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\n    \n    if (diffInSeconds < 60) return `${diffInSeconds}s ago`;\n    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;\n    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;\n    return date.toLocaleDateString();\n  };\n\n  const getUserDisplayName = (msg: PublicMessage) => {\n    if (msg.userType === \"company\" && msg.companyName) {\n      return msg.companyName;\n    }\n    return msg.username;\n  };\n\n  const getUserBadge = (msg: PublicMessage) => {\n    if (msg.userType === \"company\") {\n      return (\n        <Badge className=\"bg-electric-blue/20 text-electric-blue border-electric-blue/30 text-xs\">\n          <Building className=\"h-3 w-3 mr-1\" />\n          Company\n        </Badge>\n      );\n    }\n    \n    return (\n      <Badge className=\"bg-matrix/20 text-matrix border-matrix/30 text-xs\">\n        <Shield className=\"h-3 w-3 mr-1\" />\n        {msg.rank || \"Hacker\"}\n      </Badge>\n    );\n  };\n\n  return (\n    <Card className=\"h-full flex flex-col border-matrix/30 bg-terminal/50 backdrop-blur-sm\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-lg font-mono text-matrix flex items-center\">\n          <MessageCircle className=\"h-5 w-5 mr-2\" />\n          Public Chat\n          <Badge className=\"ml-2 bg-surface text-matrix text-xs\">\n            {messages.length} messages\n          </Badge>\n        </CardTitle>\n      </CardHeader>\n\n      <CardContent className=\"flex-1 flex flex-col space-y-4 p-4\">\n        {/* Messages Container */}\n        <div className=\"flex-1 overflow-y-auto space-y-3 max-h-96 pr-2\">\n          {isLoading ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"w-6 h-6 border-2 border-matrix/50 border-t-matrix rounded-full animate-spin\" />\n            </div>\n          ) : messages.length === 0 ? (\n            <div className=\"text-center py-8 text-dim-gray\">\n              <MessageCircle className=\"h-8 w-8 mx-auto mb-2\" />\n              <p className=\"font-mono\">No messages yet. Start the conversation!</p>\n            </div>\n          ) : (\n            messages.map((msg) => (\n              <div\n                key={msg.id}\n                className={cn(\n                  \"p-3 rounded-lg border transition-all duration-200\",\n                  msg.messageType === \"announcement\" \n                    ? \"border-warning-yellow/30 bg-warning-yellow/5\" \n                    : \"border-matrix/20 bg-surface/50\"\n                )}\n              >\n                <div className=\"flex justify-between items-start mb-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    {msg.messageType === \"announcement\" && (\n                      <Megaphone className=\"h-4 w-4 text-warning-yellow\" />\n                    )}\n                    <span className=\"font-mono text-sm text-light-gray\">\n                      {getUserDisplayName(msg)}\n                    </span>\n                    {getUserBadge(msg)}\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"flex items-center text-dim-gray text-xs font-mono\">\n                      <Clock className=\"h-3 w-3 mr-1\" />\n                      {formatTimestamp(msg.createdAt)}\n                    </div>\n                    \n                    {msg.userId === user?.id && (\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className=\"h-6 w-6 text-dim-gray hover:text-alert-red\"\n                        onClick={() => handleDeleteMessage(msg.id)}\n                      >\n                        <Trash2 className=\"h-3 w-3\" />\n                      </Button>\n                    )}\n                  </div>\n                </div>\n                \n                <p className=\"text-light-gray text-sm font-mono whitespace-pre-wrap\">\n                  {msg.content}\n                </p>\n                \n                {msg.isEdited && (\n                  <p className=\"text-dim-gray text-xs font-mono mt-1 italic\">\n                    (edited)\n                  </p>\n                )}\n              </div>\n            ))\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n\n        {/* Message Input */}\n        <form onSubmit={handleSendMessage} className=\"space-y-3\">\n          {user?.userType === \"company\" && (\n            <div className=\"flex space-x-2\">\n              <Button\n                type=\"button\"\n                size=\"sm\"\n                variant={messageType === \"message\" ? \"default\" : \"outline\"}\n                onClick={() => setMessageType(\"message\")}\n                className=\"text-xs\"\n              >\n                <MessageCircle className=\"h-3 w-3 mr-1\" />\n                Message\n              </Button>\n              <Button\n                type=\"button\"\n                size=\"sm\"\n                variant={messageType === \"announcement\" ? \"default\" : \"outline\"}\n                onClick={() => setMessageType(\"announcement\")}\n                className=\"text-xs\"\n              >\n                <Megaphone className=\"h-3 w-3 mr-1\" />\n                Announcement\n              </Button>\n            </div>\n          )}\n          \n          <div className=\"flex space-x-2\">\n            <Textarea\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              placeholder={\n                messageType === \"announcement\" \n                  ? \"Announce something to the community...\" \n                  : \"Type your message...\"\n              }\n              className=\"flex-1 min-h-[60px] max-h-32 bg-surface border-matrix/30 text-light-gray font-mono text-sm resize-none\"\n              maxLength={1000}\n            />\n            <Button\n              type=\"submit\"\n              disabled={!message.trim() || sendMessageMutation.isPending}\n              className=\"bg-matrix hover:bg-matrix/80 text-black\"\n            >\n              {sendMessageMutation.isPending ? (\n                <div className=\"w-4 h-4 border-2 border-black/50 border-t-black rounded-full animate-spin\" />\n              ) : (\n                <Send className=\"h-4 w-4\" />\n              )}\n            </Button>\n          </div>\n          \n          <div className=\"flex justify-between text-xs text-dim-gray font-mono\">\n            <span>{message.length}/1000 characters</span>\n            {messageType === \"announcement\" && (\n              <span className=\"text-warning-yellow\">Announcement mode</span>\n            )}\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9292},"client/src/components/security-notice.tsx":{"content":"\nimport React from 'react';\nimport { Alert, AlertDescription } from './ui/alert';\nimport { Shield, Info } from 'lucide-react';\n\nexport function SecurityNotice() {\n  return (\n    <Alert className=\"border-blue-600/30 bg-blue-600/10 mb-6\">\n      <Shield className=\"h-4 w-4 text-blue-400\" />\n      <AlertDescription className=\"text-blue-400\">\n        <strong>Enhanced Security:</strong> Two-Factor Authentication (2FA) is now required for all financial operations including deposits and withdrawals to protect your account from unauthorized access.\n      </AlertDescription>\n    </Alert>\n  );\n}\n","size_bytes":591},"client/src/components/theme-provider.tsx":{"content":"\n\"use client\"\n\nimport * as React from \"react\"\nimport { createContext, useContext, useEffect, useState } from \"react\"\n\ntype Theme = \"dark\" | \"light\" | \"system\"\n\ntype ThemeProviderProps = {\n  children: React.ReactNode\n  defaultTheme?: Theme\n  storageKey?: string\n}\n\ntype ThemeProviderState = {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  )\n\n  useEffect(() => {\n    const root = window.document.documentElement\n    root.classList.remove(\"light\", \"dark\")\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\"\n      root.classList.add(systemTheme)\n      return\n    }\n\n    root.classList.add(theme)\n  }, [theme])\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme)\n      setTheme(theme)\n    },\n  }\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  )\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext)\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n\n  return context\n}\n","size_bytes":1622},"client/src/components/two-factor-verification.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from './ui/dialog';\nimport { Button } from './ui/button';\nimport { Input } from './ui/input';\nimport { Label } from './ui/label';\nimport { Shield, Smartphone, Mail, Clock } from 'lucide-react';\nimport { useToast } from '../hooks/use-toast';\n\ninterface TwoFactorVerificationProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onVerify: (code: string) => Promise<boolean>;\n  operation: string;\n  amount?: number;\n  currency?: string;\n}\n\nexport function TwoFactorVerification({\n  isOpen,\n  onClose,\n  onVerify,\n  operation,\n  amount,\n  currency = 'USD'\n}: TwoFactorVerificationProps) {\n  const [code, setCode] = useState('');\n  const [isVerifying, setIsVerifying] = useState(false);\n  const [method, setMethod] = useState<'sms' | 'email' | 'app'>('email');\n  const [codeSent, setCodeSent] = useState(false);\n  const [countdown, setCountdown] = useState(0);\n  const { toast } = useToast();\n\n  const sendVerificationCode = async () => {\n    try {\n      const response = await fetch('/api/auth/send-2fa-code', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify({ \n          method, \n          operation,\n          amount: amount ? Math.round(amount * 100) : undefined\n        })\n      });\n\n      if (response.ok) {\n        setCodeSent(true);\n        setCountdown(60);\n        const timer = setInterval(() => {\n          setCountdown(prev => {\n            if (prev <= 1) {\n              clearInterval(timer);\n              return 0;\n            }\n            return prev - 1;\n          });\n        }, 1000);\n\n        toast({\n          title: \"Verification Code Sent\",\n          description: `A 6-digit code has been sent to your ${method === 'email' ? 'email' : 'phone'}.`,\n        });\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Error\",\n          description: error.error || \"Failed to send verification code\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Network Error\",\n        description: \"Failed to send verification code. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleVerify = async () => {\n    if (!code.trim() || code.length !== 6) {\n      toast({\n        title: \"Invalid Code\",\n        description: \"Please enter a valid 6-digit code\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsVerifying(true);\n    try {\n      const success = await onVerify(code);\n      if (success) {\n        toast({\n          title: \"Verification Successful\",\n          description: \"Your identity has been verified successfully.\",\n        });\n        onClose();\n      } else {\n        toast({\n          title: \"Verification Failed\",\n          description: \"Invalid verification code. Please try again.\",\n          variant: \"destructive\"\n        });\n        setCode('');\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Verification failed. Please try again.\",\n        variant: \"destructive\"\n      });\n      setCode('');\n    } finally {\n      setIsVerifying(false);\n    }\n  };\n\n  const handleClose = () => {\n    setCode('');\n    setCodeSent(false);\n    setCountdown(0);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"terminal-card max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-mono text-matrix flex items-center gap-2\">\n            <Shield className=\"h-5 w-5\" />\n            Two-Factor Authentication Required\n          </DialogTitle>\n          <DialogDescription className=\"text-dim-gray\">\n            For your security, please verify your identity to complete this {operation}\n            {amount && ` of ${(amount).toFixed(2)} ${currency}`}.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6 py-4\">\n          {!codeSent ? (\n            <>\n              <div>\n                <Label className=\"text-light-gray font-mono\">Verification Method</Label>\n                <div className=\"grid grid-cols-1 gap-3 mt-2\">\n                  <button\n                    type=\"button\"\n                    onClick={() => setMethod('email')}\n                    className={`p-3 rounded-lg border text-left transition-colors ${\n                      method === 'email' \n                        ? 'border-matrix bg-matrix/10 text-matrix' \n                        : 'border-dark-terminal text-dim-gray hover:border-matrix/50'\n                    }`}\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <Mail className=\"h-5 w-5\" />\n                      <div>\n                        <div className=\"font-medium\">Email Verification</div>\n                        <div className=\"text-sm opacity-75\">Send code to your registered email</div>\n                      </div>\n                    </div>\n                  </button>\n\n                  <button\n                    type=\"button\"\n                    onClick={() => setMethod('sms')}\n                    className={`p-3 rounded-lg border text-left transition-colors ${\n                      method === 'sms' \n                        ? 'border-matrix bg-matrix/10 text-matrix' \n                        : 'border-dark-terminal text-dim-gray hover:border-matrix/50'\n                    }`}\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <Smartphone className=\"h-5 w-5\" />\n                      <div>\n                        <div className=\"font-medium\">SMS Verification</div>\n                        <div className=\"text-sm opacity-75\">Send code to your phone number</div>\n                      </div>\n                    </div>\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"p-4 border border-amber-600/30 rounded-lg bg-amber-600/10\">\n                <div className=\"flex items-center gap-2 text-amber-400 mb-2\">\n                  <Shield className=\"h-4 w-4\" />\n                  <span className=\"font-mono text-sm\">Security Notice</span>\n                </div>\n                <p className=\"text-sm text-dim-gray\">\n                  This verification is required for all financial operations to protect your account from unauthorized access.\n                </p>\n              </div>\n\n              <Button \n                onClick={sendVerificationCode}\n                className=\"terminal-button w-full\"\n              >\n                Send Verification Code\n              </Button>\n            </>\n          ) : (\n            <>\n              <div>\n                <Label className=\"text-light-gray font-mono\">Enter Verification Code</Label>\n                <Input\n                  type=\"text\"\n                  placeholder=\"000000\"\n                  value={code}\n                  onChange={(e) => setCode(e.target.value.replace(/\\D/g, '').slice(0, 6))}\n                  maxLength={6}\n                  className=\"terminal-input mt-2 text-center text-2xl font-mono tracking-widest\"\n                  autoFocus\n                />\n                <p className=\"text-sm text-dim-gray mt-2 text-center\">\n                  Enter the 6-digit code sent to your {method === 'email' ? 'email' : 'phone number'}\n                </p>\n              </div>\n\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-dim-gray\">Didn't receive the code?</span>\n                {countdown > 0 ? (\n                  <span className=\"text-matrix flex items-center gap-1\">\n                    <Clock className=\"h-4 w-4\" />\n                    Resend in {countdown}s\n                  </span>\n                ) : (\n                  <button\n                    type=\"button\"\n                    onClick={sendVerificationCode}\n                    className=\"text-matrix hover:underline\"\n                  >\n                    Resend Code\n                  </button>\n                )}\n              </div>\n\n              <div className=\"flex gap-3\">\n                <Button \n                  onClick={handleVerify}\n                  disabled={isVerifying || code.length !== 6}\n                  className=\"terminal-button flex-1\"\n                >\n                  {isVerifying ? 'Verifying...' : 'Verify & Continue'}\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={handleClose}\n                  className=\"terminal-button-outline\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8872},"client/src/components/vulnerability-grading-form.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { Loader2, CheckCircle, AlertTriangle, Bug } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useToast } from '@/hooks/use-toast';\n\nconst vulnerabilityFormSchema = z.object({\n  vulnerabilityType: z.string().min(1, 'Please select a vulnerability type'),\n  description: z.string().min(10, 'Description must be at least 10 characters'),\n  affectsAdmin: z.boolean().default(false),\n  allowsDataAccess: z.boolean().default(false),\n  allowsCodeExecution: z.boolean().default(false),\n});\n\ntype VulnerabilityFormValues = z.infer<typeof vulnerabilityFormSchema>;\n\ninterface GradingResult {\n  severity: 'SV1' | 'SV2' | 'SV3' | 'SV4';\n  suggestedReward: number;\n  confidence: number;\n  reasoning: string;\n  matchedType: {\n    name: string;\n    description: string;\n  } | null;\n}\n\nconst vulnerabilityTypes = [\n  'Remote Code Execution (RCE)',\n  'SQL Injection',\n  'Cross-Site Scripting (XSS)',\n  'Cross-Site Request Forgery (CSRF)',\n  'Authentication Bypass',\n  'Authorization Bypass',\n  'Privilege Escalation',\n  'Server-Side Request Forgery (SSRF)',\n  'XML External Entity (XXE)',\n  'Information Disclosure',\n  'Directory Traversal',\n  'Business Logic Flaw',\n  'Open Redirect',\n  'Clickjacking',\n  'Missing Security Headers',\n  'Other'\n];\n\nexport function VulnerabilityGradingForm() {\n  const [gradingResult, setGradingResult] = useState<GradingResult | null>(null);\n  const { toast } = useToast();\n\n  const form = useForm<VulnerabilityFormValues>({\n    resolver: zodResolver(vulnerabilityFormSchema),\n    defaultValues: {\n      vulnerabilityType: '',\n      description: '',\n      affectsAdmin: false,\n      allowsDataAccess: false,\n      allowsCodeExecution: false,\n    },\n  });\n\n  const gradingMutation = useMutation({\n    mutationFn: async (data: VulnerabilityFormValues) => {\n      const response = await fetch('/api/grade-vulnerability', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to grade vulnerability');\n      }\n\n      return response.json();\n    },\n    onSuccess: (result: GradingResult) => {\n      setGradingResult(result);\n      toast({\n        title: 'Vulnerability Graded',\n        description: `Severity: ${result.severity} | Estimated Reward: $${result.suggestedReward}`,\n        variant: 'default',\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Grading Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: VulnerabilityFormValues) => {\n    gradingMutation.mutate(data);\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'SV1': return 'text-red-500 bg-red-900/20';\n      case 'SV2': return 'text-orange-500 bg-orange-900/20';\n      case 'SV3': return 'text-yellow-500 bg-yellow-900/20';\n      case 'SV4': return 'text-blue-500 bg-blue-900/20';\n      default: return 'text-gray-500 bg-gray-900/20';\n    }\n  };\n\n  const resetForm = () => {\n    form.reset();\n    setGradingResult(null);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"terminal-card p-6 rounded-lg\">\n        <div className=\"mb-6\">\n          <h3 className=\"text-lg font-mono font-bold text-light-gray mb-2 flex items-center\">\n            <Bug className=\"mr-2 h-5 w-5 text-matrix\" />\n            Vulnerability Assessment Tool\n          </h3>\n          <p className=\"text-dim-gray font-mono text-sm\">\n            Get instant grading and reward estimation for your vulnerability report\n          </p>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"vulnerabilityType\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-sm font-mono text-dim-gray\">\n                    Vulnerability Type\n                  </FormLabel>\n                  <FormControl>\n                    <Select value={field.value} onValueChange={field.onChange}>\n                      <SelectTrigger className=\"terminal-input\">\n                        <SelectValue placeholder=\"Select vulnerability type\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-terminal border border-primary/30\">\n                        {vulnerabilityTypes.map((type) => (\n                          <SelectItem key={type} value={type}>\n                            {type}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </FormControl>\n                  <FormMessage className=\"text-alert-red text-xs\" />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-sm font-mono text-dim-gray\">\n                    Description\n                  </FormLabel>\n                  <FormControl>\n                    <Textarea\n                      {...field}\n                      className=\"terminal-input min-h-[100px]\"\n                      placeholder=\"Describe the vulnerability in detail...\"\n                    />\n                  </FormControl>\n                  <FormMessage className=\"text-alert-red text-xs\" />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"affectsAdmin\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        className=\"border-matrix/50\"\n                      />\n                    </FormControl>\n                    <div className=\"space-y-1 leading-none\">\n                      <FormLabel className=\"text-sm font-mono text-dim-gray\">\n                        Affects Admin\n                      </FormLabel>\n                    </div>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"allowsDataAccess\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        className=\"border-matrix/50\"\n                      />\n                    </FormControl>\n                    <div className=\"space-y-1 leading-none\">\n                      <FormLabel className=\"text-sm font-mono text-dim-gray\">\n                        Allows Data Access\n                      </FormLabel>\n                    </div>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"allowsCodeExecution\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        className=\"border-matrix/50\"\n                      />\n                    </FormControl>\n                    <div className=\"space-y-1 leading-none\">\n                      <FormLabel className=\"text-sm font-mono text-dim-gray\">\n                        Allows Code Execution\n                      </FormLabel>\n                    </div>\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"flex gap-3 pt-4\">\n              <Button\n                type=\"submit\"\n                disabled={gradingMutation.isPending}\n                className=\"glow-button flex items-center\"\n              >\n                {gradingMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    GRADING...\n                  </>\n                ) : (\n                  <>\n                    <CheckCircle className=\"mr-2 h-4 w-4\" />\n                    GRADE VULNERABILITY\n                  </>\n                )}\n              </Button>\n\n              {gradingResult && (\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={resetForm}\n                  className=\"border-matrix/30 hover:bg-matrix/10\"\n                >\n                  RESET FORM\n                </Button>\n              )}\n            </div>\n          </form>\n        </Form>\n      </div>\n\n      {gradingResult && (\n        <div className=\"terminal-card p-6 rounded-lg border border-matrix/30\">\n          <div className=\"mb-4\">\n            <h4 className=\"text-lg font-mono font-bold text-light-gray mb-2 flex items-center\">\n              <AlertTriangle className=\"mr-2 h-5 w-5 text-matrix\" />\n              Grading Result\n            </h4>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-3 bg-terminal rounded-md\">\n                <span className=\"text-dim-gray font-mono text-sm\">Severity Level:</span>\n                <span className={`px-3 py-1 rounded-full text-sm font-mono ${getSeverityColor(gradingResult.severity)}`}>\n                  {gradingResult.severity}\n                </span>\n              </div>\n\n              <div className=\"flex items-center justify-between p-3 bg-terminal rounded-md\">\n                <span className=\"text-dim-gray font-mono text-sm\">Estimated Reward:</span>\n                <span className=\"text-matrix font-mono font-bold\">${gradingResult.suggestedReward}</span>\n              </div>\n\n              <div className=\"flex items-center justify-between p-3 bg-terminal rounded-md\">\n                <span className=\"text-dim-gray font-mono text-sm\">Confidence:</span>\n                <span className=\"text-light-gray font-mono\">{Math.round(gradingResult.confidence * 100)}%</span>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              {gradingResult.matchedType && (\n                <div className=\"p-3 bg-terminal rounded-md\">\n                  <h5 className=\"text-sm font-mono text-matrix mb-1\">Matched Type:</h5>\n                  <p className=\"text-light-gray font-mono text-sm\">{gradingResult.matchedType.name}</p>\n                  <p className=\"text-dim-gray font-mono text-xs mt-1\">{gradingResult.matchedType.description}</p>\n                </div>\n              )}\n\n              <div className=\"p-3 bg-terminal rounded-md\">\n                <h5 className=\"text-sm font-mono text-matrix mb-1\">Reasoning:</h5>\n                <p className=\"text-light-gray font-mono text-sm\">{gradingResult.reasoning}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mt-4 p-3 bg-terminal rounded-md border border-matrix/20\">\n            <p className=\"text-dim-gray font-mono text-xs\">\n              <span className=\"text-matrix\">Note:</span> This is an automated assessment. Final rewards and severity \n              levels will be determined during manual review by our security team.\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":12519},"client/src/components/wallet-analytics.tsx":{"content":"\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from \"recharts\";\n\nexport function WalletAnalytics() {\n  const { data: walletStats } = useQuery({\n    queryKey: [\"wallet-analytics\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/admin/wallet-analytics\");\n      return res.json();\n    }\n  });\n\n  return (\n    <Card className=\"bg-terminal border-matrix/30\">\n      <CardHeader>\n        <CardTitle className=\"text-light-gray\">Wallet Analytics</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"grid grid-cols-3 gap-4\">\n          <div className=\"p-4 bg-dark-terminal rounded-lg\">\n            <p className=\"text-dim-gray text-sm\">Total Paid</p>\n            <p className=\"text-2xl text-matrix\">${walletStats?.totalPaid || 0}</p>\n          </div>\n          <div className=\"p-4 bg-dark-terminal rounded-lg\">\n            <p className=\"text-dim-gray text-sm\">Average Reward</p>\n            <p className=\"text-2xl text-matrix\">${walletStats?.avgReward || 0}</p>\n          </div>\n          <div className=\"p-4 bg-dark-terminal rounded-lg\">\n            <p className=\"text-dim-gray text-sm\">Pending Payouts</p>\n            <p className=\"text-2xl text-matrix\">${walletStats?.pendingPayouts || 0}</p>\n          </div>\n        </div>\n        \n        <ResponsiveContainer width=\"100%\" height={200}>\n          <BarChart data={walletStats?.trends}>\n            <XAxis dataKey=\"date\" />\n            <YAxis />\n            <Tooltip />\n            <Bar dataKey=\"amount\" fill=\"#50fa7b\" />\n          </BarChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1761},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, RegisterData>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\"> & {\n  userType?: \"hacker\" | \"company\";\n};\n\ntype RegisterData = InsertUser;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Login successful\",\n        description: `Welcome back, ${user.username}!`,\n        variant: \"default\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: RegisterData) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Registration successful\",\n        description: `Welcome to CyberHunt, ${user.username}!`,\n        variant: \"default\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Logged out successfully\",\n        description: \"You have been securely logged out.\",\n        variant: \"default\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3365},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"\nexport async function apiRequest(method: string, path: string, data?: any) {\n  try {\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json'\n    };\n    \n    const response = await fetch(path, {\n      method,\n      headers,\n      credentials: 'include',\n      body: data ? JSON.stringify(data) : undefined,\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Request failed');\n    }\n\n    return response;\n  } catch (error) {\n    console.error('API request error:', error);\n    throw error;\n  }\n}\n\nexport async function login(username: string, password: string) {\n  return apiRequest('POST', '/api/login', { username, password });\n}\n\nexport async function register(data: any) {\n  return apiRequest('POST', '/api/register', data);\n}\n","size_bytes":834},"client/src/lib/protected-route.tsx":{"content":"\nimport { Route, Redirect } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface ProtectedRouteProps {\n  path: string;\n  component: React.ComponentType;\n  isPublic?: boolean;\n}\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n  isPublic = false,\n}: ProtectedRouteProps) {\n  const { user, isLoading } = useAuth();\n\n  return (\n    <Route path={path}>\n      {() => {\n        if (isLoading) {\n          return (\n            <div className=\"flex items-center justify-center min-h-screen bg-deep-black\">\n              <Loader2 className=\"h-8 w-8 animate-spin text-matrix\" />\n            </div>\n          );\n        }\n\n        if (isPublic) {\n          return <Component />;\n        }\n\n        if (!user) {\n          return <Redirect to=\"/auth\" />;\n        }\n\n        return <Component />;\n      }}\n    </Route>\n  );\n}\n","size_bytes":886},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about-page.tsx":{"content":"import { Link } from \"wouter\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport { Shield, Globe, Terminal, Code, ChevronRight, Users, Award, Zap } from \"lucide-react\";\n\nexport default function AboutPage() {\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground className=\"opacity-20\" />\n      <Navbar />\n      \n      <main className=\"max-w-6xl mx-auto px-4 py-12 relative z-10\">\n        {/* Hero Section */}\n        <div className=\"terminal-card p-8 rounded-lg mb-12\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 items-center\">\n            <div>\n              <h1 className=\"text-4xl font-mono font-bold text-matrix mb-4\">About CyberHunt_</h1>\n              <p className=\"text-dim-gray mb-6\">\n                Welcome to the next generation of bug bounty platforms. CyberHunt transforms vulnerability discovery \n                into an engaging, gamified experience for ethical hackers, focusing on interactive learning and \n                collaborative security exploration.\n              </p>\n              <Link href=\"/programs\">\n                <div className=\"inline-flex items-center px-4 py-2 border border-matrix bg-terminal rounded-md text-matrix hover:bg-matrix/10 transition duration-200 font-mono text-sm cursor-pointer\">\n                  Explore Programs <ChevronRight className=\"ml-2 h-4 w-4\" />\n                </div>\n              </Link>\n            </div>\n            <div className=\"flex justify-center\">\n              <div className=\"glow-container w-64 h-64 relative\">\n                <div className=\"absolute inset-0 rounded-full bg-matrix/20 blur-xl\"></div>\n                <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-32 h-32 bg-terminal border-2 border-matrix rounded-full flex items-center justify-center\">\n                  <Terminal className=\"h-16 w-16 text-matrix\" />\n                </div>\n                <div className=\"absolute top-0 left-0 w-full h-full animate-spin-slow\">\n                  <div className=\"absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-8 h-8 bg-terminal border-2 border-matrix rounded-full flex items-center justify-center\">\n                    <Shield className=\"h-4 w-4 text-matrix\" />\n                  </div>\n                  <div className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2 translate-y-1/2 w-8 h-8 bg-terminal border-2 border-matrix rounded-full flex items-center justify-center\">\n                    <Code className=\"h-4 w-4 text-electric-blue\" />\n                  </div>\n                  <div className=\"absolute left-0 top-1/2 transform -translate-x-1/2 -translate-y-1/2 w-8 h-8 bg-terminal border-2 border-matrix rounded-full flex items-center justify-center\">\n                    <Globe className=\"h-4 w-4 text-green-500\" />\n                  </div>\n                  <div className=\"absolute right-0 top-1/2 transform translate-x-1/2 -translate-y-1/2 w-8 h-8 bg-terminal border-2 border-matrix rounded-full flex items-center justify-center\">\n                    <Zap className=\"h-4 w-4 text-yellow-400\" />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Mission Section */}\n        <div className=\"mb-12\">\n          <h2 className=\"text-2xl font-mono font-bold text-matrix mb-6\">Our Mission</h2>\n          <div className=\"terminal-card p-6 rounded-lg\">\n            <p className=\"text-dim-gray mb-4\">\n              CyberHunt was founded with a single purpose: to transform the way security vulnerabilities are discovered \n              and reported. We believe that by creating an engaging, gamified platform, we can attract more talented \n              researchers to the field of cybersecurity and make the digital world safer for everyone.\n            </p>\n            <p className=\"text-dim-gray mb-4\">\n              We're committed to fostering a community of ethical hackers who are passionate about security, \n              and to providing organizations with a reliable way to identify and address vulnerabilities in \n              their systems before they can be exploited.\n            </p>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-8\">\n              <div className=\"border border-matrix/30 rounded-lg p-4 bg-terminal/50 hover:bg-matrix/10 transition duration-200\">\n                <div className=\"flex items-center mb-3\">\n                  <Shield className=\"text-matrix mr-3 h-6 w-6\" />\n                  <h3 className=\"text-light-gray font-mono text-lg\">Security First</h3>\n                </div>\n                <p className=\"text-dim-gray text-sm\">\n                  We prioritize responsible disclosure and ethical hacking principles in everything we do.\n                </p>\n              </div>\n              <div className=\"border border-matrix/30 rounded-lg p-4 bg-terminal/50 hover:bg-matrix/10 transition duration-200\">\n                <div className=\"flex items-center mb-3\">\n                  <Users className=\"text-electric-blue mr-3 h-6 w-6\" />\n                  <h3 className=\"text-light-gray font-mono text-lg\">Community Driven</h3>\n                </div>\n                <p className=\"text-dim-gray text-sm\">\n                  We believe in the power of collaboration and shared knowledge to advance security practices.\n                </p>\n              </div>\n              <div className=\"border border-matrix/30 rounded-lg p-4 bg-terminal/50 hover:bg-matrix/10 transition duration-200\">\n                <div className=\"flex items-center mb-3\">\n                  <Award className=\"text-yellow-400 mr-3 h-6 w-6\" />\n                  <h3 className=\"text-light-gray font-mono text-lg\">Recognition & Rewards</h3>\n                </div>\n                <p className=\"text-dim-gray text-sm\">\n                  We ensure that security researchers are properly recognized and rewarded for their contributions.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Team Section */}\n        <div className=\"mb-12\">\n          <h2 className=\"text-2xl font-mono font-bold text-matrix mb-6\">Our Team</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[\n              {\n                name: \"Med Amin Ben Said\",\n                role: \"Cybersecurity Specialist and CEO Founder CyberHunt\",\n                bio: \"Leading cybersecurity expert and visionary founder of CyberHunt, dedicated to revolutionizing the bug bounty landscape.\",\n              }\n            ].map((member, index) => (\n              <div key={index} className=\"terminal-card p-5 rounded-lg hover:bg-matrix/5 transition-all duration-200\">\n                <h3 className=\"text-xl font-mono text-light-gray mb-1\">{member.name}</h3>\n                <p className=\"text-matrix text-sm mb-3\">{member.role}</p>\n                <p className=\"text-dim-gray text-sm\">{member.bio}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        {/* Company Stats */}\n        <div className=\"mb-12\">\n          <h2 className=\"text-2xl font-mono font-bold text-matrix mb-6\">CyberHunt By The Numbers</h2>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div className=\"terminal-card p-5 rounded-lg border border-matrix/30\">\n              <p className=\"text-4xl font-mono font-bold text-matrix mb-1\">500+</p>\n              <p className=\"text-dim-gray\">Active Security Programs</p>\n            </div>\n            <div className=\"terminal-card p-5 rounded-lg border border-matrix/30\">\n              <p className=\"text-4xl font-mono font-bold text-electric-blue mb-1\">10,000+</p>\n              <p className=\"text-dim-gray\">Ethical Hackers</p>\n            </div>\n            <div className=\"terminal-card p-5 rounded-lg border border-matrix/30\">\n              <p className=\"text-4xl font-mono font-bold text-green-500 mb-1\">25,000+</p>\n              <p className=\"text-dim-gray\">Vulnerabilities Fixed</p>\n            </div>\n            <div className=\"terminal-card p-5 rounded-lg border border-matrix/30\">\n              <p className=\"text-4xl font-mono font-bold text-yellow-400 mb-1\">$5M+</p>\n              <p className=\"text-dim-gray\">In Bounties Paid</p>\n            </div>\n          </div>\n        </div>\n        \n        {/* Timeline */}\n        <div className=\"mb-12\">\n          <h2 className=\"text-2xl font-mono font-bold text-matrix mb-6\">Our Journey</h2>\n          <div className=\"terminal-card p-6 rounded-lg\">\n            <div className=\"relative\">\n              <div className=\"absolute left-4 top-0 bottom-0 w-0.5 bg-matrix/30\"></div>\n              \n              <div className=\"relative pl-12 pb-10\">\n                <div className=\"absolute left-0 w-8 h-8 rounded-full bg-terminal border-2 border-matrix flex items-center justify-center\">\n                  <div className=\"w-3 h-3 bg-matrix rounded-full\"></div>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-mono text-light-gray mb-1\">2023</h3>\n                  <p className=\"text-matrix mb-2\">CyberHunt Founded</p>\n                  <p className=\"text-dim-gray text-sm\">\n                    CyberHunt was established with the vision of creating a next-generation bug bounty platform \n                    that makes security research more accessible, engaging, and rewarding.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"relative pl-12 pb-10\">\n                <div className=\"absolute left-0 w-8 h-8 rounded-full bg-terminal border-2 border-matrix flex items-center justify-center\">\n                  <div className=\"w-3 h-3 bg-matrix rounded-full\"></div>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-mono text-light-gray mb-1\">2023</h3>\n                  <p className=\"text-matrix mb-2\">Beta Launch</p>\n                  <p className=\"text-dim-gray text-sm\">\n                    Released our beta platform to an initial group of security researchers and organizations, \n                    gathering feedback and refining our systems.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"relative pl-12 pb-10\">\n                <div className=\"absolute left-0 w-8 h-8 rounded-full bg-terminal border-2 border-matrix flex items-center justify-center\">\n                  <div className=\"w-3 h-3 bg-matrix rounded-full\"></div>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-mono text-light-gray mb-1\">2024</h3>\n                  <p className=\"text-matrix mb-2\">Official Launch</p>\n                  <p className=\"text-dim-gray text-sm\">\n                    CyberHunt officially launched to the public, introducing our gamified approach to bug bounties \n                    and our reputation-based system for researchers.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"relative pl-12\">\n                <div className=\"absolute left-0 w-8 h-8 rounded-full bg-terminal border-2 border-matrix flex items-center justify-center\">\n                  <div className=\"w-3 h-3 bg-matrix rounded-full\"></div>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-mono text-light-gray mb-1\">2025</h3>\n                  <p className=\"text-matrix mb-2\">Growth & Expansion</p>\n                  <p className=\"text-dim-gray text-sm\">\n                    Expanding our community to over 10,000 security researchers and partnering with major \n                    organizations to provide comprehensive vulnerability assessment programs.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* CTA Section */}\n        <div className=\"terminal-card p-8 rounded-lg text-center\">\n          <h2 className=\"text-2xl font-mono font-bold text-matrix mb-4\">Join the CyberHunt Community</h2>\n          <p className=\"text-dim-gray mb-6 max-w-3xl mx-auto\">\n            Whether you're an experienced security researcher or just starting your journey in cybersecurity,\n            CyberHunt offers opportunities to learn, grow, and earn rewards while making the digital world safer.\n          </p>\n          <div className=\"flex flex-col sm:flex-row justify-center space-y-4 sm:space-y-0 sm:space-x-4\">\n            <Link href=\"/auth?mode=register\">\n              <div className=\"px-6 py-3 bg-matrix text-black rounded-md font-mono hover:bg-matrix/80 transition duration-200 cursor-pointer\">\n                Create an Account\n              </div>\n            </Link>\n            <Link href=\"/programs\">\n              <div className=\"px-6 py-3 border border-matrix text-matrix rounded-md font-mono hover:bg-matrix/10 transition duration-200 cursor-pointer\">\n                Browse Programs\n              </div>\n            </Link>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":13225},"client/src/pages/activities-page.tsx":{"content":"\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Activity } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport ActivityItem from \"@/components/ui/activity-item\";\nimport { Clock, CheckCircle, XCircle, Activity as ActivityIcon } from \"lucide-react\";\n\nexport default function ActivitiesPage() {\n  const { user } = useAuth();\n\n  const {\n    data: activities,\n    isLoading,\n    error\n  } = useQuery<Activity[]>({\n    queryKey: [\"/api/activities\"],\n  });\n\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground />\n      <Navbar />\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 relative z-10\">\n        <h1 className=\"text-2xl font-mono font-bold text-light-gray mb-6\">Activity History</h1>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          <div className=\"md:col-span-2 space-y-6\">\n            {isLoading ? (\n              <div className=\"terminal-card p-6 rounded-lg text-center\">\n                <p className=\"text-matrix font-mono\">Loading activities...</p>\n              </div>\n            ) : error ? (\n              <div className=\"terminal-card p-6 rounded-lg text-center\">\n                <p className=\"text-alert-red font-mono\">Error loading activities</p>\n              </div>\n            ) : activities && activities.length > 0 ? (\n              <div className=\"space-y-4\">\n                {activities.map((activity) => (\n                  <div key={activity.id} className=\"terminal-card p-4 rounded-lg border border-matrix/30\">\n                    <ActivityItem activity={activity} />\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"terminal-card p-8 rounded-lg text-center\">\n                <ActivityIcon className=\"h-12 w-12 text-dim-gray mx-auto mb-4\" />\n                <p className=\"text-matrix text-lg mb-2\">No activity yet</p>\n                <p className=\"text-dim-gray\">Start interacting with the platform to see your activity here.</p>\n              </div>\n            )}\n          </div>\n\n          <div className=\"space-y-6\">\n            <div className=\"terminal-card p-4 rounded-lg border border-matrix/30\">\n              <h2 className=\"text-lg font-mono font-bold text-light-gray mb-4\">Filter Activity</h2>\n              <div className=\"space-y-2\">\n                <button className=\"w-full flex items-center p-3 rounded bg-matrix/10 hover:bg-matrix/20 transition-all duration-200 border border-matrix/30\">\n                  <CheckCircle className=\"text-matrix mr-3 h-5 w-5\" />\n                  <span className=\"text-light-gray font-mono text-sm\">Accepted Submissions</span>\n                </button>\n                <button className=\"w-full flex items-center p-3 rounded bg-surface hover:bg-matrix/10 transition-all duration-200 border border-matrix/20\">\n                  <XCircle className=\"text-alert-red mr-3 h-5 w-5\" />\n                  <span className=\"text-light-gray font-mono text-sm\">Rejected Submissions</span>\n                </button>\n                <button className=\"w-full flex items-center p-3 rounded bg-surface hover:bg-matrix/10 transition-all duration-200 border border-matrix/20\">\n                  <Clock className=\"text-warning-yellow mr-3 h-5 w-5\" />\n                  <span className=\"text-light-gray font-mono text-sm\">Pending Review</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":3628},"client/src/pages/admin-company-wallets-page.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\n\ninterface CompanyWallet {\n  id: number;\n  companyId: number;\n  balance: number;\n  totalPaid: number;\n  lastUpdated: string;\n  companyName: string;\n  email: string;\n}\n\ninterface Company {\n  id: number;\n  companyName: string;\n  email: string;\n  username: string;\n}\n\nexport default function AdminCompanyWalletsPage() {\n  const [companyWallets, setCompanyWallets] = useState<CompanyWallet[]>([]);\n  const [companies, setCompanies] = useState<Company[]>([]);\n  const [selectedCompany, setSelectedCompany] = useState<Company | null>(null);\n  const [amount, setAmount] = useState(\"\");\n  const [note, setNote] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [updateAmounts, setUpdateAmounts] = useState<{[key: number]: string}>({});\n  const [updateLoading, setUpdateLoading] = useState<{[key: number]: boolean}>({});\n  const { toast } = useToast();\n\n  useEffect(() => {\n    fetchCompanyWallets();\n    fetchCompanies();\n  }, []);\n\n  const fetchCompanyWallets = async () => {\n    try {\n      const token = localStorage.getItem('adminToken');\n      const response = await fetch('/api/admin/company-wallets', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setCompanyWallets(data);\n      }\n    } catch (error) {\n      console.error('Error fetching company wallets:', error);\n    }\n  };\n\n  const fetchCompanies = async () => {\n    try {\n      const token = localStorage.getItem('adminToken');\n      const response = await fetch('/api/admin/companies', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setCompanies(data);\n      }\n    } catch (error) {\n      console.error('Error fetching companies:', error);\n    }\n  };\n\n  const formatCurrency = (cents: number) => {\n    return `$${(cents / 100).toFixed(2)}`;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const updateWalletBalance = async (companyId: number) => {\n    const amount = parseFloat(updateAmounts[companyId]);\n    if (!amount || amount <= 0) {\n      alert('Please enter a valid amount');\n      return;\n    }\n\n    setUpdateLoading({ ...updateLoading, [companyId]: true });\n\n    try {\n      const adminToken = localStorage.getItem('adminToken');\n      const response = await fetch('/api/admin/company-wallet/update', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${adminToken}`\n        },\n        body: JSON.stringify({\n          companyId,\n          amount: Math.round(amount * 100), // Convert to cents\n          note: `Manual wallet top-up: $${amount.toFixed(2)} added by admin`\n        })\n      });\n\n      if (response.ok) {\n        await fetchCompanyWallets();\n        setUpdateAmounts({ ...updateAmounts, [companyId]: '' });\n        alert('Wallet balance updated successfully');\n      } else {\n        const error = await response.json();\n        alert(error.error || 'Failed to update wallet balance');\n      }\n    } catch (error) {\n      console.error('Error updating wallet balance:', error);\n      alert('Network error occurred');\n    } finally {\n      setUpdateLoading({ ...updateLoading, [companyId]: false });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-deep-black relative\">\n        <MatrixBackground className=\"opacity-20\" />\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-matrix mx-auto mb-4\"></div>\n            <p className=\"text-dim-gray\">Loading company wallets...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground className=\"opacity-20\" />\n      <main className=\"max-w-7xl mx-auto px-4 py-8 relative z-10\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-mono font-bold text-matrix mb-2\">Company Wallets</h1>\n          <p className=\"text-dim-gray\">Manage company cryptocurrency wallet balances</p>\n          <div className=\"mt-4 p-4 border border-blue-600/30 rounded-lg bg-blue-600/10\">\n            <div className=\"flex items-center gap-2 text-blue-400 mb-2\">\n              <span className=\"font-mono\">💰 Manual Balance Management</span>\n            </div>\n            <p className=\"text-sm text-dim-gray\">\n              Companies pay via Binance Pay to your account. Update their wallet balances here after confirming payments.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"grid gap-6\">\n          {companyWallets.length === 0 ? (\n            <Card className=\"bg-dark-bg/50 border-matrix/20\">\n              <CardContent className=\"p-8 text-center\">\n                <p className=\"text-dim-gray\">No company wallets found</p>\n              </CardContent>\n            </Card>\n          ) : (\n            companyWallets.map((wallet) => (\n              <Card key={wallet.id} className=\"bg-dark-bg/50 border-matrix/20\">\n                <CardHeader>\n                  <div className=\"flex justify-between items-center\">\n                    <div>\n                      <CardTitle className=\"text-matrix\">\n                        {wallet.companyName || 'Unknown Company'}\n                      </CardTitle>\n                      <p className=\"text-dim-gray text-sm\">{wallet.email}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-2xl font-bold text-matrix\">\n                        {formatCurrency(wallet.balance)}\n                      </div>\n                      <Badge variant=\"outline\" className=\"border-matrix/20 text-dim-gray\">\n                        Available Balance\n                      </Badge>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div>\n                      <p className=\"text-dim-gray text-sm\">Total Paid</p>\n                      <p className=\"text-white font-semibold\">{formatCurrency(wallet.totalPaid)}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-dim-gray text-sm\">Last Updated</p>\n                      <p className=\"text-white font-semibold\">\n                        {wallet.lastUpdated ? formatDate(wallet.lastUpdated) : 'Never'}\n                      </p>\n                    </div>\n                    <div className=\"flex justify-end\">\n                      <Input\n                        type=\"number\"\n                        placeholder=\"Enter amount ($)\"\n                        value={updateAmounts[wallet.companyId] || ''}\n                        onChange={(e) => setUpdateAmounts({\n                          ...updateAmounts,\n                          [wallet.companyId]: e.target.value\n                        })}\n                        className=\"terminal-input w-32 mr-2\"\n                      />\n                      <Button\n                        onClick={() => updateWalletBalance(wallet.companyId)}\n                        disabled={updateLoading[wallet.companyId] || !updateAmounts[wallet.companyId]}\n                        className=\"terminal-button\"\n                      >\n                        {updateLoading[wallet.companyId] ? 'Updating...' : 'Add Funds'}\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":8461},"client/src/pages/admin-crypto-withdrawals-page.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { CheckCircle, XCircle, Clock, Eye, Copy } from \"lucide-react\";\n\ninterface CryptoWithdrawal {\n  id: number;\n  amount: number;\n  currency: string;\n  walletAddress: string;\n  network: string;\n  status: string;\n  createdAt: string;\n  updatedAt: string | null;\n  username: string;\n  email: string;\n  userId: number;\n}\n\nexport default function AdminCryptoWithdrawalsPage() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedWithdrawal, setSelectedWithdrawal] = useState<CryptoWithdrawal | null>(null);\n  const [actionType, setActionType] = useState<'approve' | 'reject' | null>(null);\n  const [notes, setNotes] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [filter, setFilter] = useState(\"pending\");\n\n  const { data: withdrawals, isLoading } = useQuery({\n    queryKey: [\"/api/admin/crypto/withdrawals\", filter],\n    queryFn: async () => {\n      const response = await fetch(`/api/admin/crypto/withdrawals?status=${filter}`, {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem('adminToken')}`\n        }\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch withdrawals\");\n      return response.json();\n    }\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ withdrawalId, status, notes }: { withdrawalId: number; status: string; notes: string }) => {\n      const response = await fetch(`/api/admin/crypto/withdrawals/${withdrawalId}/status`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem('adminToken')}`\n        },\n        body: JSON.stringify({ status, notes }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update withdrawal status\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Withdrawal status updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/crypto/withdrawals\"] });\n      setIsDialogOpen(false);\n      setSelectedWithdrawal(null);\n      setActionType(null);\n      setNotes(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update withdrawal status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAction = (withdrawal: CryptoWithdrawal, action: 'approve' | 'reject') => {\n    setSelectedWithdrawal(withdrawal);\n    setActionType(action);\n    setNotes(\"\");\n    setIsDialogOpen(true);\n  };\n\n  const handleConfirmAction = () => {\n    if (!selectedWithdrawal || !actionType) return;\n\n    const status = actionType === 'approve' ? 'approved' : 'rejected';\n    updateStatusMutation.mutate({\n      withdrawalId: selectedWithdrawal.id,\n      status,\n      notes,\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return 'bg-green-500';\n      case 'approved': return 'bg-blue-500';\n      case 'rejected': return 'bg-red-500';\n      case 'processing': return 'bg-purple-500';\n      default: return 'bg-yellow-500';\n    }\n  };\n\n  const formatAmount = (amount: number, currency: string) => {\n    return `${(amount / 100).toFixed(2)} ${currency}`;\n  };\n\n  const maskWalletAddress = (address: string) => {\n    if (address.length <= 10) return address;\n    return address.substring(0, 6) + '...' + address.substring(address.length - 4);\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copied\",\n      description: \"Address copied to clipboard\",\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 relative z-10\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-mono font-bold text-light-gray mb-2\">\n            Crypto Withdrawal Management\n          </h1>\n          <p className=\"text-dim-gray\">\n            Review and approve cryptocurrency withdrawal requests from researchers\n          </p>\n        </div>\n\n        {/* Filter Tabs */}\n        <div className=\"mb-6 flex space-x-2\">\n          {['pending', 'approved', 'rejected', 'all'].map((status) => (\n            <Button\n              key={status}\n              variant={filter === status ? \"default\" : \"outline\"}\n              onClick={() => setFilter(status)}\n              className={filter === status ? \"bg-matrix text-black\" : \"border-matrix/30 text-light-gray\"}\n            >\n              {status.charAt(0).toUpperCase() + status.slice(1)}\n            </Button>\n          ))}\n        </div>\n\n        {isLoading ? (\n          <div className=\"text-center text-dim-gray\">Loading withdrawals...</div>\n        ) : (\n          <div className=\"terminal-card p-6 rounded-lg border border-matrix/30\">\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow className=\"border-b border-matrix/30\">\n                    <TableHead className=\"text-light-gray\">User</TableHead>\n                    <TableHead className=\"text-light-gray\">Amount</TableHead>\n                    <TableHead className=\"text-light-gray\">Network</TableHead>\n                    <TableHead className=\"text-light-gray\">Wallet Address</TableHead>\n                    <TableHead className=\"text-light-gray\">Status</TableHead>\n                    <TableHead className=\"text-light-gray\">Date</TableHead>\n                    <TableHead className=\"text-light-gray\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {withdrawals?.map((withdrawal: CryptoWithdrawal) => (\n                    <TableRow key={withdrawal.id} className=\"border-b border-matrix/20\">\n                      <TableCell>\n                        <div>\n                          <div className=\"text-light-gray font-mono\">{withdrawal.username}</div>\n                          <div className=\"text-dim-gray text-sm\">{withdrawal.email}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"text-matrix font-mono\">\n                        {formatAmount(withdrawal.amount, withdrawal.currency)}\n                      </TableCell>\n                      <TableCell className=\"text-light-gray\">\n                        <Badge variant=\"outline\" className=\"border-matrix/30 text-matrix\">\n                          {withdrawal.network.toUpperCase()}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"text-dim-gray font-mono text-sm\">\n                            {maskWalletAddress(withdrawal.walletAddress)}\n                          </span>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => copyToClipboard(withdrawal.walletAddress)}\n                            className=\"h-6 w-6 p-0\"\n                          >\n                            <Copy className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge className={`${getStatusColor(withdrawal.status)} text-white`}>\n                          {withdrawal.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"text-dim-gray text-sm\">\n                        {new Date(withdrawal.createdAt).toLocaleDateString()}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          {withdrawal.status === 'pending' && (\n                            <>\n                              <Button\n                                size=\"sm\"\n                                onClick={() => handleAction(withdrawal, 'approve')}\n                                className=\"bg-green-600 hover:bg-green-700 text-white\"\n                              >\n                                <CheckCircle className=\"h-3 w-3 mr-1\" />\n                                Approve\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"destructive\"\n                                onClick={() => handleAction(withdrawal, 'reject')}\n                              >\n                                <XCircle className=\"h-3 w-3 mr-1\" />\n                                Reject\n                              </Button>\n                            </>\n                          )}\n                          {withdrawal.status !== 'pending' && (\n                            <Badge variant=\"outline\" className=\"border-matrix/30 text-dim-gray\">\n                              {withdrawal.status === 'approved' ? 'Ready for Payout' : 'Processed'}\n                            </Badge>\n                          )}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n\n              {withdrawals?.length === 0 && (\n                <div className=\"text-center text-dim-gray py-8\">\n                  No withdrawal requests found for \"{filter}\" status\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogContent className=\"bg-surface border border-matrix/30\">\n            <DialogHeader>\n              <DialogTitle className=\"text-light-gray\">\n                {actionType === 'approve' ? 'Approve' : 'Reject'} Withdrawal Request\n              </DialogTitle>\n              <DialogDescription className=\"text-dim-gray\">\n                {actionType === 'approve' \n                  ? 'This will mark the withdrawal as approved and ready for manual payout via Binance.'\n                  : 'This will reject the withdrawal request and notify the user.'\n                }\n              </DialogDescription>\n            </DialogHeader>\n\n            {selectedWithdrawal && (\n              <div className=\"space-y-4\">\n                <div className=\"bg-deep-black p-4 rounded border border-matrix/20\">\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-dim-gray\">User:</span>\n                      <span className=\"text-light-gray ml-2\">{selectedWithdrawal.username}</span>\n                    </div>\n                    <div>\n                      <span className=\"text-dim-gray\">Amount:</span>\n                      <span className=\"text-matrix ml-2\">\n                        {formatAmount(selectedWithdrawal.amount, selectedWithdrawal.currency)}\n                      </span>\n                    </div>\n                    <div>\n                      <span className=\"text-dim-gray\">Network:</span>\n                      <span className=\"text-light-gray ml-2\">{selectedWithdrawal.network.toUpperCase()}</span>\n                    </div>\n                    <div className=\"col-span-2\">\n                      <span className=\"text-dim-gray\">Wallet:</span>\n                      <span className=\"text-light-gray ml-2 font-mono text-xs break-all\">\n                        {selectedWithdrawal.walletAddress}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"text-light-gray text-sm mb-2 block\">\n                    Notes {actionType === 'reject' ? '(Required)' : '(Optional)'}\n                  </label>\n                  <Textarea\n                    value={notes}\n                    onChange={(e) => setNotes(e.target.value)}\n                    className=\"bg-surface border-matrix/30 text-light-gray\"\n                    placeholder={\n                      actionType === 'approve' \n                        ? \"Add any notes about the approval process...\"\n                        : \"Please provide a reason for rejection...\"\n                    }\n                    rows={3}\n                  />\n                </div>\n\n                {actionType === 'approve' && (\n                  <div className=\"bg-matrix/10 border border-matrix/30 p-3 rounded\">\n                    <p className=\"text-matrix text-sm\">\n                      ⚡ After approval, you'll need to manually process the payout through Binance.\n                      The withdrawal will be marked as \"ready for payout\" until manually completed.\n                    </p>\n                  </div>\n                )}\n\n                {actionType === 'reject' && (\n                  <div className=\"bg-red-500/10 border border-red-500/30 p-3 rounded\">\n                    <p className=\"text-red-400 text-sm\">\n                      ⚠️ This action will notify the user that their withdrawal request has been rejected.\n                    </p>\n                  </div>\n                )}\n              </div>\n            )}\n\n            <DialogFooter>\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsDialogOpen(false)}\n                className=\"border-matrix/30 text-light-gray\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleConfirmAction}\n                disabled={updateStatusMutation.isPending || (actionType === 'reject' && !notes.trim())}\n                className={\n                  actionType === 'approve' \n                    ? \"bg-green-600 hover:bg-green-700 text-white\"\n                    : \"bg-red-600 hover:bg-red-700 text-white\"\n                }\n              >\n                {updateStatusMutation.isPending ? \"Processing...\" : \n                 actionType === 'approve' ? \"Approve Withdrawal\" : \"Reject Withdrawal\"}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  );\n}\n","size_bytes":14965},"client/src/pages/admin-dashboard-page.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Link, useLocation } from \"wouter\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { DollarSign, Coins, Building2 } from \"lucide-react\";\nimport {\n  Users,\n  Shield,\n  Activity,\n  Settings,\n  AlertTriangle,\n  User,\n  Bug,\n  CheckCircle,\n  XCircle,\n  Search,\n  Filter,\n  MoreVertical,\n  Trash,\n  Edit,\n  LogOut\n} from \"lucide-react\";\n// Removed Tabs components - using custom implementation\n// Using custom styled components instead of UI library components\n\nexport default function AdminDashboardPage() {\n  const [, navigate] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Check admin authentication\n  useEffect(() => {\n    const checkAdminAuth = async () => {\n      try {\n        const token = localStorage.getItem('adminToken');\n        if (!token) {\n          console.log(\"No admin token found, redirecting to login\");\n          navigate(\"/admin\");\n          return;\n        }\n\n        const response = await fetch(\"/api/admin/verify\", {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          },\n          credentials: 'include'\n        });\n        if (!response.ok) {\n          console.log(\"Admin verification failed, redirecting to login\");\n          localStorage.removeItem('adminToken');\n          navigate(\"/admin\");\n        }\n      } catch (error) {\n        console.error(\"Admin verification error:\", error);\n        localStorage.removeItem('adminToken');\n        navigate(\"/admin\");\n      }\n    };\n\n    checkAdminAuth();\n  }, [navigate]);\n\n  // Get admin token from localStorage\n  const getAuthHeaders = () => {\n    const token = localStorage.getItem('adminToken');\n    return token ? { 'Authorization': `Bearer ${token}` } : {};\n  };\n\n  // Fetch admin stats\n  const { data: stats = {}, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/admin/stats\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/stats\", {\n        headers: getAuthHeaders(),\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          localStorage.removeItem('adminToken');\n          navigate(\"/admin\");\n          throw new Error('Admin session expired');\n        }\n        throw new Error('Failed to fetch stats');\n      }\n      const data = await response.json();\n      return data || {};\n    },\n    retry: false,\n    refetchOnWindowFocus: false\n  });\n\n  // Fetch users data\n  const { data: users = [], isLoading: usersLoading } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/users\", {\n        headers: getAuthHeaders(),\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          localStorage.removeItem('adminToken');\n          navigate(\"/admin\");\n          throw new Error('Admin session expired');\n        }\n        throw new Error('Failed to fetch users');\n      }\n      return response.json();\n    }\n  });\n\n  // Fetch company users data\n  const { data: companyUsers = [], isLoading: companyUsersLoading, refetch: refetchCompanyUsers } = useQuery({\n    queryKey: [\"/api/admin/company-users\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/company-users\", {\n        headers: getAuthHeaders(),\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          localStorage.removeItem('adminToken');\n          navigate(\"/admin\");\n          throw new Error('Admin session expired');\n        }\n        throw new Error('Failed to fetch company users');\n      }\n      return response.json();\n    }\n  });\n\n  // Mutation for updating user verification status\n  const verifyUserMutation = useMutation({\n    mutationFn: async ({ userId, verificationStatus }: { userId: number; verificationStatus: string }) => {\n      const response = await fetch(\"/api/admin/verify-user\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          ...getAuthHeaders()\n        },\n        credentials: 'include',\n        body: JSON.stringify({ userId, verificationStatus })\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Failed to update verification status\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Success\",\n        description: `User verification status updated successfully to ${data.user.verificationStatus}`,\n      });\n      // Refetch company users to update the UI\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/company-users\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update verification status\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleLogout = async () => {\n    try {\n      await fetch(\"/api/admin/logout\", {\n        method: \"POST\",\n        headers: getAuthHeaders(),\n        credentials: 'include'\n      });\n      localStorage.removeItem('adminToken');\n      navigate(\"/admin\");\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n      localStorage.removeItem('adminToken');\n      navigate(\"/admin\");\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-deep-black\">\n      <MatrixBackground />\n\n      {/* Admin Header */}\n      <div className=\"bg-terminal/80 border-b border-matrix/30 backdrop-blur-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <Shield className=\"h-8 w-8 text-matrix\" />\n              <h1 className=\"text-xl font-mono font-bold text-matrix\">\n                ADMIN_PANEL\n              </h1>\n              <div className=\"text-xs text-dim-gray font-mono tracking-wider\">\n                [RESTRICTED_ACCESS]\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Link to=\"/\" className=\"text-dim-gray hover:text-matrix text-sm font-mono uppercase tracking-wider\">\n                &lt; Return to Site\n              </Link>\n              <button\n                onClick={handleLogout}\n                className=\"bg-terminal border border-matrix/30 text-matrix hover:bg-matrix/10 px-4 py-2 text-sm font-mono uppercase tracking-wider transition-all duration-300 hover:shadow-[0_0_10px_rgba(14,232,109,0.3)]\"\n              >\n                <LogOut className=\"h-4 w-4 mr-2 inline\" />\n                Logout\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 relative z-10\">\n        {/* Stats Overview */}\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <div \n                  className=\"bg-dark-bg/50 border border-matrix/20 rounded p-6 hover:bg-matrix/5 transition-all duration-300 cursor-pointer group\"\n                  onClick={() => window.location.href = '/admin/company-wallets'}\n                >\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"text-matrix text-2xl\">💰</div>\n                    <div className=\"text-right\">\n                      <div className=\"text-2xl font-bold text-matrix\">Wallets</div>\n                      <div className=\"text-xs text-dim-gray\">Company Funds</div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-dark-bg/50 border border-matrix/20 rounded p-6 hover:bg-matrix/5 transition-all duration-300 cursor-pointer group\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"text-matrix text-2xl\">👥</div>\n                    <div className=\"text-right\">\n                      <div className=\"text-2xl font-bold text-matrix\">{stats.totalUsers}</div>\n                      <div className=\"text-xs text-dim-gray\">Total Users</div>\n                    </div>\n                  </div>\n                </div>\n\n          <div className=\"bg-terminal border border-matrix/30 p-6 relative overflow-hidden group hover:shadow-[0_0_20px_rgba(14,232,109,0.2)] transition-all duration-300\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-matrix/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n            <div className=\"flex items-center justify-between relative z-10\">\n              <div>\n                <p className=\"text-dim-gray text-sm font-mono uppercase tracking-wider\">[Total_Users]</p>\n                <p className=\"text-2xl font-mono font-bold text-matrix\">\n                  {String(stats.totalUsers || 0).padStart(3, '0')}\n                </p>\n              </div>\n              <Users className=\"h-8 w-8 text-matrix/70\" />\n            </div>\n          </div>\n\n          <div className=\"bg-terminal border border-matrix/30 p-6 relative overflow-hidden group hover:shadow-[0_0_20px_rgba(14,232,109,0.2)] transition-all duration-300\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-matrix/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n            <div className=\"flex items-center justify-between relative z-10\">\n              <div>\n                <p className=\"text-dim-gray text-sm font-mono uppercase tracking-wider\">[Active_Programs]</p>\n                <p className=\"text-2xl font-mono font-bold text-matrix\">\n                  {String(stats.activePrograms || 0).padStart(3, '0')}\n                </p>\n              </div>\n              <Bug className=\"h-8 w-8 text-matrix/70\" />\n            </div>\n          </div>\n\n          <div className=\"bg-terminal border border-matrix/30 p-6 relative overflow-hidden group hover:shadow-[0_0_20px_rgba(14,232,109,0.2)] transition-all duration-300\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-matrix/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n            <div className=\"flex items-center justify-between relative z-10\">\n              <div>\n                <p className=\"text-dim-gray text-sm font-mono uppercase tracking-wider\">[Total_Submissions]</p>\n                <p className=\"text-2xl font-mono font-bold text-matrix\">\n                  {String(stats.totalSubmissions || 0).padStart(3, '0')}\n                </p>\n              </div>\n              <Activity className=\"h-8 w-8 text-matrix/70\" />\n            </div>\n          </div>\n\n          <div className=\"bg-terminal border border-matrix/30 p-6 relative overflow-hidden group hover:shadow-[0_0_20px_rgba(14,232,109,0.2)] transition-all duration-300\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-matrix/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n            <div className=\"flex items-center justify-between relative z-10\">\n              <div>\n                <p className=\"text-dim-gray text-sm font-mono uppercase tracking-wider\">[Pending_Reviews]</p>\n                <p className=\"text-2xl font-mono font-bold text-matrix\">\n                  {String(stats.pendingReviews || 0).padStart(3, '0')}\n                </p>\n              </div>\n              <AlertTriangle className=\"h-8 w-8 text-matrix/70\" />\n            </div>\n          </div>\n        </div>\n\n        {/* Admin Tabs */}\n        <div className=\"space-y-6\">\n          <div className=\"grid w-full grid-cols-5 bg-terminal border border-matrix/30 p-1\">\n            <button\n              onClick={() => setActiveTab(\"overview\")}\n              className={`font-mono uppercase tracking-wider py-3 px-6 transition-all duration-300 ${\n                activeTab === \"overview\" \n                  ? \"bg-matrix/20 text-matrix border border-matrix/50 shadow-[0_0_10px_rgba(14,232,109,0.3)]\" \n                  : \"text-dim-gray hover:text-matrix hover:bg-matrix/10\"\n              }`}\n            >\n              [Overview]\n            </button>\n            <button\n              onClick={() => setActiveTab(\"users\")}\n              className={`font-mono uppercase tracking-wider py-3 px-6 transition-all duration-300 ${\n                activeTab === \"users\" \n                  ? \"bg-matrix/20 text-matrix border border-matrix/50 shadow-[0_0_10px_rgba(14,232,109,0.3)]\" \n                  : \"text-dim-gray hover:text-matrix hover:bg-matrix/10\"\n              }`}\n            >\n              [Users]\n            </button>\n            <button\n              onClick={() => setActiveTab(\"companies\")}\n              className={`font-mono uppercase tracking-wider py-3 px-6 transition-all duration-300 ${\n                activeTab === \"companies\" \n                  ? \"bg-matrix/20 text-matrix border border-matrix/50 shadow-[0_0_10px_rgba(14,232,109,0.3)]\" \n                  : \"text-dim-gray hover:text-matrix hover:bg-matrix/10\"\n              }`}\n            >\n              [Companies]\n            </button>\n            <button\n              onClick={() => setActiveTab(\"programs\")}\n              className={`font-mono uppercase tracking-wider py-3 px-6 transition-all duration-300 ${\n                activeTab === \"programs\" \n                  ? \"bg-matrix/20 text-matrix border border-matrix/50 shadow-[0_0_10px_rgba(14,232,109,0.3)]\" \n                  : \"text-dim-gray hover:text-matrix hover:bg-matrix/10\"\n              }`}\n            >\n              [Programs]\n            </button>\n            <button\n              onClick={() => setActiveTab(\"settings\")}\n              className={`font-mono uppercase tracking-wider py-3 px-6 transition-all duration-300 ${\n                activeTab === \"settings\" \n                  ? \"bg-matrix/20 text-matrix border border-matrix/50 shadow-[0_0_10px_rgba(14,232,109,0.3)]\" \n                  : \"text-dim-gray hover:text-matrix hover:bg-matrix/10\"\n              }`}\n            >\n              [Settings]\n            </button>\n          </div>\n\n          {activeTab === \"overview\" && (\n            <div className=\"bg-terminal border border-matrix/30 p-6 relative overflow-hidden\">\n              <div className=\"absolute inset-0 bg-gradient-to-br from-matrix/5 to-transparent\"></div>\n              <div className=\"relative z-10\">\n                <h3 className=\"text-lg font-mono font-bold text-matrix mb-6 uppercase tracking-wider\">\n                  {\">> Recent_Activity_Log\"}\n                </h3>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between py-3 border-b border-matrix/20 group hover:bg-matrix/5 transition-all duration-300 px-2\">\n                    <span className=\"text-dim-gray font-mono\">[INFO] New user registration</span>\n                    <span className=\"text-matrix text-sm font-mono\">2h_ago</span>\n                  </div>\n                  <div className=\"flex items-center justify-between py-3 border-b border-matrix/20 group hover:bg-matrix/5 transition-all duration-300 px-2\">\n                    <span className=\"text-dim-gray font-mono\">[SUCCESS] Bug submission approved</span>\n                    <span className=\"text-matrix text-sm font-mono\">4h_ago</span>\n                  </div>\n                  <div className=\"flex items-center justify-between py-3 border-b border-matrix/20 group hover:bg-matrix/5 transition-all duration-300 px-2\">\n                    <span className=\"text-dim-gray font-mono\">[INFO] New program created</span>\n                    <span className=\"text-matrix text-sm font-mono\">1d_ago</span>\n                  </div>\n                  <div className=\"flex items-center justify-between py-3 border-b border-matrix/20 group hover:bg-matrix/5 transition-all duration-300 px-2\">\n                    <span className=\"text-dim-gray font-mono\">[SYSTEM] Database backup completed</span>\n                    <span className=\"text-matrix text-sm font-mono\">2d_ago</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === \"users\" && (\n            <div className=\"bg-terminal border border-matrix/30 p-6 relative overflow-hidden\">\n              <div className=\"absolute inset-0 bg-gradient-to-br from-matrix/5 to-transparent\"></div>\n              <div className=\"relative z-10\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-lg font-mono font-bold text-matrix uppercase tracking-wider\">\n                    {\">> User_Management_Console\"}\n                  </h3>\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      placeholder=\"[SEARCH_USERS...]\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e.target.value)}\n                      className=\"w-64 bg-deep-black/80 border border-matrix/30 text-matrix font-mono px-4 py-2 focus:border-matrix focus:shadow-[0_0_10px_rgba(14,232,109,0.3)] outline-none\"\n                    />\n                    <button className=\"bg-terminal border border-matrix/30 text-matrix hover:bg-matrix/10 p-2 transition-all duration-300 hover:shadow-[0_0_10px_rgba(14,232,109,0.3)]\">\n                      <Search className=\"h-4 w-4\" />\n                    </button>\n                  </div>\n                </div>\n\n                <div className=\"space-y-1\">\n                  {usersLoading ? (\n                    <div className=\"text-center py-8\">\n                      <div className=\"text-dim-gray font-mono\">[LOADING_USERS...]</div>\n                    </div>\n                  ) : users.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <div className=\"text-dim-gray font-mono\">[NO_USERS_FOUND]</div>\n                    </div>\n                  ) : (\n                    users.map((user: any) => (\n                      <div key={user.id} className=\"flex items-center justify-between py-4 border-b border-matrix/20 group hover:bg-matrix/5 transition-all duration-300 px-2\">\n                        <div className=\"flex items-center space-x-4\">\n                          <User className=\"h-5 w-5 text-matrix/70\" />\n                          <div>\n                            <div className=\"text-matrix font-mono\">{user.username}</div>\n                            <div className=\"text-dim-gray text-sm font-mono\">{user.email}</div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-3\">\n                          <span className={`text-xs px-3 py-1 font-mono uppercase tracking-wider border ${\n                            user.userType === 'company' \n                              ? 'bg-blue-500/10 text-blue-400 border-blue-400/30' \n                              : 'bg-matrix/10 text-matrix border-matrix/30'\n                          }`}>\n                            [{user.userType}]\n                          </span>\n                          <button className=\"text-dim-gray hover:text-matrix transition-colors duration-300\">\n                            <MoreVertical className=\"h-4 w-4\" />\n                          </button>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === \"companies\" && (\n            <div className=\"bg-terminal border border-matrix/30 p-6 relative overflow-hidden\">\n              <div className=\"absolute inset-0 bg-gradient-to-br from-matrix/5 to-transparent\"></div>\n              <div className=\"relative z-10\">\n                <h3 className=\"text-lg font-mono font-bold text-matrix mb-6 uppercase tracking-wider\">\n                  {\">> Company_Verification_Console\"}\n                </h3>\n                {companyUsersLoading ? (\n                  <div className=\"text-center py-12\">\n                    <div className=\"text-dim-gray font-mono text-lg\">[LOADING_COMPANY_DATA...]</div>\n                    <div className=\"mt-6 text-matrix font-mono text-xs\">\n                      {\">> Accessing company database...\"}\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"text-dim-gray font-mono text-sm\">\n                        {\">> Found \" + companyUsers.length + \" registered companies\"}\n                      </div>\n                      <div className=\"text-matrix font-mono text-xs\">\n                        {\"[REAL_TIME_MONITORING_ACTIVE]\"}\n                      </div>\n                    </div>\n                    \n                    {companyUsers.length === 0 ? (\n                      <div className=\"text-center py-12\">\n                        <div className=\"text-dim-gray font-mono text-lg\">[NO_COMPANIES_FOUND]</div>\n                        <div className=\"text-dim-gray font-mono text-sm mt-2\">No companies registered yet...</div>\n                      </div>\n                    ) : (\n                      <div className=\"overflow-x-auto\">\n                        <table className=\"w-full border-collapse\">\n                          <thead>\n                            <tr className=\"border-b border-matrix/30\">\n                              <th className=\"text-left p-3 text-matrix font-mono uppercase tracking-wider\">Company</th>\n                              <th className=\"text-left p-3 text-matrix font-mono uppercase tracking-wider\">Email</th>\n                              <th className=\"text-left p-3 text-matrix font-mono uppercase tracking-wider\">Status</th>\n                              <th className=\"text-left p-3 text-matrix font-mono uppercase tracking-wider\">Registered</th>\n                              <th className=\"text-left p-3 text-matrix font-mono uppercase tracking-wider\">Actions</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {companyUsers.map((company: any) => (\n                              <tr key={company.id} className=\"border-b border-matrix/20 hover:bg-matrix/5 transition-colors\">\n                                <td className=\"p-3\">\n                                  <div>\n                                    <div className=\"text-light-gray font-mono font-semibold\">{company.companyName || company.username}</div>\n                                    <div className=\"text-dim-gray font-mono text-sm\">@{company.username}</div>\n                                  </div>\n                                </td>\n                                <td className=\"p-3 text-dim-gray font-mono\">{company.email}</td>\n                                <td className=\"p-3\">\n                                  <Badge className={`font-mono ${\n                                    company.verificationStatus === 'verified' ? 'bg-green-500/20 text-green-400 border-green-500' : \n                                    company.verificationStatus === 'rejected' ? 'bg-red-500/20 text-red-400 border-red-500' : \n                                    'bg-yellow-500/20 text-yellow-400 border-yellow-500'\n                                  }`}>\n                                    {company.verificationStatus || 'pending'}\n                                  </Badge>\n                                </td>\n                                <td className=\"p-3 text-dim-gray font-mono text-sm\">\n                                  {new Date(company.createdAt).toLocaleDateString()}\n                                </td>\n                                <td className=\"p-3\">\n                                  <div className=\"flex gap-2\">\n                                    {company.verificationStatus !== 'verified' && (\n                                      <Button\n                                        size=\"sm\"\n                                        onClick={() => verifyUserMutation.mutate({ userId: company.id, verificationStatus: 'verified' })}\n                                        disabled={verifyUserMutation.isPending}\n                                        className=\"bg-green-500/20 text-green-400 border border-green-500 hover:bg-green-500/30 font-mono text-xs px-2 py-1\"\n                                      >\n                                        <CheckCircle className=\"h-3 w-3 mr-1\" />\n                                        ✅ Approve\n                                      </Button>\n                                    )}\n                                    {company.verificationStatus !== 'rejected' && (\n                                      <Button\n                                        size=\"sm\"\n                                        onClick={() => verifyUserMutation.mutate({ userId: company.id, verificationStatus: 'rejected' })}\n                                        disabled={verifyUserMutation.isPending}\n                                        className=\"bg-red-500/20 text-red-400 border border-red-500 hover:bg-red-500/30 font-mono text-xs px-2 py-1\"\n                                      >\n                                        <XCircle className=\"h-3 w-3 mr-1\" />\n                                        ❌ Reject\n                                      </Button>\n                                    )}\n                                    {company.verificationStatus !== 'pending' && (\n                                      <Button\n                                        size=\"sm\"\n                                        onClick={() => verifyUserMutation.mutate({ userId: company.id, verificationStatus: 'pending' })}\n                                        disabled={verifyUserMutation.isPending}\n                                        className=\"bg-yellow-500/20 text-yellow-400 border border-yellow-500 hover:bg-yellow-500/30 font-mono text-xs px-2 py-1\"\n                                      >\n                                        <AlertTriangle className=\"h-3 w-3 mr-1\" />\n                                        Reset to Pending\n                                      </Button>\n                                    )}\n                                  </div>\n                                </td>\n                              </tr>\n                            ))}\n                          </tbody>\n                        </table>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {activeTab === \"programs\" && (\n            <div className=\"bg-terminal border border-matrix/30 p-6 relative overflow-hidden\">\n              <div className=\"absolute inset-0 bg-gradient-to-br from-matrix/5 to-transparent\"></div>\n              <div className=\"relative z-10\">\n                <h3 className=\"text-lg font-mono font-bold text-matrix mb-6 uppercase tracking-wider\">\n                  {\">> Program_Management_Console\"}\n                </h3>\n                <div className=\"text-center py-12\">\n                  <div className=\"text-dim-gray font-mono text-lg\">[INTERFACE_LOADING...]</div>\n                  <div className=\"text-dim-gray font-mono text-sm mt-2\">Program management interface coming soon...</div>\n                  <div className=\"mt-6 text-matrix font-mono text-xs\">\n                    {\">> Initializing security protocols...\"}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === \"settings\" && (\n            <div className=\"bg-terminal border border-matrix/30 p-6 relative overflow-hidden\">\n              <div className=\"absolute inset-0 bg-gradient-to-br from-matrix/5 to-transparent\"></div>\n              <div className=\"relative z-10\">\n                <h3 className=\"text-lg font-mono font-bold text-matrix mb-6 uppercase tracking-wider\">\n                  {\">> System_Settings_Console\"}\n                </h3>\n                <div className=\"text-center py-12\">\n                  <div className=\"text-dim-gray font-mono text-lg\">[SYSTEM_CONFIG_LOADING...]</div>\n                  <div className=\"text-dim-gray font-mono text-sm mt-2\">System settings interface coming soon...</div>\n                  <div className=\"mt-6 text-matrix font-mono text-xs\">\n                    {\">> Accessing system configuration...\"}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </main>\n        {/* Quick Actions */}\n        <div className=\"mt-8\">\n          <h2 className=\"text-2xl font-mono font-bold text-light-gray mb-4\">\n            Quick Actions\n          </h2>\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            <Card className=\"terminal-card cursor-pointer hover:border-matrix/50 transition-colors\"\n                  onClick={() => window.location.href = '/admin/withdrawals'}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"p-2 bg-matrix/20 rounded\">\n                    <DollarSign className=\"h-6 w-6 text-matrix\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-mono text-light-gray\">Fiat Withdrawals</h3>\n                    <p className=\"text-sm text-dim-gray\">Manage PayPal/Wise withdrawals</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"terminal-card cursor-pointer hover:border-matrix/50 transition-colors\"\n                  onClick={() => window.location.href = '/admin/crypto/withdrawals'}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"p-2 bg-matrix/20 rounded\">\n                    <Coins className=\"h-6 w-6 text-matrix\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-mono text-light-gray\">Crypto Withdrawals</h3>\n                    <p className=\"text-sm text-dim-gray\">Approve crypto withdrawal requests</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"terminal-card cursor-pointer hover:border-matrix/50 transition-colors\"\n                  onClick={() => window.location.href = '/admin/company-wallets'}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"p-2 bg-matrix/20 rounded\">\n                    <Building2 className=\"h-6 w-6 text-matrix\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-mono text-light-gray\">Company Wallets</h3>\n                    <p className=\"text-sm text-dim-gray\">Manage company balances</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Users Management */}\n        <div className=\"mt-8\">\n          <h2 className=\"text-2xl font-mono font-bold text-light-gray mb-4\">\n            Users Management\n          </h2>\n          <div className=\"terminal-card p-6 rounded-lg border border-matrix/30\">\n            {usersLoading ? (\n              <div className=\"text-center text-dim-gray\">Loading users...</div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"border-b border-matrix/30\">\n                      <th className=\"text-left p-3 text-light-gray\">Username</th>\n                      <th className=\"text-left p-3 text-light-gray\">Email</th>\n                      <th className=\"text-left p-3 text-light-gray\">Type</th>\n                      <th className=\"text-left p-3 text-light-gray\">Verified</th>\n                      <th className=\"text-left p-3 text-light-gray\">Joined</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {users?.slice(0, 10).map((user: any) => (\n                      <tr key={user.id} className=\"border-b border-matrix/20\">\n                        <td className=\"p-3 text-light-gray font-mono\">{user.username}</td>\n                        <td className=\"p-3 text-dim-gray\">{user.email}</td>\n                        <td className=\"p-3\">\n                          <Badge className={user.userType === 'company' ? 'bg-blue-500' : 'bg-green-500'}>\n                            {user.userType}\n                          </Badge>\n                        </td>\n                        <td className=\"p-3\">\n                          {user.emailVerified ? (\n                            <Badge className=\"bg-green-500\">Verified</Badge>\n                          ) : (\n                            <Badge className=\"bg-red-500\">Pending</Badge>\n                          )}\n                        </td>\n                        <td className=\"p-3 text-dim-gray text-sm\">\n                          {new Date(user.createdAt).toLocaleDateString()}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </div>\n        </div>\n    </div>\n  );\n}","size_bytes":34011},"client/src/pages/admin-login-page.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Link, useLocation } from \"wouter\";\nimport { Loader2, Shield, Eye, EyeOff, ArrowLeft, Terminal, Lock } from \"lucide-react\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst adminLoginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype AdminLoginFormValues = z.infer<typeof adminLoginSchema>;\n\nexport default function AdminLoginPage() {\n  const [location, navigate] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  // Debug logging\n  useEffect(() => {\n    console.log(\"AdminLoginPage mounted, current location:\", location);\n  }, [location]);\n\n\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<AdminLoginFormValues>({\n    resolver: zodResolver(adminLoginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: AdminLoginFormValues) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"/api/admin/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\",\n        body: JSON.stringify(data),\n      });\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        throw new Error(result.message || \"Login failed\");\n      }\n\n      // Store the admin token in localStorage for API calls\n      if (result.token) {\n        localStorage.setItem('adminToken', result.token);\n      }\n\n      toast({\n        title: \"Access Granted\",\n        description: \"Welcome to the cyber command center\",\n      });\n\n      navigate(\"/admin/dashboard\");\n    } catch (error) {\n      toast({\n        title: \"Access Denied\",\n        description: error instanceof Error ? error.message : \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-deep-black flex items-center justify-center p-4 relative overflow-hidden\">\n      <MatrixBackground />\n      \n      {/* Back button */}\n      <Link \n        to=\"/\" \n        className=\"absolute top-6 left-6 text-matrix hover:text-matrix/80 flex items-center gap-2 z-20 transition-colors duration-300\"\n      >\n        <ArrowLeft className=\"h-5 w-5\" />\n        <span className=\"text-sm font-mono\">BACK_TO_HOME</span>\n      </Link>\n\n      {/* Main login container */}\n      <div className=\"w-full max-w-md relative z-10\">\n        {/* Glowing effects */}\n        <div className=\"absolute -top-20 -left-20 w-40 h-40 bg-matrix/20 rounded-full blur-3xl animate-pulse\"></div>\n        <div className=\"absolute -bottom-20 -right-20 w-40 h-40 bg-matrix/10 rounded-full blur-3xl animate-pulse\"></div>\n        \n        {/* Login card */}\n        <div className=\"relative bg-terminal/90 backdrop-blur-sm border border-matrix/30 rounded-lg p-8 shadow-2xl\">\n          {/* Animated border effect */}\n          <div className=\"absolute inset-0 bg-gradient-to-r from-matrix/0 via-matrix/20 to-matrix/0 rounded-lg\">\n            <div className=\"absolute inset-[1px] bg-terminal/90 rounded-lg\"></div>\n          </div>\n          \n          <div className=\"relative z-10\">\n            {/* Header section */}\n            <div className=\"text-center mb-8\">\n              <div className=\"flex justify-center mb-6\">\n                <div className=\"relative\">\n                  <div className=\"absolute inset-0 bg-matrix/30 rounded-full blur-xl\"></div>\n                  <div className=\"relative h-16 w-16 bg-terminal border-2 border-matrix rounded-full flex items-center justify-center\">\n                    <Shield className=\"h-8 w-8 text-matrix\" />\n                  </div>\n                </div>\n              </div>\n              \n              <h1 className=\"text-4xl font-mono font-bold text-matrix mb-2 tracking-wider\">\n                CYBER HUNT\n              </h1>\n              <h2 className=\"text-2xl font-mono font-bold text-light-gray mb-3 tracking-wide\">\n                ADMIN PANEL\n              </h2>\n              <div className=\"flex items-center justify-center gap-2 text-matrix/70 text-sm font-mono\">\n                <Lock className=\"h-4 w-4\" />\n                <span>RESTRICTED_ACCESS_ONLY</span>\n              </div>\n            </div>\n\n            {/* Login form */}\n            <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n              {/* Email field */}\n              <div className=\"space-y-2\">\n                <label className=\"block text-matrix text-sm font-mono tracking-wide\">\n                  &gt; EMAIL_ADDRESS\n                </label>\n                <div className=\"relative\">\n                  <input\n                    type=\"email\"\n                    className=\"w-full bg-terminal/50 border border-matrix/30 rounded px-4 py-3 font-mono text-light-gray placeholder-dim-gray focus:outline-none focus:border-matrix focus:ring-2 focus:ring-matrix/30 transition-all duration-300\"\n                    placeholder=\"admin@cyberhunt.com\"\n                    style={{ caretColor: '#00ff00' }}\n                    {...register('email')}\n                    autoComplete=\"email\"\n                  />\n                  <div className=\"absolute inset-0 border border-matrix/20 rounded pointer-events-none opacity-0 hover:opacity-100 transition-opacity duration-300\"></div>\n                </div>\n                {errors.email && (\n                  <div className=\"text-alert-red text-xs font-mono flex items-center gap-1\">\n                    <span>&gt;</span>\n                    {errors.email.message}\n                  </div>\n                )}\n              </div>\n\n              {/* Password field */}\n              <div className=\"space-y-2\">\n                <label className=\"block text-matrix text-sm font-mono tracking-wide\">\n                  &gt; PASSWORD\n                </label>\n                <div className=\"relative\">\n                  <input\n                    type={showPassword ? \"text\" : \"password\"}\n                    className=\"w-full bg-terminal/50 border border-matrix/30 rounded px-4 py-3 pr-12 font-mono text-light-gray placeholder-dim-gray focus:outline-none focus:border-matrix focus:ring-2 focus:ring-matrix/30 transition-all duration-300\"\n                    placeholder=\"••••••••••••\"\n                    style={{ caretColor: '#00ff00' }}\n                    {...register('password')}\n                    autoComplete=\"current-password\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-1/2 -translate-y-1/2 text-dim-gray hover:text-matrix transition-colors duration-200\"\n                  >\n                    {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                  </button>\n                </div>\n                {errors.password && (\n                  <div className=\"text-alert-red text-xs font-mono flex items-center gap-1\">\n                    <span>&gt;</span>\n                    {errors.password.message}\n                  </div>\n                )}\n              </div>\n\n              {/* Login button */}\n              <div className=\"pt-4\">\n                <Button\n                  type=\"submit\"\n                  disabled={isLoading}\n                  className=\"w-full bg-matrix/10 hover:bg-matrix/20 border-2 border-matrix text-matrix font-mono text-lg py-3 rounded transition-all duration-300 hover:shadow-[0_0_20px_rgba(0,255,0,0.3)] disabled:opacity-50 disabled:cursor-not-allowed tracking-wider\"\n                >\n                  {isLoading ? (\n                    <span className=\"flex items-center justify-center\">\n                      <Loader2 className=\"mr-3 h-5 w-5 animate-spin\" />\n                      AUTHENTICATING...\n                    </span>\n                  ) : (\n                    <span className=\"flex items-center justify-center\">\n                      <Terminal className=\"mr-3 h-5 w-5\" />\n                      INITIATE_LOGIN\n                    </span>\n                  )}\n                </Button>\n              </div>\n            </form>\n\n            {/* Footer */}\n            <div className=\"mt-8 text-center\">\n              <p className=\"text-gray-500 text-xs font-mono\">\n                UNAUTHORIZED_ACCESS_PROHIBITED\n              </p>\n              <div className=\"flex justify-center mt-2\">\n                <div className=\"w-16 h-[1px] bg-gradient-to-r from-transparent via-green-400/50 to-transparent\"></div>\n              </div>\n            </div>\n\n            {/* Credentials hint for testing */}\n            <div className=\"mt-6 p-4 bg-green-400/5 border border-green-400/20 rounded text-center\">\n              <p className=\"text-green-400/80 text-xs font-mono mb-2\">DEFAULT CREDENTIALS:</p>\n              <p className=\"text-white text-xs font-mono\">Email: admin@cyberhunt.com</p>\n              <p className=\"text-white text-xs font-mono\">Password: AdminSecure123!</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Scanning line effect */}\n        <div className=\"absolute inset-0 pointer-events-none\">\n          <div className=\"absolute top-0 left-0 w-full h-[2px] bg-gradient-to-r from-transparent via-green-400/60 to-transparent animate-pulse\"></div>\n        </div>\n      </div>\n\n      {/* Additional matrix effects */}\n      <div className=\"absolute top-1/4 left-10 w-1 h-32 bg-gradient-to-b from-green-400/0 via-green-400/40 to-green-400/0 animate-pulse\"></div>\n      <div className=\"absolute bottom-1/4 right-10 w-1 h-24 bg-gradient-to-b from-green-400/0 via-green-400/40 to-green-400/0 animate-pulse\"></div>\n    </div>\n  );\n}\n","size_bytes":10128},"client/src/pages/admin-page.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport {\n  Users,\n  Shield,\n  Activity,\n  Settings,\n  AlertTriangle,\n  User,\n  Bug,\n  CheckCircle,\n  XCircle,\n  Search,\n  Filter,\n  MoreVertical,\n  Trash,\n  Edit\n} from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport default function AdminPage() {\n  const { user } = useAuth();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"users\");\n\n  // Fetch users data\n  const { data: users = [], isLoading: usersLoading } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n    queryFn: async () => {\n      // This would fetch from your API in production\n      return [];\n    }\n  });\n\n  // Fetch programs data\n  const { data: programs = [], isLoading: programsLoading } = useQuery({\n    queryKey: [\"/api/admin/programs\"],\n    queryFn: async () => {\n      // This would fetch from your API in production\n      return [];\n    }\n  });\n\n  // Fetch submissions data\n  const { data: submissions = [], isLoading: submissionsLoading } = useQuery({\n    queryKey: [\"/api/admin/submissions\"],\n    queryFn: async () => {\n      // This would fetch from your API in production\n      return [];\n    }\n  });\n\n  return (\n    <div className=\"min-h-screen bg-deep-black\">\n      <MatrixBackground />\n      <Navbar />\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 relative z-10\">\n        {/* Admin Header */}\n        <div className=\"terminal-card p-6 rounded-lg mb-8 relative overflow-hidden border-matrix/30\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h1 className=\"text-2xl font-mono font-bold text-light-gray\">\n                Admin Dashboard\n              </h1>\n              <p className=\"text-dim-gray font-mono\">\n                System management and oversight\n              </p>\n            </div>\n            <Shield className=\"h-8 w-8 text-matrix\" />\n          </div>\n        </div>\n\n        {/* Admin Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n          <Card className=\"bg-terminal border-matrix/30\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <p className=\"text-dim-gray font-mono text-sm\">Total Users</p>\n                  <p className=\"text-2xl text-light-gray font-mono\">{users.length}</p>\n                </div>\n                <Users className=\"h-8 w-8 text-matrix\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-terminal border-matrix/30\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <p className=\"text-dim-gray font-mono text-sm\">Active Programs</p>\n                  <p className=\"text-2xl text-light-gray font-mono\">{programs.length}</p>\n                </div>\n                <Shield className=\"h-8 w-8 text-matrix\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-terminal border-matrix/30\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <p className=\"text-dim-gray font-mono text-sm\">Pending Reviews</p>\n                  <p className=\"text-2xl text-light-gray font-mono\">\n                    {submissions.filter(s => s.status === 'pending').length}\n                  </p>\n                </div>\n                <Activity className=\"h-8 w-8 text-warning-yellow\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-terminal border-matrix/30\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <p className=\"text-dim-gray font-mono text-sm\">System Status</p>\n                  <p className=\"text-2xl text-light-gray font-mono\">Active</p>\n                </div>\n                <Settings className=\"h-8 w-8 text-electric-blue animate-spin-slow\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <Tabs defaultValue=\"users\" className=\"space-y-4\">\n          <TabsList className=\"bg-terminal border-b border-matrix/30 w-full justify-start rounded-b-none h-12\">\n            <TabsTrigger value=\"users\" className=\"data-[state=active]:text-matrix data-[state=active]:border-matrix\">\n              Users\n            </TabsTrigger>\n            <TabsTrigger value=\"programs\" className=\"data-[state=active]:text-matrix data-[state=active]:border-matrix\">\n              Programs\n            </TabsTrigger>\n            <TabsTrigger value=\"submissions\" className=\"data-[state=active]:text-matrix data-[state=active]:border-matrix\">\n              Submissions\n            </TabsTrigger>\n            <TabsTrigger value=\"settings\" className=\"data-[state=active]:text-matrix data-[state=active]:border-matrix\">\n              Settings\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Users Tab */}\n          <TabsContent value=\"users\">\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <div className=\"flex gap-2\">\n                  <Input\n                    placeholder=\"Search users...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"w-64 bg-terminal border-matrix/30\"\n                  />\n                  <Button variant=\"outline\" className=\"border-matrix/30\">\n                    <Filter className=\"h-4 w-4 mr-2\" />\n                    Filter\n                  </Button>\n                </div>\n                <Button className=\"bg-matrix text-black hover:bg-matrix/80\">\n                  Add User\n                </Button>\n              </div>\n\n              <div className=\"bg-terminal border border-matrix/30 rounded-lg overflow-hidden\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"border-b border-matrix/30\">\n                      <th className=\"p-4 text-left text-dim-gray font-mono\">User</th>\n                      <th className=\"p-4 text-left text-dim-gray font-mono\">Role</th>\n                      <th className=\"p-4 text-left text-dim-gray font-mono\">Status</th>\n                      <th className=\"p-4 text-left text-dim-gray font-mono\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {users.map((user) => (\n                      <tr key={user.id} className=\"border-b border-matrix/10\">\n                        <td className=\"p-4\">\n                          <div className=\"flex items-center\">\n                            <User className=\"h-5 w-5 text-matrix mr-2\" />\n                            <span className=\"text-light-gray font-mono\">{user.username}</span>\n                          </div>\n                        </td>\n                        <td className=\"p-4 text-light-gray font-mono\">{user.role}</td>\n                        <td className=\"p-4\">\n                          <span className=\"px-2 py-1 rounded text-xs font-mono bg-matrix/10 text-matrix\">\n                            Active\n                          </span>\n                        </td>\n                        <td className=\"p-4\">\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                                <MoreVertical className=\"h-4 w-4\" />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                              <DropdownMenuItem>\n                                <Edit className=\"h-4 w-4 mr-2\" />\n                                Edit\n                              </DropdownMenuItem>\n                              <DropdownMenuItem className=\"text-alert-red\">\n                                <Trash className=\"h-4 w-4 mr-2\" />\n                                Delete\n                              </DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Other tabs would be implemented similarly */}\n          <TabsContent value=\"programs\">\n            <div className=\"text-dim-gray font-mono\">Programs management coming soon</div>\n          </TabsContent>\n\n          <TabsContent value=\"submissions\">\n            <div className=\"text-dim-gray font-mono\">Submissions management coming soon</div>\n          </TabsContent>\n\n          <TabsContent value=\"settings\">\n            <div className=\"text-dim-gray font-mono\">System settings coming soon</div>\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n}\n","size_bytes":9731},"client/src/pages/admin-payment-dashboard.tsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';\nimport { Button } from '../components/ui/button';\nimport { Badge } from '../components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '../components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';\nimport { Textarea } from '../components/ui/textarea';\nimport { DollarSign, Shield, AlertTriangle, TrendingUp, Clock, Users } from 'lucide-react';\n\ninterface PaymentAnalytics {\n  totalPayments: { count: number; total: number };\n  totalPayouts: { count: number; total: number };\n  pendingEscrow: { count: number; total: number };\n  commissions: { totalCommissions: number; count: number };\n}\n\ninterface PaymentDispute {\n  id: number;\n  disputeType: string;\n  description: string;\n  status: string;\n  resolution: string | null;\n  createdAt: string;\n  resolvedAt: string | null;\n  submissionTitle: string;\n  disputedByName: string;\n}\n\nexport default function AdminPaymentDashboard() {\n  const [analytics, setAnalytics] = useState<PaymentAnalytics | null>(null);\n  const [disputes, setDisputes] = useState<PaymentDispute[]>([]);\n  const [selectedDispute, setSelectedDispute] = useState<PaymentDispute | null>(null);\n  const [disputeStatus, setDisputeStatus] = useState('');\n  const [disputeResolution, setDisputeResolution] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [updateLoading, setUpdateLoading] = useState(false);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      // Fetch payment analytics\n      const analyticsResponse = await fetch('/api/admin/payment-analytics', {\n        credentials: 'include'\n      });\n      if (analyticsResponse.ok) {\n        const analyticsData = await analyticsResponse.json();\n        setAnalytics(analyticsData);\n      }\n\n      // Fetch payment disputes\n      const disputesResponse = await fetch('/api/admin/disputes', {\n        credentials: 'include'\n      });\n      if (disputesResponse.ok) {\n        const disputesData = await disputesResponse.json();\n        setDisputes(disputesData);\n      }\n\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching admin payment data:', error);\n      setLoading(false);\n    }\n  };\n\n  const handleResolveDispute = async () => {\n    if (!selectedDispute || !disputeStatus) return;\n\n    setUpdateLoading(true);\n    try {\n      const response = await fetch(`/api/admin/disputes/${selectedDispute.id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          status: disputeStatus,\n          resolution: disputeResolution\n        })\n      });\n\n      if (response.ok) {\n        setSelectedDispute(null);\n        setDisputeStatus('');\n        setDisputeResolution('');\n        fetchData(); // Refresh data\n      } else {\n        const error = await response.json();\n        alert(`Error: ${error.message}`);\n      }\n    } catch (error) {\n      console.error('Error resolving dispute:', error);\n      alert('Failed to resolve dispute');\n    } finally {\n      setUpdateLoading(false);\n    }\n  };\n\n  const formatCurrency = (amount: number, currency: string = 'USD') => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency\n    }).format(amount / 100);\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusColors = {\n      open: 'bg-red-500',\n      under_review: 'bg-yellow-500',\n      resolved: 'bg-green-500',\n      rejected: 'bg-gray-500'\n    };\n\n    return (\n      <Badge className={`${statusColors[status] || 'bg-gray-500'} text-white`}>\n        {status.replace('_', ' ').charAt(0).toUpperCase() + status.replace('_', ' ').slice(1)}\n      </Badge>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-deep-black text-light-gray p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center\">Loading admin payment dashboard...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-deep-black text-light-gray p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-mono font-bold text-matrix mb-2\">Payment Administration</h1>\n          <p className=\"text-dim-gray\">Monitor and manage all payment activities, disputes, and analytics</p>\n        </div>\n\n        {/* Analytics Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"terminal-card\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-dim-gray\">Total Payments</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-green-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-light-gray\">\n                {analytics ? formatCurrency(analytics.totalPayments.total || 0) : '$0.00'}\n              </div>\n              <p className=\"text-xs text-dim-gray\">\n                {analytics?.totalPayments.count || 0} transactions\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"terminal-card\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-dim-gray\">Total Payouts</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-blue-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-light-gray\">\n                {analytics ? formatCurrency(analytics.totalPayouts.total || 0) : '$0.00'}\n              </div>\n              <p className=\"text-xs text-dim-gray\">\n                {analytics?.totalPayouts.count || 0} payouts\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"terminal-card\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-dim-gray\">Pending Escrow</CardTitle>\n              <Shield className=\"h-4 w-4 text-yellow-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-light-gray\">\n                {analytics ? formatCurrency(analytics.pendingEscrow.total || 0) : '$0.00'}\n              </div>\n              <p className=\"text-xs text-dim-gray\">\n                {analytics?.pendingEscrow.count || 0} accounts\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"terminal-card\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-dim-gray\">Platform Revenue</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-matrix\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-light-gray\">\n                {analytics ? formatCurrency(analytics.commissions.totalCommissions || 0) : '$0.00'}\n              </div>\n              <p className=\"text-xs text-dim-gray\">\n                {analytics?.commissions.count || 0} commissions\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"disputes\" className=\"space-y-6\">\n          <TabsList className=\"bg-terminal border border-matrix/30\">\n            <TabsTrigger value=\"disputes\" className=\"data-[state=active]:bg-matrix/20\">Payment Disputes</TabsTrigger>\n            <TabsTrigger value=\"analytics\" className=\"data-[state=active]:bg-matrix/20\">Analytics</TabsTrigger>\n            <TabsTrigger value=\"settings\" className=\"data-[state=active]:bg-matrix/20\">Settings</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"disputes\">\n            <Card className=\"terminal-card\">\n              <CardHeader>\n                <CardTitle className=\"text-xl font-mono text-matrix\">Payment Disputes</CardTitle>\n                <CardDescription className=\"text-dim-gray\">\n                  Manage and resolve payment-related disputes\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {disputes.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {disputes.map((dispute) => (\n                      <div key={dispute.id} className=\"flex items-center justify-between p-4 border border-matrix/20 rounded-lg\">\n                        <div className=\"flex items-center space-x-4\">\n                          <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />\n                          <div>\n                            <div className=\"font-mono text-light-gray\">{dispute.submissionTitle}</div>\n                            <div className=\"text-sm text-dim-gray\">\n                              {dispute.disputeType.replace('_', ' ')} • by {dispute.disputedByName}\n                            </div>\n                            <div className=\"text-sm text-dim-gray mt-1\">\n                              {dispute.description.substring(0, 100)}...\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-4\">\n                          {getStatusBadge(dispute.status)}\n                          <Dialog>\n                            <DialogTrigger asChild>\n                              <Button \n                                variant=\"outline\" \n                                size=\"sm\"\n                                onClick={() => {\n                                  setSelectedDispute(dispute);\n                                  setDisputeStatus(dispute.status);\n                                  setDisputeResolution(dispute.resolution || '');\n                                }}\n                                className=\"border-matrix/30 text-matrix hover:bg-matrix/10\"\n                              >\n                                Review\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent className=\"bg-terminal border border-matrix/30 text-light-gray max-w-2xl\">\n                              <DialogHeader>\n                                <DialogTitle className=\"text-matrix font-mono\">\n                                  Dispute Resolution\n                                </DialogTitle>\n                                <DialogDescription className=\"text-dim-gray\">\n                                  Review and resolve the payment dispute\n                                </DialogDescription>\n                              </DialogHeader>\n                              <div className=\"space-y-4\">\n                                <div>\n                                  <h4 className=\"font-mono text-light-gray mb-2\">Dispute Details</h4>\n                                  <p className=\"text-dim-gray\">{dispute.description}</p>\n                                </div>\n                                <div className=\"space-y-2\">\n                                  <label className=\"text-light-gray font-mono\">Status</label>\n                                  <Select value={disputeStatus} onValueChange={setDisputeStatus}>\n                                    <SelectTrigger className=\"bg-terminal border-matrix/30 text-light-gray\">\n                                      <SelectValue />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      <SelectItem value=\"under_review\">Under Review</SelectItem>\n                                      <SelectItem value=\"resolved\">Resolved</SelectItem>\n                                      <SelectItem value=\"rejected\">Rejected</SelectItem>\n                                    </SelectContent>\n                                  </Select>\n                                </div>\n                                <div className=\"space-y-2\">\n                                  <label className=\"text-light-gray font-mono\">Resolution</label>\n                                  <Textarea\n                                    value={disputeResolution}\n                                    onChange={(e) => setDisputeResolution(e.target.value)}\n                                    placeholder=\"Enter resolution details...\"\n                                    className=\"bg-terminal border-matrix/30 text-light-gray\"\n                                  />\n                                </div>\n                                <Button \n                                  onClick={handleResolveDispute}\n                                  disabled={updateLoading || !disputeStatus}\n                                  className=\"w-full bg-matrix hover:bg-matrix-dark text-black font-mono\"\n                                >\n                                  {updateLoading ? 'Updating...' : 'Update Dispute'}\n                                </Button>\n                              </div>\n                            </DialogContent>\n                          </Dialog>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center text-dim-gray py-8\">\n                    <AlertTriangle className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                    <p>No payment disputes</p>\n                    <p className=\"text-sm\">All payments are proceeding smoothly</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card className=\"terminal-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-xl font-mono text-matrix\">Revenue Breakdown</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-dim-gray\">Platform Commissions</span>\n                      <span className=\"text-light-gray font-mono\">\n                        {analytics ? formatCurrency(analytics.commissions.totalCommissions || 0) : '$0.00'}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-dim-gray\">Processing Fees</span>\n                      <span className=\"text-light-gray font-mono\">$0.00</span>\n                    </div>\n                    <div className=\"border-t border-matrix/20 pt-4\">\n                      <div className=\"flex justify-between font-mono\">\n                        <span className=\"text-matrix\">Total Revenue</span>\n                        <span className=\"text-matrix\">\n                          {analytics ? formatCurrency(analytics.commissions.totalCommissions || 0) : '$0.00'}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"terminal-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-xl font-mono text-matrix\">Transaction Volume</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-dim-gray\">Incoming Payments</span>\n                      <span className=\"text-light-gray font-mono\">\n                        {analytics?.totalPayments.count || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-dim-gray\">Outgoing Payouts</span>\n                      <span className=\"text-light-gray font-mono\">\n                        {analytics?.totalPayouts.count || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-dim-gray\">Active Escrows</span>\n                      <span className=\"text-light-gray font-mono\">\n                        {analytics?.pendingEscrow.count || 0}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"settings\">\n            <Card className=\"terminal-card\">\n              <CardHeader>\n                <CardTitle className=\"text-xl font-mono text-matrix\">Payment Settings</CardTitle>\n                <CardDescription className=\"text-dim-gray\">\n                  Configure platform payment parameters\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  <div>\n                    <h4 className=\"font-mono text-light-gray mb-4\">Commission Rates</h4>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-dim-gray\">Standard Rate</span>\n                        <span className=\"text-matrix font-mono\">15%</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-dim-gray\">Premium Programs</span>\n                        <span className=\"text-matrix font-mono\">12%</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-mono text-light-gray mb-4\">Payout Limits</h4>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-dim-gray\">Daily Limit</span>\n                        <span className=\"text-matrix font-mono\">$10,000</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-dim-gray\">Monthly Limit</span>\n                        <span className=\"text-matrix font-mono\">$100,000</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":19053},"client/src/pages/admin-withdrawals-page.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface Withdrawal {\n  id: number;\n  amount: number;\n  method: string;\n  destination: string;\n  status: string;\n  notes: string | null;\n  createdAt: string;\n  updatedAt: string | null;\n  username: string;\n  email: string;\n}\n\nexport default function AdminWithdrawalsPage() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedWithdrawal, setSelectedWithdrawal] = useState<Withdrawal | null>(null);\n  const [newStatus, setNewStatus] = useState(\"\");\n  const [notes, setNotes] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const { data: withdrawals, isLoading } = useQuery({\n    queryKey: [\"/api/admin/withdrawals\"],\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ withdrawalId, status, notes }: { withdrawalId: number; status: string; notes: string }) => {\n      const response = await fetch(`/api/admin/withdrawals/${withdrawalId}/status`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem('adminToken')}`\n        },\n        body: JSON.stringify({ status, notes }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update withdrawal status\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Withdrawal status updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/withdrawals\"] });\n      setIsDialogOpen(false);\n      setSelectedWithdrawal(null);\n      setNewStatus(\"\");\n      setNotes(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update withdrawal status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUpdateStatus = () => {\n    if (!selectedWithdrawal || !newStatus) return;\n\n    updateStatusMutation.mutate({\n      withdrawalId: selectedWithdrawal.id,\n      status: newStatus,\n      notes,\n    });\n  };\n\n  const openUpdateDialog = (withdrawal: Withdrawal) => {\n    setSelectedWithdrawal(withdrawal);\n    setNewStatus(withdrawal.status);\n    setNotes(withdrawal.notes || \"\");\n    setIsDialogOpen(true);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return 'bg-green-500';\n      case 'approved': return 'bg-blue-500';\n      case 'rejected': return 'bg-red-500';\n      default: return 'bg-yellow-500';\n    }\n  };\n\n  const getMethodDisplay = (method: string) => {\n    switch (method) {\n      case 'paypal': return 'PayPal';\n      case 'wise': return 'Wise';\n      case 'crypto': return 'Cryptocurrency';\n      default: return method.charAt(0).toUpperCase() + method.slice(1);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 relative z-10\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-mono font-bold text-light-gray mb-2\">\n            Withdrawal Management\n          </h1>\n          <p className=\"text-dim-gray\">\n            Manage and process withdrawal requests from users\n          </p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"text-center text-dim-gray\">Loading withdrawals...</div>\n        ) : (\n          <div className=\"terminal-card p-6 rounded-lg border border-matrix/30\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b border-matrix/30\">\n                    <th className=\"text-left p-3 text-light-gray\">User</th>\n                    <th className=\"text-left p-3 text-light-gray\">Amount</th>\n                    <th className=\"text-left p-3 text-light-gray\">Method</th>\n                    <th className=\"text-left p-3 text-light-gray\">Destination</th>\n                    <th className=\"text-left p-3 text-light-gray\">Status</th>\n                    <th className=\"text-left p-3 text-light-gray\">Date</th>\n                    <th className=\"text-left p-3 text-light-gray\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {withdrawals?.map((withdrawal: Withdrawal) => (\n                    <tr key={withdrawal.id} className=\"border-b border-matrix/20\">\n                      <td className=\"p-3\">\n                        <div>\n                          <div className=\"text-light-gray font-mono\">{withdrawal.username}</div>\n                          <div className=\"text-dim-gray text-sm\">{withdrawal.email}</div>\n                        </div>\n                      </td>\n                      <td className=\"p-3 text-matrix font-mono\">${withdrawal.amount}</td>\n                      <td className=\"p-3 text-light-gray\">{getMethodDisplay(withdrawal.method)}</td>\n                      <td className=\"p-3 text-dim-gray font-mono text-sm\">{withdrawal.destination}</td>\n                      <td className=\"p-3\">\n                        <Badge className={`${getStatusColor(withdrawal.status)} text-white`}>\n                          {withdrawal.status}\n                        </Badge>\n                      </td>\n                      <td className=\"p-3 text-dim-gray text-sm\">\n                        {new Date(withdrawal.createdAt).toLocaleDateString()}\n                      </td>\n                      <td className=\"p-3\">\n                        <Button\n                          size=\"sm\"\n                          onClick={() => openUpdateDialog(withdrawal)}\n                          className=\"bg-matrix/20 hover:bg-matrix/30 text-matrix border border-matrix/30\"\n                        >\n                          Update\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n\n              {withdrawals?.length === 0 && (\n                <div className=\"text-center text-dim-gray py-8\">\n                  No withdrawal requests found\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogContent className=\"bg-surface border border-matrix/30\">\n            <DialogHeader>\n              <DialogTitle className=\"text-light-gray\">Update Withdrawal Status</DialogTitle>\n              <DialogDescription className=\"text-dim-gray\">\n                Change the status of the withdrawal request. When set to \"completed\", \n                an automatic email notification will be sent to the user.\n              </DialogDescription>\n            </DialogHeader>\n\n            {selectedWithdrawal && (\n              <div className=\"space-y-4\">\n                <div className=\"bg-deep-black p-4 rounded border border-matrix/20\">\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-dim-gray\">User:</span>\n                      <span className=\"text-light-gray ml-2\">{selectedWithdrawal.username}</span>\n                    </div>\n                    <div>\n                      <span className=\"text-dim-gray\">Amount:</span>\n                      <span className=\"text-matrix ml-2\">${selectedWithdrawal.amount}</span>\n                    </div>\n                    <div>\n                      <span className=\"text-dim-gray\">Method:</span>\n                      <span className=\"text-light-gray ml-2\">{getMethodDisplay(selectedWithdrawal.method)}</span>\n                    </div>\n                    <div>\n                      <span className=\"text-dim-gray\">Destination:</span>\n                      <span className=\"text-light-gray ml-2\">{selectedWithdrawal.destination}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"text-light-gray text-sm mb-2 block\">Status</label>\n                  <Select value={newStatus} onValueChange={setNewStatus}>\n                    <SelectTrigger className=\"bg-surface border-matrix/30\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-surface border border-matrix/30\">\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"approved\">Approved</SelectItem>\n                      <SelectItem value=\"completed\">Completed</SelectItem>\n                      <SelectItem value=\"rejected\">Rejected</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"text-light-gray text-sm mb-2 block\">Notes (Optional)</label>\n                  <Textarea\n                    value={notes}\n                    onChange={(e) => setNotes(e.target.value)}\n                    className=\"bg-surface border-matrix/30 text-light-gray\"\n                    placeholder=\"Add any notes about this withdrawal...\"\n                    rows={3}\n                  />\n                </div>\n\n                {newStatus === 'completed' && (\n                  <div className=\"bg-matrix/10 border border-matrix/30 p-3 rounded\">\n                    <p className=\"text-matrix text-sm\">\n                      ⚡ Setting status to \"completed\" will automatically send a payment confirmation email to the user.\n                    </p>\n                  </div>\n                )}\n              </div>\n            )}\n\n            <DialogFooter>\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsDialogOpen(false)}\n                className=\"border-matrix/30 text-light-gray\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleUpdateStatus}\n                disabled={updateStatusMutation.isPending}\n                className=\"bg-matrix hover:bg-matrix/80 text-black\"\n              >\n                {updateStatusMutation.isPending ? \"Updating...\" : \"Update Status\"}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  );\n}\n","size_bytes":10948},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useForm } from \"react-hook-form\";\nimport { Link } from \"wouter\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { Redirect, useLocation } from \"wouter\";\nimport { Loader2, Monitor, User, Eye, EyeOff, ArrowLeft, Github } from \"lucide-react\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\n// Extended login schema\nconst loginSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  rememberMe: z.boolean().optional(),\n  userType: z.enum([\"hacker\", \"company\"]).default(\"hacker\"), // User type (hacker or company)\n});\n\n// Extended registration schema for hackers\nconst registerHackerSchema = z.object({\n  ...insertUserSchema.shape,\n  confirmPassword: z.string().min(6, \"Password must be at least 6 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  termsAccepted: z.boolean().refine(val => val === true, {\n    message: \"You must accept the terms and conditions\",\n  }),\n  userType: z.enum([\"hacker\", \"company\"]).default(\"hacker\")\n}).refine(data => data.password === data.confirmPassword, {\n  message: \"Passwords do not match\",\n  path: [\"confirmPassword\"],\n});\n\n// Extended registration schema for companies\nconst registerCompanySchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string().min(6, \"Password must be at least 6 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  termsAccepted: z.boolean().refine(val => val === true, {\n    message: \"You must accept the terms and conditions\",\n  }),\n  userType: z.enum([\"hacker\", \"company\"]).default(\"company\"),\n  companyName: z.string().min(2, \"Company name is required\"),\n  companyWebsite: z.string().url(\"Please enter a valid URL\").optional(),\n  companySize: z.enum([\"1-10\", \"11-50\", \"51-200\", \"201-500\", \"501-1000\", \"1000+\"]),\n  companyIndustry: z.enum([\n    \"Technology\",\n    \"Finance\",\n    \"Healthcare\",\n    \"E-commerce\",\n    \"Government\",\n    \"Education\",\n    \"Entertainment\",\n    \"Travel\",\n    \"Manufacturing\",\n    \"Other\"\n  ])\n}).refine(data => data.password === data.confirmPassword, {\n  message: \"Passwords do not match\",\n  path: [\"confirmPassword\"],\n});\n\ntype LoginFormValues = z.infer<typeof loginSchema>;\ntype RegisterHackerFormValues = z.infer<typeof registerHackerSchema>;\ntype RegisterCompanyFormValues = z.infer<typeof registerCompanySchema>;\n\nexport default function AuthPage() {\n  const [location] = useLocation();\n  const { user, loginMutation, registerMutation } = useAuth();\n  const { toast } = useToast();\n  const [showPassword, setShowPassword] = useState(false);\n\n  // Initialize state after hooks\n  const showRegisterForm = location.includes('mode=register');\n  const initialMode = !showRegisterForm;\n  const [isLogin, setIsLogin] = useState(initialMode);\n  const [activeTab, setActiveTab] = useState<\"hacker\" | \"company\">(\"hacker\");\n\n  // Form for login\n  const loginForm = useForm<LoginFormValues>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      rememberMe: false,\n      userType: \"hacker\",\n    },\n  });\n\n  // Form for hacker registration\n  const registerHackerForm = useForm<RegisterHackerFormValues>({\n    resolver: zodResolver(registerHackerSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      termsAccepted: false,\n      userType: \"hacker\",\n    },\n  });\n\n  // Form for company registration\n  const registerCompanyForm = useForm<RegisterCompanyFormValues>({\n    resolver: zodResolver(registerCompanySchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      termsAccepted: false,\n      userType: \"company\",\n      companyName: \"\",\n      companyWebsite: \"\",\n      companySize: \"1-10\",\n      companyIndustry: \"Technology\",\n    },\n  });\n\n  // If user is already logged in, redirect to dashboard\n  // This must be AFTER all hooks are called\n  if (user) {\n    return <Redirect to=\"/\" />;\n  }\n\n  // Handle login form submission\n  const onLoginSubmit = (data: LoginFormValues) => {\n    loginMutation.mutate({\n      username: data.username,\n      password: data.password,\n      userType: data.userType,\n    });\n  };\n\n  // Handle hacker registration form submission\n  const onRegisterHackerSubmit = (data: RegisterHackerFormValues) => {\n    registerMutation.mutate({\n      username: data.username,\n      password: data.password,\n      email: data.email,\n      userType: \"hacker\",\n    }, {\n      onSuccess: () => {\n        // Show a toast notification about email verification\n        toast({\n          title: \"Registration successful!\",\n          description: \"Please check your email to verify your account.\",\n          variant: \"default\",\n        });\n      }\n    });\n  };\n\n  // Handle company registration form submission\n  const onRegisterCompanySubmit = (data: RegisterCompanyFormValues) => {\n    console.log(\"Registering company with data:\", {\n      username: data.username,\n      email: data.email,\n      userType: \"company\",\n      companyName: data.companyName,\n      companyWebsite: data.companyWebsite,\n      companySize: data.companySize,\n      companyIndustry: data.companyIndustry,\n    });\n\n    registerMutation.mutate({\n      username: data.username,\n      password: data.password,\n      email: data.email,\n      userType: \"company\",\n      companyName: data.companyName,\n      companyWebsite: data.companyWebsite,\n      companySize: data.companySize,\n      companyIndustry: data.companyIndustry,\n    }, {\n      onSuccess: () => {\n        // Show a toast notification about email verification\n        toast({\n          title: \"Company registration successful!\",\n          description: \"Please check your email to verify your company account.\",\n          variant: \"default\",\n        });\n      }\n    });\n  };\n\n  // Toggle between login and registration forms\n  const toggleForm = () => {\n    setIsLogin(!isLogin);\n  };\n\n  // Switch between hacker and company tabs\n  const handleTabChange = (value: string) => {\n    setActiveTab(value as \"hacker\" | \"company\");\n    if (isLogin) {\n      loginForm.setValue(\"userType\", value as \"hacker\" | \"company\");\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 relative\">\n      <MatrixBackground />\n      <Link \n        to=\"/\" \n        className=\"absolute top-4 left-4 text-matrix hover:text-matrix-dark flex items-center gap-2 z-20\"\n      >\n        <ArrowLeft className=\"h-5 w-5\" />\n        <span className=\"text-sm\">Back to Home</span>\n      </Link>\n\n      <div className=\"terminal-card w-full max-w-md p-6 rounded-lg relative overflow-hidden z-10\">\n        <div className=\"terminal-header mb-6\"></div>\n\n        <div className=\"text-center mb-6\">\n          <h1 className=\"text-matrix text-3xl font-mono font-bold mb-2\">\n            {isLogin ? \"CyberHunt_\" : \"Join_CyberHunt\"}\n          </h1>\n          <p className=\"text-dim-gray text-sm\">\n            {isLogin ? \"Elite Bug Bounty Platform\" : \"Create your account\"}\n          </p>\n        </div>\n\n        {/* Tabs for Hacker/Company selection */}\n        <Tabs \n          defaultValue={activeTab} \n          onValueChange={handleTabChange}\n          className=\"mb-6\"\n        >\n          <TabsList className=\"grid w-full grid-cols-2 bg-black/30 border border-primary/20\">\n            <TabsTrigger \n              value=\"hacker\" \n              className=\"data-[state=active]:bg-primary/20 data-[state=active]:text-matrix\"\n            >\n              <User className=\"mr-2 h-4 w-4\" />\n              Hacker\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"company\"\n              className=\"data-[state=active]:bg-primary/20 data-[state=active]:text-matrix\"\n            >\n              <Monitor className=\"mr-2 h-4 w-4\" />\n              Company\n            </TabsTrigger>\n          </TabsList>\n\n          {isLogin ? (\n            // Login Forms\n            <>\n              <TabsContent value=\"hacker\" className=\"mt-4\">\n                <Form {...loginForm}>\n                  <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className=\"space-y-4\">\n                    <div className=\"space-y-1\">\n                      <label className=\"block text-xs font-mono text-dim-gray\">&gt; Username:</label>\n                      <input\n                        type=\"text\"\n                        className=\"w-full bg-black/50 border border-primary/30 rounded px-3 py-2 font-mono focus:outline-none focus:border-primary focus:ring-1 focus:ring-primary\"\n                        style={{ color: 'white', caretColor: '#00ff00' }}\n                        onChange={(e) => loginForm.setValue('username', e.target.value)}\n                        autoComplete=\"username\"\n                      />\n                      {loginForm.formState.errors.username && (\n                        <div className=\"text-alert-red text-xs\">\n                          {loginForm.formState.errors.username.message}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-1\">\n                      <label className=\"block text-xs font-mono text-dim-gray\">&gt; Password:</label>\n                      <div className=\"relative\">\n                        <input\n                          type={showPassword ? \"text\" : \"password\"}\n                          className=\"w-full bg-black/50 border border-primary/30 rounded px-3 py-2 font-mono focus:outline-none focus:border-primary focus:ring-1 focus:ring-primary pr-10\"\n                          style={{ color: 'white', caretColor: '#00ff00' }}\n                          onChange={(e) => loginForm.setValue('password', e.target.value)}\n                          autoComplete=\"current-password\"\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          className=\"absolute right-3 top-1/2 -translate-y-1/2 text-dim-gray hover:text-matrix\"\n                        >\n                          {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                        </button>\n                      </div>\n                      {loginForm.formState.errors.password && (\n                        <div className=\"text-alert-red text-xs\">\n                          {loginForm.formState.errors.password.message}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"flex justify-between items-center\">\n                      <div className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"remember\"\n                          className=\"bg-terminal border border-matrix/50 rounded text-matrix focus:ring-matrix focus:ring-offset-0\"\n                          onChange={(e) => loginForm.setValue('rememberMe', e.target.checked)}\n                        />\n                        <label\n                          htmlFor=\"remember\"\n                          className=\"text-xs font-mono text-dim-gray\"\n                        >\n                          Remember me\n                        </label>\n                      </div>\n                      <Link href=\"/forgot-password\" className=\"text-xs font-mono text-matrix hover:text-matrix-dark\">\n                        Forgot password?\n                      </Link>\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      disabled={loginMutation.isPending}\n                      className=\"w-full glow-button\"\n                    >\n                      {loginMutation.isPending ? (\n                        <span className=\"flex items-center justify-center\">\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          AUTHENTICATING...\n                        </span>\n                      ) : (\n                        \"LOGIN AS HACKER\"\n                      )}\n                    </Button>\n\n                    {/* Social Login Divider */}\n                    <div className=\"relative my-4\">\n                      <div className=\"absolute inset-0 flex items-center\">\n                        <span className=\"w-full border-t border-primary/30\" />\n                      </div>\n                      <div className=\"relative flex justify-center text-xs uppercase\">\n                        <span className=\"bg-black px-2 text-dim-gray\">Or continue with</span>\n                      </div>\n                    </div>\n\n                    {/* Social Login Buttons */}\n                    <div className=\"grid grid-cols-2 gap-3\">\n                      <a\n                        href=\"/api/auth/google\"\n                        className=\"flex items-center justify-center px-4 py-2 border border-primary/30 rounded-md bg-black/50 hover:bg-primary/10 transition-colors cursor-pointer\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          window.location.href = '/api/auth/google';\n                        }}\n                      >\n                        <svg className=\"w-5 h-5 text-white\" viewBox=\"0 0 24 24\">\n                          <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                          <path fill=\"currentColor\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                          <path fill=\"currentColor\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                          <path fill=\"currentColor\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                        </svg>\n                      </a>\n                      <a\n                        href=\"/api/auth/github\"\n                        className=\"flex items-center justify-center px-4 py-2 border border-primary/30 rounded-md bg-black/50 hover:bg-primary/10 transition-colors cursor-pointer\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          window.location.href = '/api/auth/github';\n                        }}\n                      >\n                        <Github className=\"w-5 h-5 text-white\" />\n                      </a>\n                    </div>\n                  </form>\n                </Form>\n              </TabsContent>\n\n              <TabsContent value=\"company\" className=\"mt-4\">\n                <Form {...loginForm}>\n                  <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className=\"space-y-4\">\n                    <div className=\"space-y-1\">\n                      <label className=\"block text-xs font-mono text-dim-gray\">&gt; Company Username:</label>\n                      <input\n                        type=\"text\"\n                        className=\"w-full bg-black/50 border border-primary/30 rounded px-3 py-2 font-mono focus:outline-none focus:border-primary focus:ring-1 focus:ring-primary\"\n                        style={{ color: 'white', caretColor: '#00ff00' }}\n                        onChange={(e) => loginForm.setValue('username', e.target.value)}\n                        autoComplete=\"username\"\n                      />\n                      {loginForm.formState.errors.username && (\n                        <div className=\"text-alert-red text-xs\">\n                          {loginForm.formState.errors.username.message}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-1\">\n                      <label className=\"block text-xs font-mono text-dim-gray\">&gt; Password:</label>\n                      <div className=\"relative\">\n                        <input\n                          type={showPassword ? \"text\" : \"password\"}\n                          className=\"w-full bg-black/50 border border-primary/30 rounded px-3 py-2 font-mono focus:outline-none focus:border-primary focus:ring-1 focus:ring-primary pr-10\"\n                          style={{ color: 'white', caretColor: '#00ff00' }}\n                          onChange={(e) => loginForm.setValue('password', e.target.value)}\n                          autoComplete=\"current-password\"\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          className=\"absolute right-3 top-1/2 -translate-y-1/2 text-dim-gray hover:text-matrix\"\n                        >\n                          {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                        </button>\n                      </div>\n                      {loginForm.formState.errors.password && (\n                        <div className=\"text-alert-red text-xs\">\n                          {loginForm.formState.errors.password.message}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"flex justify-between items-center\">\n                      <div className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"remember-company\"\n                          className=\"bg-terminal border border-matrix/50 rounded text-matrix focus:ring-matrix focus:ring-offset-0\"\n                          onChange={(e) => loginForm.setValue('rememberMe', e.target.checked)}\n                        />\n                        <label\n                          htmlFor=\"remember-company\"\n                          className=\"text-xs font-mono text-dim-gray\"\n                        >\n                          Remember me\n                        </label>\n                      </div>\n                      <Link href=\"/forgot-password\" className=\"text-xs font-mono text-matrix hover:text-matrix-dark\">\n                        Forgot password?\n                      </Link>\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      disabled={loginMutation.isPending}\n                      className=\"w-full glow-button\"\n                    >\n                      {loginMutation.isPending ? (\n                        <span className=\"flex items-center justify-center\">\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          AUTHENTICATING...\n                        </span>\n                      ) : (\n                        \"LOGIN AS COMPANY\"\n                      )}\n                    </Button>\n\n                    {/* Social Login Divider */}\n                    <div className=\"relative my-4\">\n                      <div className=\"absolute inset-0 flex items-center\">\n                        <span className=\"w-full border-t border-primary/30\" />\n                      </div>\n                      <div className=\"relative flex justify-center text-xs uppercase\">\n                        <span className=\"bg-black px-2 text-dim-gray\">Or continue with</span>\n                      </div>\n                    </div>\n\n                    {/* Social Login Buttons */}\n                    <div className=\"grid grid-cols-2 gap-3\">\n                      <a\n                        href=\"/api/auth/google\"\n                        className=\"flex items-center justify-center px-4 py-2 border border-primary/30 rounded-md bg-black/50 hover:bg-primary/10 transition-colors cursor-pointer\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          window.location.href = '/api/auth/google';\n                        }}\n                      >\n                        <svg className=\"w-5 h-5 text-white\" viewBox=\"0 0 24 24\">\n                          <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                          <path fill=\"currentColor\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                          <path fill=\"currentColor\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                          <path fill=\"currentColor\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                        </svg>\n                      </a>\n                      <a\n                        href=\"/api/auth/github\"\n                        className=\"flex items-center justify-center px-4 py-2 border border-primary/30 rounded-md bg-black/50 hover:bg-primary/10 transition-colors cursor-pointer\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          window.location.href = '/api/auth/github';\n                        }}\n                      >\n                        <Github className=\"w-5 h-5 text-white\" />\n                      </a>\n                    </div>\n                  </form>\n                </Form>\n              </TabsContent>\n            </>\n          ) : (\n            // Registration Forms\n            <>\n              <TabsContent value=\"hacker\" className=\"mt-4\">\n                <Form {...registerHackerForm}>\n                  <form onSubmit={registerHackerForm.handleSubmit(onRegisterHackerSubmit)} className=\"space-y-4\">\n                    <div className=\"space-y-1\">\n                      <label className=\"block text-xs font-mono text-dim-gray\">&gt; Username:</label>\n                      <input\n                        type=\"text\"\n                        className=\"w-full bg-black/50 border border-primary/30 rounded px-3 py-2 font-mono focus:outline-none focus:border-primary focus:ring-1 focus:ring-primary\"\n                        style={{ color: 'white', caretColor: '#00ff00' }}\n                        onChange={(e) => registerHackerForm.setValue('username', e.target.value)}\n                        autoComplete=\"username\"\n                      />\n                      {registerHackerForm.formState.errors.username && (\n                        <div className=\"text-alert-red text-xs\">\n                          {registerHackerForm.formState.errors.username.message}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-1\">\n                      <label className=\"block text-xs font-mono text-dim-gray\">&gt; Email:</label>\n                      <input\n                        type=\"email\"\n                        className=\"w-full bg-black/50 border border-primary/30 rounded px-3 py-2 font-mono focus:outline-none focus:border-primary focus:ring-1 focus:ring-primary\"\n                        style={{ color: 'white', caretColor: '#00ff00' }}\n                        onChange={(e) => registerHackerForm.setValue('email', e.target.value)}\n                        autoComplete=\"email\"\n                      />\n                      {registerHackerForm.formState.errors.email && (\n                        <div className=\"text-alert-red text-xs\">\n                          {registerHackerForm.formState.errors.email.message}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-1\">\n                      <label className=\"block text-xs font-mono text-dim-gray\">&gt; Password:</label>\n                      <div className=\"relative\">\n                        <input\n                          type={showPassword ? \"text\" : \"password\"}\n                          className=\"w-full bg-black/50 border border-primary/30 rounded px-3 py-2 font-mono focus:outline-none focus:border-primary focus:ring-1 focus:ring-primary pr-10\"\n                          style={{ color: 'white', caretColor: '#00ff00' }}\n                          onChange={(e) => registerHackerForm.setValue('password', e.target.value)}\n                          autoComplete=\"new-password\"\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          className=\"absolute right-3 top-1/2 -translate-y-1/2 text-dim-gray hover:text-matrix\"\n                        >\n                          {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                        </button>\n                      </div>\n                      {registerHackerForm.formState.errors.password && (\n                        <div className=\"text-alert-red text-xs\">\n                          {registerHackerForm.formState.errors.password.message}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-1\">\n                      <label className=\"block text-xs font-mono text-dim-gray\">&gt; Confirm Password:</label>\n                      <div className=\"relative\">\n                        <input\n                          type={showPassword ? \"text\" : \"password\"}\n                          className=\"w-full bg-black/50 border border-primary/30 rounded px-3 py-2 font-mono focus:outline-none focus:border-primary focus:ring-1 focus:ring-primary pr-10\"\n                          style={{ color: 'white', caretColor: '#00ff00' }}\n                          onChange={(e) => registerHackerForm.setValue('confirmPassword', e.target.value)}\n                          autoComplete=\"new-password\"\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          className=\"absolute right-3 top-1/2 -translate-y-1/2 text-dim-gray hover:text-matrix\"\n                        >\n                          {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                        </button>\n                      </div>\n                      {registerHackerForm.formState.errors.confirmPassword && (\n                        <div className=\"text-alert-red text-xs\">\n                          {registerHackerForm.formState.errors.confirmPassword.message}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"flex items-start space-x-2\">\n                      <input\n                        type=\"checkbox\"\n                        id=\"terms-hacker\"\n                        className=\"mt-1 bg-terminal border border-matrix/50 rounded text-matrix focus:ring-matrix focus:ring-offset-0\"\n                        onChange={(e) => registerHackerForm.setValue('termsAccepted', e.target.checked)}\n                      />\n                      <div>\n                        <label\n                          htmlFor=\"terms-hacker\"\n                          className=\"text-xs font-mono text-dim-gray\"\n                        >\n                          I agree to the{\" \"}\n                          <a href=\"/terms-of-service\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-matrix hover:text-matrix-dark\">\n                            Terms of Service\n                          </a>{\" \"}\n                          and{\" \"}\n                          <a href=\"/privacy-policy\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-matrix hover:text-matrix-dark\">\n                            Privacy Policy\n                          </a>\n                        </label>\n                        {registerHackerForm.formState.errors.termsAccepted && (\n                          <div className=\"text-alert-red text-xs mt-1\">\n                            {registerHackerForm.formState.errors.termsAccepted.message}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      disabled={registerMutation.isPending}\n                      className=\"w-full glow-button\"\n                    >\n                      {registerMutation.isPending ? (\n                        <span className=\"flex items-center justify-center\">\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          CREATING ACCOUNT...\n                        </span>\n                      ) : (\n                        \"CREATE HACKER ACCOUNT\"\n                      )}\n                    </Button>\n\n                    {/* Social Login Divider */}\n                    <div className=\"relative my-4\">\n                      <div className=\"absolute inset-0 flex items-center\">\n                        <span className=\"w-full border-t border-primary/30\" />\n                      </div>\n                      <div className=\"relative flex justify-center text-xs uppercase\">\n                        <span className=\"bg-black px-2 text-dim-gray\">Or continue with</span>\n                      </div>\n                    </div>\n\n                    {/* Social Login Buttons */}\n                    <div className=\"grid grid-cols-2 gap-3\">\n                      <a\n                        href=\"/api/auth/google\"\n                        className=\"flex items-center justify-center px-4 py-2 border border-primary/30 rounded-md bg-black/50 hover:bg-primary/10 transition-colors cursor-pointer\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          window.location.href = '/api/auth/google';\n                        }}\n                      >\n                        <svg className=\"w-5 h-5 text-white\" viewBox=\"0 0 24 24\">\n                          <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                          <path fill=\"currentColor\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                          <path fill=\"currentColor\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.221 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                          <path fill=\"currentColor\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                        </svg>\n                      </a>\n                      <a\n                        href=\"/api/auth/github\"\n                        className=\"flex items-center justify-center px-4 py-2 border border-primary/30 rounded-md bg-black/50 hover:bg-primary/10 transition-colors cursor-pointer\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          window.location.href = '/api/auth/github';\n                        }}\n                      >\n                        <Github className=\"w-5 h-5 text-white\" />\n                      </a>\n                    </div>\n                  </form>\n                </Form>\n              </TabsContent>\n\n              <TabsContent value=\"company\" className=\"mt-4\">\n                <Form {...registerCompanyForm}>\n                  <form onSubmit={registerCompanyForm.handleSubmit(onRegisterCompanySubmit)} className=\"space-y-4\">\n                    <div className=\"space-y-1\">\n                      <label className=\"block text-xs font-mono text-dim-gray\">&gt; Company Name:</label>\n                      <input\n                        type=\"text\"\n                        className=\"w-full bg-black/50 border border-primary/30 rounded px-3 py-2 font-mono focus:outline-none focus:border-primary focus:ring-1 focus:ring-primary\"\n                        style={{ color: 'white', caretColor: '#00ff00' }}\n                        onChange={(e) => registerCompanyForm.setValue('companyName', e.target.value)}\n                      />\n                      {registerCompanyForm.formState.errors.companyName && (\n                        <div className=\"text-alert-red text-xs\">\n                          {registerCompanyForm.formState.errors.companyName.message}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-1\">\n                      <label className=\"block text-xs font-mono text-dim-gray\">&gt; Company Username:</label>\n                      <input\n                        type=\"text\"\n                        className=\"w-full bg-black/50 border border-primary/30 rounded px-3 py-2 font-mono focus:outline-none focus:border-primary focus:ring-1 focus:ring-primary\"\n                        style={{ color: 'white', caretColor: '#00ff00' }}\n                        onChange={(e) => registerCompanyForm.setValue('username', e.target.value)}\n                        autoComplete=\"username\"\n                      />\n                      {registerCompanyForm.formState.errors.username && (\n                        <div className=\"text-alert-red text-xs\">\n                          {registerCompanyForm.formState.errors.username.message}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-1\">\n                      <label className=\"block text-xs font-mono text-dim-gray\">&gt; Email:</label>\n                      <input\n                        type=\"email\"\n                        className=\"w-full bg-black/50 border border-primary/30 rounded px-3 py-2 font-mono focus:outline-none focus:border-primary focus:ring-1 focus:ring-primary\"\n                        style={{ color: 'white', caretColor: '#00ff00' }}\n                        onChange={(e) => registerCompanyForm.setValue('email', e.target.value)}\n                        autoComplete=\"email\"\n                      />\n                      {registerCompanyForm.formState.errors.email && (\n                        <div className=\"text-alert-red text-xs\">\n                          {registerCompanyForm.formState.errors.email.message}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div className=\"space-y-1\">\n                        <label className=\"block text-xs font-mono text-dim-gray\">&gt; Company Size:</label>\n                        <Select onValueChange={(value) => registerCompanyForm.setValue('companySize', value as any)}>\n                          <SelectTrigger className=\"w-full bg-black/50 border border-primary/30 text-white\">\n                            <SelectValue placeholder=\"Select size\" />\n                          </SelectTrigger>\n                          <SelectContent className=\"bg-black/90 border border-primary/30 text-white\">\n                            <SelectItem value=\"1-10\">1-10 employees</SelectItem>\n                            <SelectItem value=\"11-50\">11-50 employees</SelectItem>\n                            <SelectItem value=\"51-200\">51-200 employees</SelectItem>\n                            <SelectItem value=\"201-500\">201-500 employees</SelectItem>\n                            <SelectItem value=\"501-1000\">501-1000 employees</SelectItem>\n                            <SelectItem value=\"1000+\">1000+ employees</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        {registerCompanyForm.formState.errors.companySize && (\n                          <div className=\"text-alert-red text-xs\">\n                            {registerCompanyForm.formState.errors.companySize.message}\n                          </div>\n                        )}\n                      </div>\n\n                      <div className=\"space-y-1\">\n                        <label className=\"block text-xs font-mono text-dim-gray\">&gt; Industry:</label>\n                        <Select onValueChange={(value) => registerCompanyForm.setValue('companyIndustry', value as any)}>\n                          <SelectTrigger className=\"w-full bg-black/50 border border-primary/30 text-white\">\n                            <SelectValue placeholder=\"Select industry\" />\n                          </SelectTrigger>\n                          <SelectContent className=\"bg-black/90 border border-primary/30 text-white\">\n                            <SelectItem value=\"Technology\">Technology</SelectItem>\n                            <SelectItem value=\"Finance\">Finance</SelectItem>\n                            <SelectItem value=\"Healthcare\">Healthcare</SelectItem>\n                            <SelectItem value=\"E-commerce\">E-commerce</SelectItem>\n                            <SelectItem value=\"Government\">Government</SelectItem>\n                            <SelectItem value=\"Education\">Education</SelectItem>\n                            <SelectItem value=\"Entertainment\">Entertainment</SelectItem>\n                            <SelectItem value=\"Travel\">Travel</SelectItem>\n                            <SelectItem value=\"Manufacturing\">Manufacturing</SelectItem>\n                            <SelectItem value=\"Other\">Other</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        {registerCompanyForm.formState.errors.companyIndustry && (\n                          <div className=\"text-alert-red text-xs\">\n                            {registerCompanyForm.formState.errors.companyIndustry.message}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-1\">\n                      <label className=\"block text-xs font-mono text-dim-gray\">&gt; Company Website:</label>\n                      <input\n                        type=\"url\"\n                        className=\"w-full bg-black/50 border border-primary/30 rounded px-3 py-2 font-mono focus:outline-none focus:border-primary focus:ring-1 focus:ring-primary\"\n                        style={{ color: 'white', caretColor: '#00ff00' }}\n                        onChange={(e) => registerCompanyForm.setValue('companyWebsite', e.target.value)}\n                        placeholder=\"https://example.com\"\n                      />\n                      {registerCompanyForm.formState.errors.companyWebsite && (\n                        <div className=\"text-alert-red text-xs\">\n                          {registerCompanyForm.formState.errors.companyWebsite.message}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-1\">\n                      <label className=\"block text-xs font-mono text-dim-gray\">&gt; Password:</label>\n                      <div className=\"relative\">\n                        <input\n                          type={showPassword ? \"text\" : \"password\"}\n                          className=\"w-full bg-black/50 border border-primary/30 rounded px-3 py-2 font-mono focus:outline-none focus:border-primary focus:ring-1 focus:ring-primary pr-10\"\n                          style={{ color: 'white', caretColor: '#00ff00' }}\n                          onChange={(e) => registerCompanyForm.setValue('password', e.target.value)}\n                          autoComplete=\"new-password\"\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          className=\"absolute right-3 top-1/2 -translate-y-1/2 text-dim-gray hover:text-matrix\"\n                        >\n                          {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                        </button>\n                      </div>\n                      {registerCompanyForm.formState.errors.password && (\n                        <div className=\"text-alert-red text-xs\">\n                          {registerCompanyForm.formState.errors.password.message}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-1\">\n                      <label className=\"block text-xs font-mono text-dim-gray\">&gt; Confirm Password:</label>\n                      <div className=\"relative\">\n                        <input\n                          type={showPassword ? \"text\" : \"password\"}\n                          className=\"w-full bg-black/50 border border-primary/30 rounded px-3 py-2 font-mono focus:outline-none focus:border-primary focus:ring-1 focus:ring-primary pr-10\"\n                          style={{ color: 'white', caretColor: '#00ff00' }}\n                          onChange={(e) => registerCompanyForm.setValue('confirmPassword', e.target.value)}\n                          autoComplete=\"new-password\"\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          className=\"absolute right-3 top-1/2 -translate-y-1/2 text-dim-gray hover:text-matrix\"\n                        >\n                          {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                        </button>\n                      </div>\n                      {registerCompanyForm.formState.errors.confirmPassword && (\n                        <div className=\"text-alert-red text-xs\">\n                          {registerCompanyForm.formState.errors.confirmPassword.message}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"flex items-start space-x-2\">\n                      <input\n                        type=\"checkbox\"\n                        id=\"terms-company\"\n                        className=\"mt-1 bg-terminal border border-matrix/50 rounded text-matrix focus:ring-matrix focus:ring-offset-0\"\n                        onChange={(e) => registerCompanyForm.setValue('termsAccepted', e.target.checked)}\n                      />\n                      <div>\n                        <label\n                          htmlFor=\"terms-company\"\n                          className=\"text-xs font-mono text-dim-gray\"\n                        >\n                          I agree to the{\" \"}\n                          <a href=\"/terms-of-service\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-matrix hover:text-matrix-dark\">\n                            Terms of Service\n                          </a>{\" \"}\n                          and{\" \"}\n                          <a href=\"/privacy-policy\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-matrix hover:text-matrix-dark\">\n                            Privacy Policy\n                          </a>\n                        </label>\n                        {registerCompanyForm.formState.errors.termsAccepted && (\n                          <div className=\"text-alert-red text-xs mt-1\">\n                            {registerCompanyForm.formState.errors.termsAccepted.message}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      disabled={registerMutation.isPending}\n                      className=\"w-full glow-button\"\n                    >\n                      {registerMutation.isPending ? (\n                        <span className=\"flex items-center justify-center\">\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          CREATING COMPANY ACCOUNT...\n                        </span>\n                      ) : (\n                        \"CREATE COMPANY ACCOUNT\"\n                      )}\n                    </Button>\n\n                    {/* Social Login Divider */}\n                    <div className=\"relative my-4\">\n                      <div className=\"absolute inset-0 flex items-center\">\n                        <span className=\"w-full border-t border-primary/30\" />\n                      </div>\n                      <div className=\"relative flex justify-center text-xs uppercase\">\n                        <span className=\"bg-black px-2 text-dim-gray\">Or continue with</span>\n                      </div>\n                    </div>\n\n                    {/* Social Login Buttons */}\n                    <div className=\"grid grid-cols-2 gap-3\">\n                      <a\n                        href=\"/api/auth/google\"\n                        className=\"flex items-center justify-center px-4 py-2 border border-primary/30 rounded-md bg-black/50 hover:bg-primary/10 transition-colors cursor-pointer\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          window.location.href = '/api/auth/google';\n                        }}\n                      >\n                        <svg className=\"w-5 h-5 text-white\" viewBox=\"0 0 24 24\">\n                          <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                          <path fill=\"currentColor\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                          <path fill=\"currentColor\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                          <path fill=\"currentColor\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                        </svg>\n                      </a>\n                      <a\n                        href=\"/api/auth/github\"\n                        className=\"flex items-center justify-center px-4 py-2 border border-primary/30 rounded-md bg-black/50 hover:bg-primary/10 transition-colors cursor-pointer\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          window.location.href = '/api/auth/github';\n                        }}\n                      >\n                        <Github className=\"w-5 h-5 text-white\" />\n                      </a>\n                    </div>\n                  </form>\n                </Form>\n              </TabsContent>\n            </>\n          )}\n        </Tabs>\n\n        <div className=\"text-center text-xs font-mono text-dim-gray mt-6\">\n          {isLogin ? \"New to CyberHunt? \" : \"Already have an account? \"}\n          <button\n            type=\"button\"\n            onClick={toggleForm}\n            className=\"text-matrix hover:text-matrix-dark\"\n          >\n            {isLogin ? \"Register now\" : \"Login\"}\n          </button>\n        </div>\n\n        <div className=\"absolute -bottom-10 -right-10 w-40 h-40 bg-matrix/5 rounded-full blur-3xl\"></div>\n        <div className=\"absolute -top-10 -left-10 w-40 h-40 bg-electric-blue/5 rounded-full blur-3xl\"></div>\n      </div>\n    </div>\n  );\n}\n// Removed Microsoft social login button from all login and registration forms.","size_bytes":48460},"client/src/pages/badges-page.tsx":{"content":"\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport { Zap, Bug, Code, Target, Shield, Award, Trophy } from \"lucide-react\";\n\n// All possible badges\nconst allBadges = [\n  { id: 1, name: \"First Blood\", icon: <Zap className=\"h-8 w-8\" />, description: \"First vulnerability reported\", acquired: true },\n  { id: 2, name: \"Bug Hunter\", icon: <Bug className=\"h-8 w-8\" />, description: \"Found 5 valid vulnerabilities\", acquired: true },\n  { id: 3, name: \"Code Breaker\", icon: <Code className=\"h-8 w-8\" />, description: \"Successfully identified a critical vulnerability\", acquired: false },\n  { id: 4, name: \"Perfect Score\", icon: <Target className=\"h-8 w-8\" />, description: \"Achieved 100% accuracy in reports\", acquired: false },\n  { id: 5, name: \"Elite Hunter\", icon: <Shield className=\"h-8 w-8\" />, description: \"Reached Elite status\", acquired: false },\n  { id: 6, name: \"Top Contributor\", icon: <Award className=\"h-8 w-8\" />, description: \"Top 10 on the leaderboard\", acquired: false },\n  { id: 7, name: \"Monthly Champion\", icon: <Trophy className=\"h-8 w-8\" />, description: \"Highest points in a month\", acquired: false }\n];\n\nexport default function BadgesPage() {\n  const { user } = useAuth();\n\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground />\n      <Navbar />\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 relative z-10\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-2xl font-mono font-bold text-light-gray mb-2\">Achievement Badges</h1>\n          <p className=\"text-dim-gray font-mono\">\n            Track your progress and showcase your accomplishments.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {allBadges.map((badge) => (\n            <div\n              key={badge.id}\n              className={`p-6 rounded-lg border ${\n                badge.acquired\n                  ? \"border-matrix/40 bg-matrix/5\"\n                  : \"border-dim-gray/20 bg-surface/50 opacity-50\"\n              }`}\n            >\n              <div className=\"flex items-center space-x-4\">\n                <div className={badge.acquired ? \"text-matrix\" : \"text-dim-gray\"}>\n                  {badge.icon}\n                </div>\n                <div>\n                  <h3 className={`font-mono font-bold ${\n                    badge.acquired ? \"text-light-gray\" : \"text-dim-gray\"\n                  }`}>\n                    {badge.name}\n                  </h3>\n                  <p className=\"text-sm text-dim-gray mt-1\">{badge.description}</p>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":2818},"client/src/pages/blog-page.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport {\n  Search,\n  Calendar,\n  User,\n  Tag,\n  ChevronRight,\n  Clock,\n  ArrowRight,\n  FileText\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\n\n// Blog post data\nconst blogPosts = [\n  {\n    id: 1,\n    title: \"Understanding Cross-Site Scripting (XSS) in Modern Web Applications\",\n    excerpt: \"Cross-Site Scripting remains one of the most common web vulnerabilities. Learn about the different types of XSS attacks, detection methods, and prevention strategies for modern web frameworks.\",\n    image: \"/xss-image.jpg\",\n    author: \"Sophia Rodriguez\",\n    authorRole: \"Chief Security Officer\",\n    date: \"March 25, 2025\",\n    readTime: \"8 min read\",\n    category: \"Web Security\",\n    tags: [\"XSS\", \"Web Security\", \"JavaScript\", \"Prevention\"]\n  },\n  {\n    id: 2,\n    title: \"The Rise of API Security Vulnerabilities: What You Need to Know\",\n    excerpt: \"As organizations increasingly rely on APIs, new security challenges emerge. This post examines common API vulnerabilities, real-world examples, and best practices for secure API development.\",\n    image: \"/api-security.jpg\",\n    author: \"Marcus Washington\",\n    authorRole: \"Chief Technology Officer\",\n    date: \"March 18, 2025\",\n    readTime: \"10 min read\",\n    category: \"API Security\",\n    tags: [\"API\", \"REST\", \"GraphQL\", \"OAuth\"]\n  },\n  {\n    id: 3,\n    title: \"Server-Side Request Forgery (SSRF): The Hidden Threat\",\n    excerpt: \"SSRF vulnerabilities can lead to devastating data breaches. We break down how these attacks work, why they're so dangerous in cloud environments, and how to protect your applications.\",\n    image: \"/ssrf-attacks.jpg\",\n    author: \"David Kim\",\n    authorRole: \"VP of Engineering\",\n    date: \"March 12, 2025\",\n    readTime: \"12 min read\",\n    category: \"Network Security\",\n    tags: [\"SSRF\", \"Cloud Security\", \"AWS\", \"Infrastructure\"]\n  },\n  {\n    id: 4,\n    title: \"Building a Career in Bug Bounty Hunting: From Beginner to Professional\",\n    excerpt: \"Want to turn bug hunting into a full-time career? This comprehensive guide covers the skills you need, how to build your reputation, manage finances, and succeed in the competitive world of bug bounties.\",\n    image: \"/career-guide.jpg\",\n    author: \"Priya Patel\",\n    authorRole: \"Head of Community\",\n    date: \"March 8, 2025\",\n    readTime: \"15 min read\",\n    category: \"Career\",\n    tags: [\"Career\", \"Bug Bounty\", \"Freelancing\", \"Skills Development\"]\n  },\n  {\n    id: 5,\n    title: \"Mobile App Security Testing: A Practical Approach\",\n    excerpt: \"Mobile applications present unique security challenges. Learn practical techniques for testing both Android and iOS apps, including code analysis, runtime manipulation, and identifying common mobile vulnerabilities.\",\n    image: \"/mobile-security.jpg\",\n    author: \"Alex Chen\",\n    authorRole: \"Mobile Security Researcher\",\n    date: \"March 3, 2025\",\n    readTime: \"11 min read\",\n    category: \"Mobile Security\",\n    tags: [\"Android\", \"iOS\", \"OWASP Mobile\", \"Dynamic Analysis\"]\n  },\n  {\n    id: 6,\n    title: \"Responsible Disclosure: Ethics and Best Practices\",\n    excerpt: \"Navigating the sometimes complex waters of vulnerability disclosure requires understanding both technical and ethical considerations. This guide outlines the principles of responsible disclosure and how to handle difficult situations.\",\n    image: \"/disclosure-ethics.jpg\",\n    author: \"James Wilson\",\n    authorRole: \"VP of Business Development\",\n    date: \"February 25, 2025\",\n    readTime: \"9 min read\",\n    category: \"Ethics\",\n    tags: [\"Disclosure\", \"Ethics\", \"Legal\", \"Communication\"]\n  }\n];\n\n// Featured post data\nconst featuredPost = {\n  id: 7,\n  title: \"The Future of Bug Bounty Programs: Trends and Predictions for 2026\",\n  excerpt: \"As cybersecurity threats evolve, so do the methods for finding and fixing vulnerabilities. This in-depth analysis explores emerging trends in bug bounty programs, from AI-assisted vulnerability discovery to new reward models and specialized programs for critical infrastructure.\",\n  image: \"/future-trends.jpg\",\n  author: \"Alexandra Chen\",\n  authorRole: \"Chief Executive Officer\",\n  date: \"March 28, 2025\",\n  readTime: \"14 min read\",\n  category: \"Industry Insights\",\n  tags: [\"Future Trends\", \"AI\", \"Automation\", \"Industry Analysis\"]\n};\n\n// Categories\nconst categories = [\n  \"All Posts\",\n  \"Web Security\",\n  \"API Security\",\n  \"Mobile Security\",\n  \"Network Security\",\n  \"Cloud Security\",\n  \"Career\",\n  \"Industry Insights\",\n  \"Tools & Resources\",\n  \"Case Studies\"\n];\n\nexport default function BlogPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [activeCategory, setActiveCategory] = useState(\"All Posts\");\n  \n  // Filter posts based on search query and active category\n  const filteredPosts = blogPosts.filter(post => {\n    const matchesSearch = searchQuery === \"\" || \n      post.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      post.excerpt.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      post.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));\n    \n    const matchesCategory = activeCategory === \"All Posts\" || post.category === activeCategory;\n    \n    return matchesSearch && matchesCategory;\n  });\n  \n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground className=\"opacity-20\" />\n      <Navbar />\n      \n      <main className=\"max-w-6xl mx-auto px-4 py-12 relative z-10\">\n        {/* Header Section */}\n        <div className=\"mb-12 text-center\">\n          <h1 className=\"text-4xl font-mono font-bold text-matrix mb-4\">CyberHunt Blog</h1>\n          <p className=\"text-dim-gray mb-6 max-w-3xl mx-auto\">\n            Insights, tutorials, and news from the world of cybersecurity and bug bounty hunting.\n            Stay updated with the latest vulnerability trends, research, and community stories.\n          </p>\n          \n          <div className=\"max-w-xl mx-auto relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search articles...\"\n              className=\"bg-dark-terminal border-matrix/30 pl-10 h-12 font-mono\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n            />\n            <Search className=\"absolute left-3 top-3.5 h-5 w-5 text-dim-gray pointer-events-none\" />\n          </div>\n        </div>\n        \n        {/* Featured Article */}\n        <div className=\"mb-12\">\n          <div className=\"terminal-card overflow-hidden rounded-lg border border-matrix/30\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-0\">\n              <div className=\"p-8\">\n                <div className=\"flex items-center space-x-2 text-xs font-mono mb-3\">\n                  <span className=\"px-2 py-1 bg-matrix/20 rounded text-matrix\">{featuredPost.category}</span>\n                  <span className=\"text-dim-gray\">•</span>\n                  <span className=\"text-dim-gray flex items-center\">\n                    <Clock className=\"h-3 w-3 mr-1\" /> {featuredPost.readTime}\n                  </span>\n                </div>\n                \n                <h2 className=\"text-2xl font-mono font-bold text-matrix mb-4\">\n                  {featuredPost.title}\n                </h2>\n                \n                <p className=\"text-dim-gray mb-6 line-clamp-3\">\n                  {featuredPost.excerpt}\n                </p>\n                \n                <div className=\"flex items-center mb-6\">\n                  <div className=\"h-10 w-10 rounded-full bg-matrix/20 flex items-center justify-center border border-matrix/30 mr-3\">\n                    <User className=\"h-5 w-5 text-matrix\" />\n                  </div>\n                  <div>\n                    <p className=\"text-light-gray text-sm font-mono\">{featuredPost.author}</p>\n                    <p className=\"text-dim-gray text-xs\">{featuredPost.authorRole}</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-3 text-xs text-dim-gray mb-6\">\n                  <div className=\"flex items-center\">\n                    <Calendar className=\"h-3.5 w-3.5 mr-1\" />\n                    <span>{featuredPost.date}</span>\n                  </div>\n                </div>\n                \n                <Button variant=\"outline\" className=\"border-matrix text-matrix hover:bg-matrix/10\">\n                  Read Full Article\n                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n                </Button>\n              </div>\n              \n              <div className=\"bg-terminal/50 flex items-center justify-center p-6\">\n                <div className=\"relative w-full h-64 flex items-center justify-center\">\n                  <div className=\"absolute inset-10 bg-matrix/10 blur-xl rounded-full\"></div>\n                  <div className=\"relative z-10 text-matrix text-center\">\n                    <FileText className=\"h-16 w-16 mx-auto mb-4 text-matrix\" />\n                    <h3 className=\"text-xl font-mono\">Featured Article</h3>\n                    <p className=\"text-dim-gray text-sm max-w-xs mx-auto mt-2\">\n                      Our CEO's analysis of future bug bounty trends\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Categories */}\n        <div className=\"mb-8 overflow-x-auto\">\n          <Tabs value={activeCategory} className=\"w-full\">\n            <TabsList className=\"flex space-x-2 bg-transparent h-auto p-0 mb-6 overflow-x-auto\">\n              {categories.map((category) => (\n                <TabsTrigger\n                  key={category}\n                  value={category}\n                  onClick={() => setActiveCategory(category)}\n                  className=\"flex-shrink-0 text-xs md:text-sm bg-terminal border border-matrix/30 data-[state=active]:bg-matrix/10 data-[state=active]:border-matrix data-[state=active]:text-matrix text-dim-gray rounded-md py-2 px-3 whitespace-nowrap\"\n                >\n                  {category}\n                </TabsTrigger>\n              ))}\n            </TabsList>\n          </Tabs>\n        </div>\n        \n        {/* Blog Posts Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12\">\n          {filteredPosts.map((post) => (\n            <div key={post.id} className=\"terminal-card rounded-lg border border-matrix/30 overflow-hidden hover:bg-matrix/5 transition duration-200\">\n              <div className=\"h-48 bg-terminal/50 flex items-center justify-center\">\n                <div className=\"bg-matrix/10 w-16 h-16 rounded-full flex items-center justify-center blur-xl absolute\"></div>\n                <div className=\"relative z-10 text-matrix text-center p-6\">\n                  <Tag className=\"h-10 w-10 mx-auto mb-2\" />\n                  <span className=\"text-sm font-mono\">{post.category}</span>\n                </div>\n              </div>\n              \n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between text-xs text-dim-gray mb-3\">\n                  <div className=\"flex items-center\">\n                    <Calendar className=\"h-3.5 w-3.5 mr-1\" />\n                    <span>{post.date}</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Clock className=\"h-3.5 w-3.5 mr-1\" />\n                    <span>{post.readTime}</span>\n                  </div>\n                </div>\n                \n                <h3 className=\"text-xl font-mono font-bold text-light-gray hover:text-matrix mb-3\">\n                  <Link href={`/blog/${post.id}`}>\n                    <div className=\"cursor-pointer\">{post.title}</div>\n                  </Link>\n                </h3>\n                \n                <p className=\"text-dim-gray mb-4 text-sm line-clamp-3\">\n                  {post.excerpt}\n                </p>\n                \n                <div className=\"flex flex-wrap gap-2 mb-4\">\n                  {post.tags.map((tag, index) => (\n                    <span key={index} className=\"text-xs px-2 py-0.5 bg-matrix/10 text-matrix rounded\">\n                      {tag}\n                    </span>\n                  ))}\n                </div>\n                \n                <div className=\"flex items-center\">\n                  <div className=\"h-8 w-8 rounded-full bg-matrix/20 flex items-center justify-center border border-matrix/30 mr-2\">\n                    <User className=\"h-4 w-4 text-matrix\" />\n                  </div>\n                  <div>\n                    <p className=\"text-light-gray text-xs font-mono\">{post.author}</p>\n                    <p className=\"text-dim-gray text-xs\">{post.authorRole}</p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"px-6 pb-6\">\n                <Link href={`/blog/${post.id}`}>\n                  <div className=\"text-matrix hover:text-matrix-dark text-sm font-mono flex items-center cursor-pointer\">\n                    Read More <ChevronRight className=\"ml-1 h-4 w-4\" />\n                  </div>\n                </Link>\n              </div>\n            </div>\n          ))}\n        </div>\n        \n        {/* Newsletter Subscription */}\n        <div className=\"terminal-card p-8 rounded-lg text-center mb-12\">\n          <h2 className=\"text-2xl font-mono font-bold text-matrix mb-3\">Stay Updated</h2>\n          <p className=\"text-dim-gray mb-6 max-w-xl mx-auto\">\n            Subscribe to our newsletter to receive the latest articles, security advisories, \n            and community updates directly in your inbox.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row max-w-md mx-auto gap-4\">\n            <Input\n              type=\"email\"\n              placeholder=\"Enter your email address\"\n              className=\"bg-dark-terminal border-matrix/30 font-mono flex-grow\"\n            />\n            <Button className=\"bg-matrix text-black hover:bg-matrix/80 font-mono whitespace-nowrap\">\n              Subscribe\n            </Button>\n          </div>\n          \n          <p className=\"text-xs text-dim-gray mt-4\">\n            We respect your privacy. Unsubscribe at any time.\n          </p>\n        </div>\n        \n        {/* Recent Articles */}\n        <div>\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-2xl font-mono font-bold text-matrix\">Recent Articles</h2>\n            <Link href=\"/blog/archive\">\n              <div className=\"text-matrix hover:text-matrix-dark text-sm font-mono flex items-center cursor-pointer\">\n                View All <ChevronRight className=\"ml-1 h-4 w-4\" />\n              </div>\n            </Link>\n          </div>\n          \n          <div className=\"grid grid-cols-1 gap-4\">\n            {blogPosts.slice(0, 4).map((post) => (\n              <div key={post.id} className=\"terminal-card p-4 rounded-lg border border-matrix/30 hover:bg-matrix/5 transition duration-200\">\n                <div className=\"flex items-start\">\n                  <div className=\"flex-shrink-0 w-16 h-16 bg-terminal/50 rounded-md border border-matrix/30 flex items-center justify-center mr-4\">\n                    <Tag className=\"h-6 w-6 text-matrix\" />\n                  </div>\n                  \n                  <div className=\"flex-grow\">\n                    <div className=\"flex items-center space-x-3 text-xs text-dim-gray mb-1\">\n                      <span className=\"text-matrix\">{post.category}</span>\n                      <span>•</span>\n                      <span>{post.date}</span>\n                      <span>•</span>\n                      <span>{post.readTime}</span>\n                    </div>\n                    \n                    <Link href={`/blog/${post.id}`}>\n                      <div className=\"text-light-gray hover:text-matrix font-mono text-lg mb-1 block cursor-pointer\">\n                        {post.title}\n                      </div>\n                    </Link>\n                    \n                    <p className=\"text-dim-gray text-sm line-clamp-1\">\n                      {post.excerpt}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":16621},"client/src/pages/client-landing-page.tsx":{"content":"\nimport { Link, Redirect } from \"wouter\";\nimport { ArrowRight, Shield, Users, TrendingUp, Lock, CheckCircle, Star, Building2, Zap, Eye, Clock, Award, Globe, FileText, ChevronRight, Monitor, Database, Bot } from \"lucide-react\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport default function ClientLandingPage() {\n  const { user } = useAuth();\n\n  // Allow both logged-in and non-logged-in users to access this page\n  // Removed automatic redirect to dashboard\n\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground />\n\n      {/* Header/Navigation */}\n      <header className=\"relative z-10 border-b border-matrix/30 bg-black/80 backdrop-blur-md\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center\">\n              <span className=\"text-matrix text-xl font-mono font-bold\">CyberHunt_</span>\n              <span className=\"text-dim-gray text-sm font-mono ml-2\">Enterprise Security</span>\n            </div>\n            <nav className=\"hidden md:flex space-x-8\">\n              <a href=\"#security\" className=\"text-dim-gray hover:text-matrix font-mono text-sm transition-colors\">Security</a>\n              <a href=\"#features\" className=\"text-dim-gray hover:text-matrix font-mono text-sm transition-colors\">Features</a>\n              <a href=\"#pricing\" className=\"text-dim-gray hover:text-matrix font-mono text-sm transition-colors\">Pricing</a>\n              <a href=\"#testimonials\" className=\"text-dim-gray hover:text-matrix font-mono text-sm transition-colors\">Case Studies</a>\n              <a href=\"#contact\" className=\"text-dim-gray hover:text-matrix font-mono text-sm transition-colors\">Contact</a>\n            </nav>\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/auth\">\n                <Button variant=\"outline\" className=\"border-matrix/50 text-matrix hover:bg-matrix/10 font-mono text-sm transition-all\">\n                  Login\n                </Button>\n              </Link>\n              <Link href=\"/auth?mode=register\">\n                <Button className=\"glow-button font-mono text-sm\">\n                  Start Security Program\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"relative z-10 pt-24 pb-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-2 gap-16 items-center\">\n            <div>\n              <div className=\"inline-flex items-center px-4 py-2 rounded-full border border-matrix/30 bg-matrix/10 mb-8\">\n                <Shield className=\"h-4 w-4 text-matrix mr-2\" />\n                <span className=\"text-matrix font-mono text-sm\">Next-Gen Security Platform</span>\n              </div>\n              <h1 className=\"text-4xl md:text-5xl lg:text-6xl font-mono font-bold text-light-gray mb-8 leading-tight\">\n                <span className=\"text-matrix\">Fortify</span> Your Digital Infrastructure\n              </h1>\n              <p className=\"text-dim-gray text-xl mb-10 leading-relaxed\">\n                Connect with the world's elite security researchers to identify vulnerabilities before attackers do. \n                Our platform transforms cybersecurity from reactive defense to proactive protection.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-6 mb-10\">\n                <Link href=\"/auth?mode=register\">\n                  <Button className=\"glow-button text-lg font-mono py-8 px-10 rounded-lg\">\n                    Launch Security Program <ArrowRight className=\"ml-3 h-6 w-6\" />\n                  </Button>\n                </Link>\n                <Link href=\"#demo\">\n                  <Button variant=\"outline\" className=\"border-matrix/50 text-matrix hover:bg-matrix/10 text-lg font-mono py-8 px-10 rounded-lg transition-all\">\n                    Request Demo\n                  </Button>\n                </Link>\n              </div>\n              <div className=\"grid grid-cols-2 gap-8 text-sm\">\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"h-5 w-5 text-matrix mr-3\" />\n                  <span className=\"text-dim-gray font-mono\">Zero Setup Costs</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"h-5 w-5 text-matrix mr-3\" />\n                  <span className=\"text-dim-gray font-mono\">Pay Only for Results</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"h-5 w-5 text-matrix mr-3\" />\n                  <span className=\"text-dim-gray font-mono\">24/7 Security Coverage</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"h-5 w-5 text-matrix mr-3\" />\n                  <span className=\"text-dim-gray font-mono\">Enterprise Grade</span>\n                </div>\n              </div>\n            </div>\n            <div className=\"relative\">\n              <div className=\"terminal-card p-10 rounded-xl border border-matrix/30 animate-pulse-glow\">\n                <div className=\"terminal-header mb-8\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-matrix font-mono text-lg\">Security Command Center</span>\n                    <div className=\"flex space-x-2\">\n                      <div className=\"w-4 h-4 rounded-full bg-red-500\"></div>\n                      <div className=\"w-4 h-4 rounded-full bg-yellow-500\"></div>\n                      <div className=\"w-4 h-4 rounded-full bg-green-500\"></div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"space-y-6\">\n                  <div className=\"flex justify-between items-center py-2\">\n                    <span className=\"text-dim-gray font-mono\">Critical Vulnerabilities:</span>\n                    <span className=\"text-red-400 font-mono text-lg font-bold\">0</span>\n                  </div>\n                  <div className=\"flex justify-between items-center py-2\">\n                    <span className=\"text-dim-gray font-mono\">High Priority:</span>\n                    <span className=\"text-orange-400 font-mono text-lg font-bold\">2</span>\n                  </div>\n                  <div className=\"flex justify-between items-center py-2\">\n                    <span className=\"text-dim-gray font-mono\">Medium Priority:</span>\n                    <span className=\"text-yellow-400 font-mono text-lg font-bold\">7</span>\n                  </div>\n                  <div className=\"flex justify-between items-center py-2\">\n                    <span className=\"text-dim-gray font-mono\">Researchers Active:</span>\n                    <span className=\"text-matrix font-mono text-lg font-bold\">23</span>\n                  </div>\n                  <div className=\"w-full bg-terminal rounded-full h-3 mt-6\">\n                    <div className=\"bg-gradient-to-r from-matrix to-green-400 h-3 rounded-full transition-all duration-1000\" style={{width: '94%'}}></div>\n                  </div>\n                  <div className=\"text-center pt-2\">\n                    <span className=\"text-matrix font-mono text-lg font-bold\">Security Score: 94/100</span>\n                    <p className=\"text-dim-gray font-mono text-sm mt-1\">Excellent Protection</p>\n                  </div>\n                </div>\n              </div>\n              <div className=\"absolute -top-8 -right-8 w-16 h-16 rounded-full bg-matrix/20 flex items-center justify-center border border-matrix animate-pulse\">\n                <Shield className=\"h-8 w-8 text-matrix\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Trust Indicators */}\n      <section className=\"relative z-10 bg-gradient-to-r from-terminal to-black border-y border-matrix/30 py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-10\">\n            <p className=\"text-dim-gray font-mono text-lg\">Trusted by leading organizations worldwide</p>\n          </div>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-12\">\n            <div className=\"text-center\">\n              <div className=\"mb-4\">\n                <Globe className=\"h-8 w-8 text-matrix mx-auto\" />\n              </div>\n              <p className=\"text-matrix font-mono text-3xl md:text-4xl font-bold mb-2\">99.9%</p>\n              <p className=\"text-dim-gray font-mono text-sm\">Uptime SLA Guarantee</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"mb-4\">\n                <Clock className=\"h-8 w-8 text-matrix mx-auto\" />\n              </div>\n              <p className=\"text-matrix font-mono text-3xl md:text-4xl font-bold mb-2\">&lt;2hrs</p>\n              <p className=\"text-dim-gray font-mono text-sm\">Average Response Time</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"mb-4\">\n                <Award className=\"h-8 w-8 text-matrix mx-auto\" />\n              </div>\n              <p className=\"text-matrix font-mono text-3xl md:text-4xl font-bold mb-2\">SOC2</p>\n              <p className=\"text-dim-gray font-mono text-sm\">Type II Certified</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"mb-4\">\n                <Users className=\"h-8 w-8 text-matrix mx-auto\" />\n              </div>\n              <p className=\"text-matrix font-mono text-3xl md:text-4xl font-bold mb-2\">10K+</p>\n              <p className=\"text-dim-gray font-mono text-sm\">Verified Researchers</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Enhanced Features Section */}\n      <section id=\"features\" className=\"relative z-10 py-24\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-mono font-bold text-light-gray mb-6\">\n              <span className=\"text-matrix\">_</span> Platform Capabilities\n            </h2>\n            <p className=\"text-dim-gray text-xl max-w-3xl mx-auto\">\n              Comprehensive security testing platform designed for modern enterprises\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-10\">\n            <div className=\"terminal-card p-8 rounded-xl border border-matrix/30 hover:animate-pulse-glow group\">\n              <div className=\"mb-6\">\n                <div className=\"w-16 h-16 rounded-lg bg-matrix/10 flex items-center justify-center border border-matrix/30 group-hover:bg-matrix/20 transition-all\">\n                  <Bot className=\"text-matrix h-8 w-8\" />\n                </div>\n              </div>\n              <h3 className=\"text-2xl font-mono font-bold text-light-gray mb-4\">AI-Powered Triage</h3>\n              <p className=\"text-dim-gray mb-6 leading-relaxed\">\n                Advanced AI automatically validates, prioritizes, and routes vulnerability reports, reducing false positives by 85% and accelerating response times.\n              </p>\n              <ul className=\"text-sm text-dim-gray space-y-3\">\n                <li className=\"flex items-center\"><CheckCircle className=\"h-4 w-4 text-matrix mr-3\" />Automated duplicate detection</li>\n                <li className=\"flex items-center\"><CheckCircle className=\"h-4 w-4 text-matrix mr-3\" />Smart severity assessment</li>\n                <li className=\"flex items-center\"><CheckCircle className=\"h-4 w-4 text-matrix mr-3\" />Context-aware routing</li>\n              </ul>\n            </div>\n\n            <div className=\"terminal-card p-8 rounded-xl border border-matrix/30 hover:animate-pulse-glow group\">\n              <div className=\"mb-6\">\n                <div className=\"w-16 h-16 rounded-lg bg-matrix/10 flex items-center justify-center border border-matrix/30 group-hover:bg-matrix/20 transition-all\">\n                  <Users className=\"text-matrix h-8 w-8\" />\n                </div>\n              </div>\n              <h3 className=\"text-2xl font-mono font-bold text-light-gray mb-4\">Elite Researcher Network</h3>\n              <p className=\"text-dim-gray mb-6 leading-relaxed\">\n                Access our curated network of top-tier security researchers, each vetted through rigorous background checks and skill assessments.\n              </p>\n              <ul className=\"text-sm text-dim-gray space-y-3\">\n                <li className=\"flex items-center\"><CheckCircle className=\"h-4 w-4 text-matrix mr-3\" />Multi-layer verification process</li>\n                <li className=\"flex items-center\"><CheckCircle className=\"h-4 w-4 text-matrix mr-3\" />Specialized expertise matching</li>\n                <li className=\"flex items-center\"><CheckCircle className=\"h-4 w-4 text-matrix mr-3\" />Performance-based reputation</li>\n              </ul>\n            </div>\n\n            <div className=\"terminal-card p-8 rounded-xl border border-matrix/30 hover:animate-pulse-glow group\">\n              <div className=\"mb-6\">\n                <div className=\"w-16 h-16 rounded-lg bg-matrix/10 flex items-center justify-center border border-matrix/30 group-hover:bg-matrix/20 transition-all\">\n                  <Monitor className=\"text-matrix h-8 w-8\" />\n                </div>\n              </div>\n              <h3 className=\"text-2xl font-mono font-bold text-light-gray mb-4\">Real-Time Monitoring</h3>\n              <p className=\"text-dim-gray mb-6 leading-relaxed\">\n                Comprehensive dashboard providing real-time insights into your security posture with customizable alerts and detailed analytics.\n              </p>\n              <ul className=\"text-sm text-dim-gray space-y-3\">\n                <li className=\"flex items-center\"><CheckCircle className=\"h-4 w-4 text-matrix mr-3\" />Live threat visualization</li>\n                <li className=\"flex items-center\"><CheckCircle className=\"h-4 w-4 text-matrix mr-3\" />Custom alert rules</li>\n                <li className=\"flex items-center\"><CheckCircle className=\"h-4 w-4 text-matrix mr-3\" />Executive reporting</li>\n              </ul>\n            </div>\n\n            <div className=\"terminal-card p-8 rounded-xl border border-matrix/30 hover:animate-pulse-glow group\">\n              <div className=\"mb-6\">\n                <div className=\"w-16 h-16 rounded-lg bg-matrix/10 flex items-center justify-center border border-matrix/30 group-hover:bg-matrix/20 transition-all\">\n                  <Database className=\"text-matrix h-8 w-8\" />\n                </div>\n              </div>\n              <h3 className=\"text-2xl font-mono font-bold text-light-gray mb-4\">Enterprise Integrations</h3>\n              <p className=\"text-dim-gray mb-6 leading-relaxed\">\n                Seamlessly integrate with your existing security tools and workflows through our comprehensive API and pre-built connectors.\n              </p>\n              <ul className=\"text-sm text-dim-gray space-y-3\">\n                <li className=\"flex items-center\"><CheckCircle className=\"h-4 w-4 text-matrix mr-3\" />SIEM/SOAR integration</li>\n                <li className=\"flex items-center\"><CheckCircle className=\"h-4 w-4 text-matrix mr-3\" />Ticketing system sync</li>\n                <li className=\"flex items-center\"><CheckCircle className=\"h-4 w-4 text-matrix mr-3\" />CI/CD pipeline hooks</li>\n              </ul>\n            </div>\n\n            <div className=\"terminal-card p-8 rounded-xl border border-matrix/30 hover:animate-pulse-glow group\">\n              <div className=\"mb-6\">\n                <div className=\"w-16 h-16 rounded-lg bg-matrix/10 flex items-center justify-center border border-matrix/30 group-hover:bg-matrix/20 transition-all\">\n                  <Lock className=\"text-matrix h-8 w-8\" />\n                </div>\n              </div>\n              <h3 className=\"text-2xl font-mono font-bold text-light-gray mb-4\">Zero Trust Security</h3>\n              <p className=\"text-dim-gray mb-6 leading-relaxed\">\n                Bank-grade security infrastructure with end-to-end encryption, multi-factor authentication, and complete audit trails.\n              </p>\n              <ul className=\"text-sm text-dim-gray space-y-3\">\n                <li className=\"flex items-center\"><CheckCircle className=\"h-4 w-4 text-matrix mr-3\" />AES-256 encryption</li>\n                <li className=\"flex items-center\"><CheckCircle className=\"h-4 w-4 text-matrix mr-3\" />Zero-knowledge architecture</li>\n                <li className=\"flex items-center\"><CheckCircle className=\"h-4 w-4 text-matrix mr-3\" />Immutable audit logs</li>\n              </ul>\n            </div>\n\n            <div className=\"terminal-card p-8 rounded-xl border border-matrix/30 hover:animate-pulse-glow group\">\n              <div className=\"mb-6\">\n                <div className=\"w-16 h-16 rounded-lg bg-matrix/10 flex items-center justify-center border border-matrix/30 group-hover:bg-matrix/20 transition-all\">\n                  <TrendingUp className=\"text-matrix h-8 w-8\" />\n                </div>\n              </div>\n              <h3 className=\"text-2xl font-mono font-bold text-light-gray mb-4\">Cost Optimization</h3>\n              <p className=\"text-dim-gray mb-6 leading-relaxed\">\n                Reduce security testing costs by up to 75% with our efficient pay-per-vulnerability model and automated workflows.\n              </p>\n              <ul className=\"text-sm text-dim-gray space-y-3\">\n                <li className=\"flex items-center\"><CheckCircle className=\"h-4 w-4 text-matrix mr-3\" />Transparent pricing model</li>\n                <li className=\"flex items-center\"><CheckCircle className=\"h-4 w-4 text-matrix mr-3\" />Budget controls</li>\n                <li className=\"flex items-center\"><CheckCircle className=\"h-4 w-4 text-matrix mr-3\" />ROI analytics</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Process Section */}\n      <section className=\"relative z-10 py-24 bg-gradient-to-b from-terminal to-black border-y border-matrix/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-mono font-bold text-light-gray mb-6\">\n              <span className=\"text-matrix\">_</span> How It Works\n            </h2>\n            <p className=\"text-dim-gray text-xl max-w-3xl mx-auto\">\n              Simple, streamlined process to get your security program up and running\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div className=\"bg-black/60 p-8 rounded-xl border border-matrix/20 relative backdrop-blur-sm\">\n              <div className=\"absolute -top-6 -left-6 w-12 h-12 rounded-full bg-matrix/20 flex items-center justify-center border-2 border-matrix font-mono text-matrix text-lg font-bold\">1</div>\n              <Building2 className=\"text-matrix h-10 w-10 mb-6 mt-4\" />\n              <h3 className=\"text-xl font-mono font-bold text-light-gray mb-4\">Program Setup</h3>\n              <p className=\"text-dim-gray text-sm leading-relaxed\">\n                Define your scope, set reward parameters, and configure program rules. Our experts help optimize your program for maximum effectiveness and researcher engagement.\n              </p>\n            </div>\n\n            <div className=\"bg-black/60 p-8 rounded-xl border border-matrix/20 relative backdrop-blur-sm\">\n              <div className=\"absolute -top-6 -left-6 w-12 h-12 rounded-full bg-matrix/20 flex items-center justify-center border-2 border-matrix font-mono text-matrix text-lg font-bold\">2</div>\n              <Users className=\"text-matrix h-10 w-10 mb-6 mt-4\" />\n              <h3 className=\"text-xl font-mono font-bold text-light-gray mb-4\">AI Matching</h3>\n              <p className=\"text-dim-gray text-sm leading-relaxed\">\n                Our advanced AI matches your program with researchers who have proven expertise in your technology stack, industry vertical, and specific security domains.\n              </p>\n            </div>\n\n            <div className=\"bg-black/60 p-8 rounded-xl border border-matrix/20 relative backdrop-blur-sm\">\n              <div className=\"absolute -top-6 -left-6 w-12 h-12 rounded-full bg-matrix/20 flex items-center justify-center border-2 border-matrix font-mono text-matrix text-lg font-bold\">3</div>\n              <Eye className=\"text-matrix h-10 w-10 mb-6 mt-4\" />\n              <h3 className=\"text-xl font-mono font-bold text-light-gray mb-4\">Continuous Testing</h3>\n              <p className=\"text-dim-gray text-sm leading-relaxed\">\n                Elite researchers continuously test your applications, submitting detailed vulnerability reports with proof-of-concept exploits and comprehensive remediation guidance.\n              </p>\n            </div>\n\n            <div className=\"bg-black/60 p-8 rounded-xl border border-matrix/20 relative backdrop-blur-sm\">\n              <div className=\"absolute -top-6 -left-6 w-12 h-12 rounded-full bg-matrix/20 flex items-center justify-center border-2 border-matrix font-mono text-matrix text-lg font-bold\">4</div>\n              <Zap className=\"text-matrix h-10 w-10 mb-6 mt-4\" />\n              <h3 className=\"text-xl font-mono font-bold text-light-gray mb-4\">Rapid Response</h3>\n              <p className=\"text-dim-gray text-sm leading-relaxed\">\n                Receive actionable reports, track remediation progress, and verify fixes. Our platform streamlines the entire vulnerability lifecycle with automated workflows.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works - Pricing Transparency */}\n      <section className=\"relative z-10 py-16 bg-gradient-to-r from-matrix/10 to-green-400/10 border-y border-matrix/30\">\n        <div className=\"max-w-5xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-mono font-bold text-light-gray mb-4\">\n              <span className=\"text-matrix\">How CyberHunt Works</span>\n            </h2>\n            <p className=\"text-xl text-matrix font-mono font-bold mb-2\">\n              100% FREE for Organizations\n            </p>\n            <p className=\"text-dim-gray text-lg\">\n              No upfront fees. No subscriptions. Just results.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8 mb-12\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 rounded-full bg-matrix/20 flex items-center justify-center mx-auto mb-4 border-2 border-matrix\">\n                <span className=\"text-matrix font-mono text-2xl font-bold\">1</span>\n              </div>\n              <h3 className=\"text-xl font-mono text-light-gray mb-3\">Setup Your Program</h3>\n              <p className=\"text-dim-gray\">\n                Launch your bug bounty program in minutes. Define scope, set rewards - completely free.\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 rounded-full bg-matrix/20 flex items-center justify-center mx-auto mb-4 border-2 border-matrix\">\n                <span className=\"text-matrix font-mono text-2xl font-bold\">2</span>\n              </div>\n              <h3 className=\"text-xl font-mono text-light-gray mb-3\">Researchers Find Bugs</h3>\n              <p className=\"text-dim-gray\">\n                Elite security researchers test your systems and submit verified vulnerability reports.\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 rounded-full bg-matrix/20 flex items-center justify-center mx-auto mb-4 border-2 border-matrix\">\n                <span className=\"text-matrix font-mono text-2xl font-bold\">3</span>\n              </div>\n              <h3 className=\"text-xl font-mono text-light-gray mb-3\">Pay Only for Results</h3>\n              <p className=\"text-dim-gray\">\n                Pay rewards only when valid vulnerabilities are discovered. We earn a small commission from successful findings.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"terminal-card p-8 rounded-xl border border-matrix/30 bg-black/60 backdrop-blur-sm max-w-4xl mx-auto\">\n            <div className=\"text-center mb-6\">\n              <h3 className=\"text-2xl font-mono text-matrix font-bold mb-2\">Transparent Cost Structure</h3>\n              <p className=\"text-dim-gray\">Our revenue model aligns with your success</p>\n            </div>\n            \n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <div className=\"text-center\">\n                <div className=\"text-4xl font-mono text-matrix font-bold mb-2\">$0</div>\n                <p className=\"text-light-gray font-mono text-lg mb-2\">Setup & Monthly Fees</p>\n                <p className=\"text-dim-gray text-sm\">No hidden costs, no subscriptions</p>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"text-4xl font-mono text-matrix font-bold mb-2\">15-20%</div>\n                <p className=\"text-light-gray font-mono text-lg mb-2\">Our Commission</p>\n                <p className=\"text-dim-gray text-sm\">Only earned when vulnerabilities are found</p>\n              </div>\n            </div>\n\n\n          </div>\n        </div>\n      </section>\n\n\n\n      {/* Managed Vulnerability Program Section */}\n      <section className=\"relative z-10 py-24 bg-gradient-to-b from-terminal to-black border-y border-matrix/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-mono font-bold text-light-gray mb-6\">\n              🔐 <span className=\"text-matrix\">Enterprise Vulnerability Management</span>\n            </h2>\n            <div className=\"max-w-4xl mx-auto\">\n              <p className=\"text-dim-gray text-xl mb-8\">\n                Our managed triage and enterprise support service is available through flexible pricing plans:\n              </p>\n            </div>\n          </div>\n\n          {/* Pricing Tiers */}\n          <div className=\"grid lg:grid-cols-3 gap-8 mb-16\">\n            {/* Per-Report Plan */}\n            <div className=\"terminal-card p-8 rounded-xl border border-matrix/30 bg-black/60 backdrop-blur-sm\">\n              <div className=\"text-center mb-6\">\n                <div className=\"w-16 h-16 rounded-full bg-matrix/10 flex items-center justify-center mx-auto mb-4 border border-matrix/30\">\n                  <span className=\"text-matrix font-mono text-2xl font-bold\">•</span>\n                </div>\n                <h3 className=\"text-2xl font-mono text-light-gray font-bold mb-2\">Per-Report Plan</h3>\n                <div className=\"text-4xl font-mono text-matrix font-bold mb-2\">$150</div>\n                <p className=\"text-dim-gray text-sm\">per report</p>\n              </div>\n              <p className=\"text-dim-gray text-center mb-6\">\n                Ideal for companies with occasional submissions.\n              </p>\n              <ul className=\"space-y-3 mb-8\">\n                <li className=\"flex items-center text-dim-gray\">\n                  <CheckCircle className=\"h-4 w-4 text-matrix mr-3 flex-shrink-0\" />\n                  <span className=\"text-sm\">Professional triage per report</span>\n                </li>\n                <li className=\"flex items-center text-dim-gray\">\n                  <CheckCircle className=\"h-4 w-4 text-matrix mr-3 flex-shrink-0\" />\n                  <span className=\"text-sm\">Detailed vulnerability assessment</span>\n                </li>\n                <li className=\"flex items-center text-dim-gray\">\n                  <CheckCircle className=\"h-4 w-4 text-matrix mr-3 flex-shrink-0\" />\n                  <span className=\"text-sm\">AI-powered validation</span>\n                </li>\n                <li className=\"flex items-center text-dim-gray\">\n                  <CheckCircle className=\"h-4 w-4 text-matrix mr-3 flex-shrink-0\" />\n                  <span className=\"text-sm\">Standard reporting</span>\n                </li>\n              </ul>\n              <Button variant=\"outline\" className=\"w-full border-matrix/50 text-matrix hover:bg-matrix/10 font-mono py-3\">\n                Get Started\n              </Button>\n            </div>\n\n            {/* Monthly Plan */}\n            <div className=\"terminal-card p-8 rounded-xl border-2 border-matrix bg-gradient-to-br from-matrix/10 to-green-400/10 relative\">\n              <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                <div className=\"bg-matrix text-black px-4 py-1 rounded-full text-sm font-mono font-bold\">\n                  POPULAR\n                </div>\n              </div>\n              <div className=\"text-center mb-6\">\n                <div className=\"w-16 h-16 rounded-full bg-matrix/20 flex items-center justify-center mx-auto mb-4 border-2 border-matrix\">\n                  <span className=\"text-matrix font-mono text-2xl font-bold\">•</span>\n                </div>\n                <h3 className=\"text-2xl font-mono text-light-gray font-bold mb-2\">Monthly Plan</h3>\n                <div className=\"text-4xl font-mono text-matrix font-bold mb-2\">$2,999</div>\n                <p className=\"text-dim-gray text-sm\">per month</p>\n              </div>\n              <p className=\"text-dim-gray text-center mb-6\">\n                Unlimited triage reports + Dedicated security analyst.\n              </p>\n              <ul className=\"space-y-3 mb-8\">\n                <li className=\"flex items-center text-dim-gray\">\n                  <CheckCircle className=\"h-4 w-4 text-matrix mr-3 flex-shrink-0\" />\n                  <span className=\"text-sm\">Unlimited vulnerability triage</span>\n                </li>\n                <li className=\"flex items-center text-dim-gray\">\n                  <CheckCircle className=\"h-4 w-4 text-matrix mr-3 flex-shrink-0\" />\n                  <span className=\"text-sm\">Dedicated security analyst</span>\n                </li>\n                <li className=\"flex items-center text-dim-gray\">\n                  <CheckCircle className=\"h-4 w-4 text-matrix mr-3 flex-shrink-0\" />\n                  <span className=\"text-sm\">24/7 monitoring & response</span>\n                </li>\n                <li className=\"flex items-center text-dim-gray\">\n                  <CheckCircle className=\"h-4 w-4 text-matrix mr-3 flex-shrink-0\" />\n                  <span className=\"text-sm\">Advanced AI triage</span>\n                </li>\n                <li className=\"flex items-center text-dim-gray\">\n                  <CheckCircle className=\"h-4 w-4 text-matrix mr-3 flex-shrink-0\" />\n                  <span className=\"text-sm\">Monthly security reports</span>\n                </li>\n              </ul>\n              <Button className=\"w-full glow-button font-mono py-3\">\n                Start Monthly Plan\n              </Button>\n            </div>\n\n            {/* Annual Plan */}\n            <div className=\"terminal-card p-8 rounded-xl border border-matrix/30 bg-black/60 backdrop-blur-sm\">\n              <div className=\"text-center mb-6\">\n                <div className=\"w-16 h-16 rounded-full bg-matrix/10 flex items-center justify-center mx-auto mb-4 border border-matrix/30\">\n                  <span className=\"text-matrix font-mono text-2xl font-bold\">•</span>\n                </div>\n                <h3 className=\"text-2xl font-mono text-light-gray font-bold mb-2\">Annual Plan</h3>\n                <div className=\"text-4xl font-mono text-matrix font-bold mb-2\">$29,990</div>\n                <p className=\"text-dim-gray text-sm\">per year</p>\n                <div className=\"text-green-400 text-sm font-mono mt-1\">Save $6,000/year</div>\n              </div>\n              <p className=\"text-dim-gray text-center mb-6\">\n                All monthly features + SLA-backed response times + Priority triage + Custom reporting.\n              </p>\n              <ul className=\"space-y-3 mb-8\">\n                <li className=\"flex items-center text-dim-gray\">\n                  <CheckCircle className=\"h-4 w-4 text-matrix mr-3 flex-shrink-0\" />\n                  <span className=\"text-sm\">Everything in Monthly Plan</span>\n                </li>\n                <li className=\"flex items-center text-dim-gray\">\n                  <CheckCircle className=\"h-4 w-4 text-matrix mr-3 flex-shrink-0\" />\n                  <span className=\"text-sm\">SLA-backed response times</span>\n                </li>\n                <li className=\"flex items-center text-dim-gray\">\n                  <CheckCircle className=\"h-4 w-4 text-matrix mr-3 flex-shrink-0\" />\n                  <span className=\"text-sm\">Priority triage queue</span>\n                </li>\n                <li className=\"flex items-center text-dim-gray\">\n                  <CheckCircle className=\"h-4 w-4 text-matrix mr-3 flex-shrink-0\" />\n                  <span className=\"text-sm\">Custom reporting & analytics</span>\n                </li>\n                <li className=\"flex items-center text-dim-gray\">\n                  <CheckCircle className=\"h-4 w-4 text-matrix mr-3 flex-shrink-0\" />\n                  <span className=\"text-sm\">Dedicated account manager</span>\n                </li>\n              </ul>\n              <Button variant=\"outline\" className=\"w-full border-matrix/50 text-matrix hover:bg-matrix/10 font-mono py-3\">\n                Choose Annual\n              </Button>\n            </div>\n          </div>\n\n          {/* CTA Section */}\n          <div className=\"text-center\">\n            <Link href=\"/auth?mode=register\">\n              <Button className=\"glow-button text-xl font-mono py-6 px-12 rounded-lg mb-4\">\n                Start a Free Consultation <ArrowRight className=\"ml-3 h-6 w-6\" />\n              </Button>\n            </Link>\n            <p className=\"text-dim-gray text-sm\">\n              Free 30-minute security assessment • No commitment required • Custom enterprise solutions available\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Key Benefits Section */}\n      <section className=\"relative z-10 py-16 bg-gradient-to-b from-black to-terminal\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 rounded-full bg-matrix/10 flex items-center justify-center mx-auto mb-4 border border-matrix/30\">\n                <TrendingUp className=\"h-8 w-8 text-matrix\" />\n              </div>\n              <h3 className=\"text-xl font-mono text-light-gray mb-3\">75% Cost Reduction</h3>\n              <p className=\"text-dim-gray\">\n                Significantly lower costs compared to traditional penetration testing while providing continuous coverage.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 rounded-full bg-matrix/10 flex items-center justify-center mx-auto mb-4 border border-matrix/30\">\n                <Clock className=\"h-8 w-8 text-matrix\" />\n              </div>\n              <h3 className=\"text-xl font-mono text-light-gray mb-3\">2-Hour Response Time</h3>\n              <p className=\"text-dim-gray\">\n                Critical vulnerabilities are triaged and escalated to your team within 2 hours of discovery.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 rounded-full bg-matrix/10 flex items-center justify-center mx-auto mb-4 border border-matrix/30\">\n                <Users className=\"h-8 w-8 text-matrix\" />\n              </div>\n              <h3 className=\"text-xl font-mono text-light-gray mb-3\">Elite Researcher Network</h3>\n              <p className=\"text-dim-gray\">\n                Access to 10,000+ vetted security researchers with specialized expertise in your technology stack.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Enhanced CTA Section */}\n      <section id=\"contact\" className=\"relative z-10 py-24\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <div className=\"mb-8\">\n            <Shield className=\"text-matrix h-16 w-16 mx-auto mb-8\" />\n          </div>\n          <h2 className=\"text-4xl md:text-5xl font-mono font-bold text-light-gray mb-8\">\n            Ready to Transform Your Security?\n          </h2>\n          <p className=\"text-dim-gray text-xl mb-12 leading-relaxed max-w-3xl mx-auto\">\n            Join the ranks of forward-thinking organizations using next-generation security testing. \n            Launch your program today and discover vulnerabilities before attackers do.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-6 justify-center mb-12\">\n            <Link href=\"/auth?mode=register\">\n              <Button className=\"glow-button text-xl font-mono py-8 px-12 rounded-lg\">\n                Launch Security Program <ArrowRight className=\"ml-3 h-6 w-6\" />\n              </Button>\n            </Link>\n            <Button variant=\"outline\" className=\"border-matrix/50 text-matrix hover:bg-matrix/10 text-xl font-mono py-8 px-12 rounded-lg transition-all\">\n              Schedule Demo\n            </Button>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 text-center\">\n            <div className=\"flex items-center justify-center\">\n              <CheckCircle className=\"h-5 w-5 text-matrix mr-3\" />\n              <span className=\"text-dim-gray font-mono\">30-day free trial</span>\n            </div>\n            <div className=\"flex items-center justify-center\">\n              <CheckCircle className=\"h-5 w-5 text-matrix mr-3\" />\n              <span className=\"text-dim-gray font-mono\">No setup fees</span>\n            </div>\n            <div className=\"flex items-center justify-center\">\n              <CheckCircle className=\"h-5 w-5 text-matrix mr-3\" />\n              <span className=\"text-dim-gray font-mono\">Cancel anytime</span>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Enhanced Footer */}\n      <footer className=\"relative z-10 py-16 border-t border-matrix/30 bg-black/80\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-5 gap-12\">\n            <div className=\"lg:col-span-2\">\n              <div className=\"mb-6\">\n                <span className=\"text-matrix text-2xl font-mono font-bold\">CyberHunt_</span>\n                <p className=\"text-dim-gray text-lg mt-3\">Enterprise Security Solutions</p>\n              </div>\n              <p className=\"text-dim-gray mb-6 leading-relaxed\">\n                Transforming cybersecurity through elite researcher networks and \n                AI-powered vulnerability discovery for modern enterprises.\n              </p>\n              <div className=\"flex space-x-4\">\n                <a href=\"#\" className=\"w-10 h-10 rounded-lg bg-matrix/10 flex items-center justify-center border border-matrix/30 hover:bg-matrix/20 transition-all\">\n                  <span className=\"text-matrix font-mono text-sm\">in</span>\n                </a>\n                <a href=\"#\" className=\"w-10 h-10 rounded-lg bg-matrix/10 flex items-center justify-center border border-matrix/30 hover:bg-matrix/20 transition-all\">\n                  <span className=\"text-matrix font-mono text-sm\">tw</span>\n                </a>\n                <a href=\"#\" className=\"w-10 h-10 rounded-lg bg-matrix/10 flex items-center justify-center border border-matrix/30 hover:bg-matrix/20 transition-all\">\n                  <span className=\"text-matrix font-mono text-sm\">gh</span>\n                </a>\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"text-light-gray font-mono text-lg mb-6\">Solutions</h4>\n              <ul className=\"space-y-3\">\n                <li><a href=\"#\" className=\"text-dim-gray hover:text-matrix font-mono text-sm transition-colors\">Bug Bounty Programs</a></li>\n                <li><a href=\"#\" className=\"text-dim-gray hover:text-matrix font-mono text-sm transition-colors\">Penetration Testing</a></li>\n                <li><a href=\"#\" className=\"text-dim-gray hover:text-matrix font-mono text-sm transition-colors\">Compliance Testing</a></li>\n                <li><a href=\"#\" className=\"text-dim-gray hover:text-matrix font-mono text-sm transition-colors\">Red Team Exercises</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"text-light-gray font-mono text-lg mb-6\">Resources</h4>\n              <ul className=\"space-y-3\">\n                <li><a href=\"#\" className=\"text-dim-gray hover:text-matrix font-mono text-sm transition-colors\">Case Studies</a></li>\n                <li><a href=\"#\" className=\"text-dim-gray hover:text-matrix font-mono text-sm transition-colors\">Security Blog</a></li>\n                <li><a href=\"#\" className=\"text-dim-gray hover:text-matrix font-mono text-sm transition-colors\">API Documentation</a></li>\n                <li><a href=\"#\" className=\"text-dim-gray hover:text-matrix font-mono text-sm transition-colors\">Security Guides</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"text-light-gray font-mono text-lg mb-6\">Company</h4>\n              <ul className=\"space-y-3\">\n                <li><a href=\"#\" className=\"text-dim-gray hover:text-matrix font-mono text-sm transition-colors\">About Us</a></li>\n                <li><a href=\"#\" className=\"text-dim-gray hover:text-matrix font-mono text-sm transition-colors\">Careers</a></li>\n                <li><a href=\"#\" className=\"text-dim-gray hover:text-matrix font-mono text-sm transition-colors\">Contact Sales</a></li>\n                <li><a href=\"#\" className=\"text-dim-gray hover:text-matrix font-mono text-sm transition-colors\">Support</a></li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-matrix/20 mt-12 pt-8\">\n            <div className=\"flex flex-col md:flex-row justify-between items-center\">\n              <p className=\"text-dim-gray text-sm font-mono mb-4 md:mb-0\">\n                © {new Date().getFullYear()} CyberHunt. All rights reserved. <span className=\"text-matrix\">|</span> Secure by Design.\n              </p>\n              <div className=\"flex space-x-6\">\n                <a href=\"#\" className=\"text-dim-gray hover:text-matrix text-sm font-mono transition-colors\">Privacy Policy</a>\n                <a href=\"#\" className=\"text-dim-gray hover:text-matrix text-sm font-mono transition-colors\">Terms of Service</a>\n                <a href=\"#\" className=\"text-dim-gray hover:text-matrix text-sm font-mono transition-colors\">Security</a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":43209},"client/src/pages/company-dashboard-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Save } from \"lucide-react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport { BadgeCheck, ShieldAlert, Shield, DollarSign, Users, Cpu, BugIcon, Clock, BarChart3, PlusCircle, Zap, Settings, Plus, CheckCircle, } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { Link, useLocation } from \"wouter\";\nimport PublicChat from \"@/components/public-chat\";\n\n// Company Dashboard Page\nexport default function CompanyDashboardPage() {\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const { user, logoutMutation } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  // Fetch company's bug bounty programs\n  const { data: programs = [] } = useQuery({\n    queryKey: [\"/api/company/programs\"],\n    queryFn: async ({ queryKey }) => {\n      const res = await fetch(queryKey[0]);\n      if (!res.ok) return [];\n      return res.json();\n    },\n    enabled: !!user && user.userType === \"company\"\n  });\n\n  // Fetch submissions for company programs\n  const { data: submissions = [] } = useQuery({\n    queryKey: [\"/api/company/submissions\"],\n    queryFn: async ({ queryKey }) => {\n      const res = await fetch(queryKey[0]);\n      if (!res.ok) return [];\n      return res.json();\n    },\n    enabled: !!user && user.userType === \"company\"\n  });\n\n  // Stats calculation\n  const stats = {\n    totalPrograms: programs.length,\n    activePrograms: programs.filter((p: any) => p.status === \"active\").length,\n    pendingSubmissions: submissions.filter((s: any) => s.status === \"pending\").length,\n    approvedSubmissions: submissions.filter((s: any) => s.status === \"approved\").length,\n    rejectedSubmissions: submissions.filter((s: any) => s.status === \"rejected\").length,\n    totalSubmissions: submissions.length,\n    totalPayout: submissions\n      .filter((s: any) => s.status === \"approved\")\n      .reduce((sum: number, s: any) => sum + (s.reward || 0), 0),\n  };\n\n  // Calculate submission status distribution\n  const submissionDistribution = {\n    pending: (stats.pendingSubmissions / (stats.totalSubmissions || 1)) * 100,\n    approved: (stats.approvedSubmissions / (stats.totalSubmissions || 1)) * 100,\n    rejected: (stats.rejectedSubmissions / (stats.totalSubmissions || 1)) * 100,\n  };\n\n  // Handle creating a new program\n  const handleCreateProgram = () => {\n    // Navigate to the create program page\n    setLocation(\"/create-program\");\n  };\n\n  // Filter submissions to recent ones and pending\n  const recentSubmissions = submissions\n    .sort((a: any, b: any) => {\n      return new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime();\n    })\n    .slice(0, 5);\n\n  const pendingSubmissions = submissions\n    .filter((s: any) => s.status === \"pending\")\n    .sort((a: any, b: any) => {\n      return new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime();\n    })\n    .slice(0, 5);\n\n  const handleLogout = async () => {\n    try {\n      await logoutMutation.mutateAsync();\n\n      // Clear all cookies\n      document.cookie.split(';').forEach(c => {\n        document.cookie = c.trim().split('=')[0] + '=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/';\n      });\n\n      // Clear stored data\n      localStorage.clear();\n      sessionStorage.clear();\n\n      // Clear any cached queries\n      queryClient.clear();\n\n      // Redirect to auth page\n      window.location.href = '/auth';\n    } catch (error) {\n      console.error('Logout error:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to logout. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col space-y-6 p-6 bg-black min-h-screen text-white\">\n      <div className=\"flex flex-col space-y-2\">\n        <h1 className=\"text-3xl font-bold tracking-tight text-matrix\">Company Dashboard</h1>\n        <p className=\"text-dim-gray\">\n          Welcome back, <span className=\"text-matrix\">{user?.companyName || user?.username}</span>\n        </p>\n      </div>\n\n      <Tabs\n        defaultValue={activeTab}\n        onValueChange={setActiveTab}\n        className=\"w-full\"\n      >\n        <TabsList className=\"grid grid-cols-5 mb-6 bg-black border border-matrix/20\">\n          <TabsTrigger value=\"overview\" className=\"data-[state=active]:bg-matrix/20 data-[state=active]:text-matrix\">\n            <BarChart3 className=\"mr-2 h-4 w-4\" />\n            Overview\n          </TabsTrigger>\n          <TabsTrigger value=\"programs\" className=\"data-[state=active]:bg-matrix/20 data-[state=active]:text-matrix\">\n            <Shield className=\"mr-2 h-4 w-4\" />\n            Programs\n          </TabsTrigger>\n          <TabsTrigger value=\"submissions\" className=\"data-[state=active]:bg-matrix/20 data-[state=active]:text-matrix\">\n            <BugIcon className=\"mr-2 h-4 w-4\" />\n            Submissions\n          </TabsTrigger>\n          <TabsTrigger value=\"triage\" className=\"data-[state=active]:bg-matrix/20 data-[state=active]:text-matrix\">\n            <Shield className=\"mr-2 h-4 w-4\" />\n            Triage Service\n          </TabsTrigger>\n          <TabsTrigger value=\"settings\" className=\"data-[state=active]:bg-matrix/20 data-[state=active]:text-matrix\">\n            <Settings className=\"mr-2 h-4 w-4\" />\n            Settings\n          </TabsTrigger>\n          <TabsTrigger value=\"chat\">Community Chat</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card className=\"bg-black border border-matrix/20\">\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-dim-gray\">\n                  Total Programs\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center\">\n                  <Shield className=\"h-5 w-5 text-matrix mr-2\" />\n                  <span className=\"text-2xl font-bold\">{stats.totalPrograms}</span>\n                </div>\n                <p className=\"text-xs text-dim-gray mt-2\">\n                  {stats.activePrograms} active programs\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-black border border-matrix/20\">\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-dim-gray\">\n                  Total Submissions\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center\">\n                  <BugIcon className=\"h-5 w-5 text-matrix mr-2\" />\n                  <span className=\"text-2xl font-bold\">{stats.totalSubmissions}</span>\n                </div>\n                <p className=\"text-xs text-dim-gray mt-2\">\n                  {stats.pendingSubmissions} pending review\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-black border border-matrix/20\">\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-dim-gray\">\n                  Approved Vulnerabilities\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center\">\n                  <BadgeCheck className=\"h-5 w-5 text-matrix mr-2\" />\n                  <span className=\"text-2xl font-bold\">{stats.approvedSubmissions}</span>\n                </div>\n                <p className=\"text-xs text-dim-gray mt-2\">\n                  {((stats.approvedSubmissions / (stats.totalSubmissions || 1)) * 100).toFixed(1)}% approval rate\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card \n              className=\"bg-black border border-matrix/20 hover:border-matrix cursor-pointer transition-colors\"\n              onClick={() => setLocation(\"/company/wallet\")}\n            >\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-dim-gray\">\n                  Total Payout\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center\">\n                  <DollarSign className=\"h-5 w-5 text-matrix mr-2\" />\n                  <span className=\"text-2xl font-bold\">${stats.totalPayout.toLocaleString()}</span>\n                </div>\n                <p className=\"text-xs text-dim-gray mt-2\">\n                  💼 Click to view wallet\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card className=\"col-span-2 bg-black border border-matrix/20\">\n              <CardHeader>\n                <CardTitle>Recent Activity</CardTitle>\n                <CardDescription>Latest submissions across all your programs</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {recentSubmissions.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {recentSubmissions.map((submission: any) => (\n                      <div key={submission.id} className=\"flex items-start space-x-4 pb-3 border-b border-primary/10\">\n                        <div className={`p-2 rounded-full ${\n                          submission.status === \"approved\" \n                          ? \"bg-green-900/20\" \n                          : submission.status === \"rejected\" \n                          ? \"bg-red-900/20\" \n                          : \"bg-yellow-900/20\"\n                        }`}>\n                          {submission.status === \"approved\" ? (\n                            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                          ) : submission.status === \"rejected\" ? (\n                            <ShieldAlert className=\"h-4 w-4 text-red-500\" />\n                          ) : (\n                            <Clock className=\"h-4 w-4 text-yellow-500\" />\n                          )}\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"flex justify-between\">\n                            <h4 className=\"text-sm font-semibold\">\n                              {submission.title}\n                            </h4>\n                            <span className=\"text-xs text-dim-gray\">\n                              {submission.createdAt ? formatDistanceToNow(new Date(submission.createdAt), { addSuffix: true }) : \"Recently\"}\n                            </span>\n                          </div>\n                          <p className=\"text-xs text-dim-gray mt-1\">\n                            Reported by: {submission.username || \"Anonymous\"}\n                          </p>\n                          <div className=\"mt-1 flex items-center\">\n                            <span className={`text-xs px-2 py-0.5 rounded-full ${\n                              submission.severity === \"critical\" ? \"bg-red-900/20 text-red-500\" :\n                              submission.severity === \"high\" ? \"bg-orange-900/20 text-orange-500\" :\n                              submission.severity === \"medium\" ? \"bg-yellow-900/20 text-yellow-500\" :\n                              \"bg-blue-900/20 text-blue-500\"\n                            }`}>\n                              {submission.severity || \"Low\"}\n                            </span>\n                            {submission.status === \"approved\" && submission.reward && (\n                              <span className=\"ml-2 text-xs px-2 py-0.5 rounded-full bg-green-900/20 text-green-500\">\n                                ${submission.reward}\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-6\">\n                    <BugIcon className=\"h-8 w-8 text-dim-gray mx-auto mb-3\" />\n                    <h3 className=\"text-lg font-medium\">No submissions yet</h3>\n                    <p className=\"text-dim-gray text-sm mt-1\">\n                      When researchers submit vulnerabilities, they'll appear here.\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-black border border-matrix/20\">\n              <CardHeader>\n                <CardTitle>Submission Status</CardTitle>\n                <CardDescription>Distribution of vulnerability reports</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {stats.totalSubmissions > 0 ? (\n                  <>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-xs\">\n                        <span className=\"text-dim-gray\">Pending</span>\n                        <span>{stats.pendingSubmissions} ({submissionDistribution.pending.toFixed(0)}%)</span>\n                      </div>\n                      <Progress value={submissionDistribution.pending} className=\"h-2 bg-primary/10\">\n                        <div className=\"h-full bg-yellow-500 rounded-full\" style={{ width: `${submissionDistribution.pending}%` }}></div>\n                      </Progress>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-xs\">\n                        <span className=\"text-dim-gray\">Approved</span>\n                        <span>{stats.approvedSubmissions} ({submissionDistribution.approved.toFixed(0)}%)</span>\n                      </div>\n                      <Progress value={submissionDistribution.approved} className=\"h-2 bg-primary/10\">\n                        <div className=\"h-full bg-green-500 rounded-full\" style={{ width: `${submissionDistribution.approved}%` }}></div>\n                      </Progress>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-xs\">\n                        <span className=\"text-dim-gray\">Rejected</span>\n                        <span>{stats.rejectedSubmissions} ({submissionDistribution.rejected.toFixed(0)}%)</span>\n                      </div>\n                      <Progress value={submissionDistribution.rejected} className=\"h-2 bg-primary/10\">\n                        <div className=\"h-full bg-red-500 rounded-full\" style={{ width: `${submissionDistribution.rejected}%` }}></div>\n                      </Progress>\n                    </div>\n                  </>\n                ) : (\n                  <div className=\"text-center py-6\">\n                    <BarChart3 className=\"h-8 w-8 text-dim-gray mx-auto mb-3\" />\n                    <h3 className=\"text-lg font-medium\">No data yet</h3>\n                    <p className=\"text-dim-gray text-sm mt-1\">\n                      Statistics will appear once you receive submissions.\n                    </p>\n                  </div>\n                )}\n\n                <div className=\"space-y-2 mt-4\">\n                  <Button \n                    onClick={handleCreateProgram}\n                    className=\"w-full glow-button\"\n                  >\n                    <PlusCircle className=\"mr-2 h-4 w-4\" />\n                    Create New Program\n                  </Button>\n                  <Button \n                    onClick={() => setLocation(\"/company/wallet\")}\n                    variant=\"outline\"\n                    className=\"w-full border-matrix/30 hover:bg-matrix/20 hover:text-matrix\"\n                  >\n                    💼 My Wallet\n                  </Button>\n                  <Button \n                    onClick={() => setLocation(\"/triage-dashboard\")}\n                    variant=\"outline\"\n                    className=\"w-full border-matrix/30 hover:bg-matrix/20 hover:text-matrix\"\n                  >\n                    🔍 Managed Triage Service\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card className=\"bg-black border border-matrix/20\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Shield className=\"h-5 w-5 text-matrix mr-2\" />\n                Managed Triage Service\n              </CardTitle>\n              <CardDescription>Professional vulnerability assessment for your security programs</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-dim-gray text-sm mb-4\">\n                Don't have a security team? Let our experts handle vulnerability triage, validation, and prioritization for you.\n              </p>\n              <div className=\"flex gap-2\">\n                <Button \n                  onClick={() => setLocation(\"/triage-dashboard\")}\n                  className=\"glow-button flex-1\"\n                >\n                  <Shield className=\"mr-2 h-4 w-4\" />\n                  Access Triage Dashboard\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  className=\"border-matrix/30 hover:bg-matrix/20 hover:text-matrix\"\n                  onClick={() => setActiveTab(\"triage\")}\n                >\n                  Learn More\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Programs Tab */}\n        <TabsContent value=\"programs\" className=\"space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-2xl font-bold\">Your Bug Bounty Programs</h2>\n            <Button onClick={handleCreateProgram} className=\"glow-button\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              New Program\n            </Button>\n          </div>\n\n          {programs.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {programs.map((program: any) => (\n                <Card key={program.id} className=\"bg-black border border-matrix/20 hover:border-matrix transition-colors\">\n                  <CardHeader>\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <CardTitle className=\"flex items-center\">\n                          {program.name}\n                          {program.status === \"active\" && (\n                            <span className=\"ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-900/20 text-green-500\">\n                              Active\n                            </span>\n                          )}\n                          {program.status === \"paused\" && (\n                            <span className=\"ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-yellow-900/20 text-yellow-500\">\n                              Paused\n                            </span>\n                          )}\n                          {program.status === \"closed\" && (\n                            <span className=\"ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-900/20 text-red-500\">\n                              Closed\n                            </span>\n                          )}\n                        </CardTitle>\n                        <CardDescription className=\"mt-1\">\n                          {program.description?.substring(0, 100)}{program.description?.length > 100 ? '...' : ''}\n                        </CardDescription>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"flex justify-between text-sm mb-4\">\n                      <div className=\"flex items-center\">\n                        <DollarSign className=\"h-4 w-4 text-matrix mr-1\" />\n                        <span>{program.rewardsRange}</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <BugIcon className=\"h-4 w-4 text-matrix mr-1\" />\n                        <span>\n                          {\n                            submissions.filter((s: any) => s.programId === program.id).length || 0\n                          } submissions\n                        </span>\n                      </div>\n                    </div>\n\n                    <div className=\"flex space-x-2 mt-4\">\n                      <Link href={`/programs/${program.id}`}>\n                        <Button variant=\"outline\" className=\"w-full border-matrix/30 hover:bg-matrix/20 hover:text-matrix\">\n                          View Details\n                        </Button>\n                      </Link>\n                      <Link href={`/programs/${program.id}/edit`}>\n                        <Button variant=\"outline\" className=\"w-full border-matrix/30 hover:bg-matrix/20 hover:text-matrix\">\n                          Edit Program\n                        </Button>\n                      </Link>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12 terminal-card bg-terminal/50 border border-dashed border-matrix/30 rounded-lg\">\n              <Shield className=\"h-12 w-12 text-dim-gray mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium\">No programs yet</h3>\n              <p className=\"text-dim-gray text-sm mt-2 max-w-md mx-auto\">\n                Create your first bug bounty program to start receiving vulnerability reports from security researchers.\n              </p>\n              <Button onClick={handleCreateProgram} className=\"mt-6 glow-button\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Create Your First Program\n              </Button>\n            </div>\n          )}\n        </TabsContent>\n\n        {/* Submissions Tab */}\n        <TabsContent value=\"submissions\" className=\"space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-2xl font-bold\">Vulnerability Submissions</h2>\n            <div className=\"flex space-x-2\">\n              <Button variant=\"outline\" className=\"border-matrix/30 hover:bg-matrix/20 hover:text-matrix\">\n                <Clock className=\"mr-2 h-4 w-4\" />\n                Pending ({stats.pendingSubmissions})\n              </Button>\n              <Button variant=\"outline\" className=\"border-matrix/30 hover:bg-matrix/20 hover:text-matrix\">\n                All Submissions\n              </Button>\n            </div>\n          </div>\n\n          {submissions.length > 0 ? (\n            <div className=\"space-y-4\">\n              {pendingSubmissions.length > 0 ? (\n                <div className=\"bg-yellow-900/10 border border-yellow-900/30 rounded-lg p-4 mb-6\">\n                  <div className=\"flex items-start space-x-3\">\n                    <Clock className=\"h-5 w-5 text-yellow-500 mt-0.5\" />\n                    <div>\n                      <h3 className=\"font-medium\">Pending Review</h3>\n                      <p className=\"text-sm text-dim-gray\">\n                        You have {stats.pendingSubmissions} submissions awaiting your review.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ) : null}\n\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full border-collapse\">\n                  <thead>\n                    <tr className=\"border-b border-matrix/20\">\n                      <th className=\"py-3 px-4 text-left text-xs font-medium text-dim-gray uppercase tracking-wider\">Title</th>\n                      <th className=\"py-3 px-4 text-left text-xs font-medium text-dim-gray uppercase tracking-wider\">Program</th>\n                      <th className=\"py-3 px-4 text-left text-xs font-medium text-dim-gray uppercase tracking-wider\">Severity</th>\n                      <th className=\"py-3 px-4 text-left text-xs font-medium text-dim-gray uppercase tracking-wider\">Status</th>\n                      <th className=\"py-3 px-4 text-left text-xs font-medium text-dim-gray uppercase tracking-wider\">Submitted</th>\n                      <th className=\"py-3 px-4 text-left text-xs font-medium text-dim-gray uppercase tracking-wider\">Reward</th>\n                      <th className=\"py-3 px-4 text-left text-xs font-medium text-dim-gray uppercase tracking-wider\"></th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {submissions.map((submission: any) => {\n                      const program = programs.find((p: any) => p.id === submission.programId);\n                      return (\n                        <tr key={submission.id} className=\"border-b border-primary/10 hover:bg-primary/5\">\n                          <td className=\"py-3 px-4\">\n                            <div className=\"font-medium\">{submission.title}</div>\n                            <div className=\"text-xs text-dim-gray\">by {submission.username || \"Anonymous\"}</div>\n                          </td>\n                          <td className=\"py-3 px-4 text-sm\">\n                            {program?.name || \"Unknown Program\"}\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            <span className={`inline-flex text-xs px-2 py-0.5 rounded-full ${\n                              submission.severity === \"critical\" ? \"bg-red-900/20 text-red-500\" :\n                              submission.severity === \"high\" ? \"bg-orange-900/20 text-orange-500\" :\n                              submission.severity === \"medium\" ? \"bg-yellow-900/20 text-yellow-500\" :\n                              \"bg-blue-900/20 text-blue-500\"\n                            }`}>\n                              {submission.severity || \"Low\"}\n                            </span>\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            <span className={`inline-flex text-xs px-2 py-0.5 rounded-full ${\n                              submission.status === \"approved\" ? \"bg-green-900/20 text-green-500\" :\n                              submission.status === \"rejected\" ? \"bg-red-900/20 text-red-500\" :\n                              submission.status === \"yellow\" ? \"bg-yellow-900/20 text-yellow-500\" :\n                              \"bg-blue-900/20 text-blue-500\"\n                            }`}>\n                              {submission.status === \"approved\" ? \"Approved\" : \n                               submission.status === \"rejected\" ? \"Rejected\" : \"Pending\"}\n                            </span>\n                          </td>\n                          <td className=\"py-3 px-4 text-sm\">\n                            {submission.createdAt ? formatDistanceToNow(new Date(submission.createdAt), { addSuffix: true }) : \"Recently\"}\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            {submission.status === \"approved\" && submission.reward ? (\n                              <span className=\"text-green-500\">${submission.reward}</span>\n                            ) : (\n                              <span className=\"text-dim-gray\">-</span>\n                            )}\n                          </td>\n                          <td className=\"py-3 px-4 text-right\">\n                            <Link href={`/submissions/${submission.id}`}>\n                              <Button variant=\"outline\" size=\"sm\" className=\"border-matrix/30 hover:bg-matrix/20 hover:text-matrix\">\n                                View\n                              </Button>\n                            </Link>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center py-12 terminal-card bg-terminal/50 border border-dashed border-matrix/30 rounded-lg\">\n              <BugIcon className=\"h-12 w-12 text-dim-gray mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium\">No submissions yet</h3>\n              <p className=\"text-dim-gray text-sm mt-2 max-w-md mx-auto\">\n                Once you create programs and researchers find vulnerabilities, they'll submit reports that appear here.\n              </p>\n              <Button onClick={handleCreateProgram} className=\"mt-6 glow-button\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Create a Program\n              </Button>\n            </div>\n          )}\n        </TabsContent>\n\n        {/* Triage Service Tab */}\n        <TabsContent value=\"triage\" className=\"space-y-6\">\n          <div className=\"text-center py-8\">\n            <Shield className=\"h-16 w-16 text-matrix mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold mb-4\">Managed Vulnerability Triage Service</h2>\n            <p className=\"text-dim-gray mb-6 max-w-2xl mx-auto\">\n              Professional vulnerability assessment and triage services for companies without dedicated security teams. \n              Our experts will review, validate, and prioritize vulnerability reports on your behalf.\n            </p>\n            <div className=\"flex justify-center gap-4\">\n              <Button \n                onClick={() => setLocation(\"/triage-dashboard\")}\n                className=\"glow-button\"\n              >\n                <Shield className=\"mr-2 h-4 w-4\" />\n                Access Triage Dashboard\n              </Button>\n              <Button \n                variant=\"outline\"\n                className=\"border-matrix/30 hover:bg-matrix/20 hover:text-matrix\"\n              >\n                Learn More\n              </Button>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-8 max-w-4xl mx-auto\">\n              <Card className=\"bg-black border border-matrix/20\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"text-center\">\n                    <CheckCircle className=\"h-8 w-8 text-green-500 mx-auto mb-2\" />\n                    <h3 className=\"font-medium mb-2\">Expert Validation</h3>\n                    <p className=\"text-sm text-dim-gray\">\n                      Professional security analysts validate and assess every vulnerability report\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-black border border-matrix/20\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"text-center\">\n                    <Clock className=\"h-8 w-8 text-blue-500 mx-auto mb-2\" />\n                    <h3 className=\"font-medium mb-2\">24-Hour Response</h3>\n                    <p className=\"text-sm text-dim-gray\">\n                      Get initial triage assessments within 24 hours of submission\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-black border border-matrix/20\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"text-center\">\n                    <DollarSign className=\"h-8 w-8 text-matrix mx-auto mb-2\" />\n                    <h3 className=\"font-medium mb-2\">Flexible Pricing</h3>\n                    <p className=\"text-sm text-dim-gray\">\n                      Pay per report or choose monthly/annual subscription plans\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* Settings Tab */}\n        <TabsContent value=\"settings\" className=\"space-y-6\">\n          <Card className=\"bg-black border border-matrix/20\">\n            <CardHeader>\n              <CardTitle className=\"text-matrix\">Company Settings</CardTitle>\n              <CardDescription>Manage your company profile and preferences</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"text-lg font-medium mb-2\">Company Information</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label>Company Name</Label>\n                      <Input\n                        defaultValue={user?.companyName}\n                        className=\"terminal-input\"\n                        placeholder=\"Enter company name\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>Company Website</Label>\n                      <Input\n                        defaultValue={user?.companyWebsite}\n                        className=\"terminal-input\"\n                        placeholder=\"https://example.com\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>Industry</Label>\n                      <Input\n                        defaultValue={user?.industry}\n                        className=\"terminal-input\"\n                        placeholder=\"Enter industry\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>Company Size</Label>\n                      <Select defaultValue={user?.companySize}>\n                        <SelectTrigger className=\"terminal-input\">\n                          <SelectValue placeholder=\"Select company size\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"1-10\">1-10 employees</SelectItem>\n                          <SelectItem value=\"11-50\">11-50 employees</SelectItem>\n                          <SelectItem value=\"51-200\">51-200 employees</SelectItem>\n                          <SelectItem value=\"201-500\">201-500 employees</SelectItem>\n                          <SelectItem value=\"501+\">501+ employees</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-lg font-medium mb-2\">Contact Information</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label>Primary Email</Label>\n                      <Input\n                        defaultValue={user?.email}\n                        className=\"terminal-input\"\n                        placeholder=\"contact@company.com\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>Phone Number</Label>\n                      <Input\n                        defaultValue={user?.phone}\n                        className=\"terminal-input\"\n                        placeholder=\"+1 (555) 000-0000\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-lg font-medium mb-2\">Security Settings</h3>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-3 bg-dark-terminal rounded\">\n                      <div>\n                        <p className=\"font-medium\">Two-Factor Authentication</p>\n                        <p className=\"text-sm text-dim-gray\">Required for all financial operations (deposits, withdrawals)</p>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-xs text-green-400\">ENFORCED</span>\n                        <Switch checked disabled />\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 bg-dark-terminal rounded\">\n                      <div>\n                        <p className=\"font-medium\">Login Notifications</p>\n                        <p className=\"text-sm text-dim-gray\">Get notified of new login attempts</p>\n                      </div>\n                      <Switch defaultChecked />\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-lg font-medium mb-2\">Notification Preferences</h3>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-3 bg-dark-terminal rounded\">\n                      <div>\n                        <p className=\"font-medium\">Email Notifications</p>\n                        <p className=\"text-sm text-dim-gray\">Receive program and submission updates via email</p>\n                      </div>\n                      <Switch defaultChecked />\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 bg-dark-terminal rounded\">\n                      <div>\n                        <p className=\"font-medium\">Weekly Reports</p>\n                        <p className=\"text-sm text-dim-gray\">Receive weekly summary of program activities</p>\n                      </div>\n                      <Switch defaultChecked />\n                    </div>\n                  </div>\n                </div>\n\n                <Button \n                  className=\"w-full mt-6 glow-button\"\n                  onClick={async () => {\n                    try {\n                      const response = await fetch('/api/user', {\n                        method: 'PATCH',\n                        headers: {\n                          'Content-Type': 'application/json'\n                        },\n                        credentials: 'include',\n                        body: JSON.stringify({\n                          companyName: user?.companyName,\n                          companyWebsite: user?.companyWebsite,\n                          companySize: user?.companySize,\n                          industry: user?.industry,\n                          email: user?.email,\n                          phone: user?.phone,\n                        }),\n                      });\n\n                      if (response.ok) {\n                        const data = await response.json();\n                        toast({\n                          title: \"Success\",\n                          description: \"Settings updated successfully\",\n                        });\n                      } else {\n                        const errorData = await response.json();\n                        toast({\n                          title: \"Error\",\n                          description: errorData.message || \"Failed to update settings\",\n                          variant: \"destructive\",\n                        });\n                      }\n                    } catch (error) {\n                      console.error('Save error:', error);\n                      toast({\n                        title: \"Error\",\n                        description: \"Failed to update settings. Please try again.\",\n                        variant: \"destructive\",\n                      });\n                    }\n                  }}\n                >\n                  <Save className=\"mr-2 h-4 w-4\" />\n                  Save Changes\n                </Button>\n\n                <div className=\"mt-8 border-t border-matrix/20 pt-6\">\n                  <h3 className=\"text-lg font-medium mb-4 text-alert-red\">Danger Zone</h3>\n                  <Button \n                    variant=\"destructive\"\n                    className=\"w-full\"\n                    onClick={handleLogout}\n                  >\n                    Logout\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n         <TabsContent value=\"chat\" className=\"space-y-6\">\n          <PublicChat />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":40859},"client/src/pages/company-wallet-page.tsx":{"content":"\nimport { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\n\nexport default function CompanyWalletPage() {\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    // Redirect to the simplified crypto payment page\n    setLocation('/crypto/payment');\n  }, [setLocation]);\n\n  return null;\n}\n","size_bytes":312},"client/src/pages/create-program-page.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { apiRequest } from \"@/lib/api\";\n\nconst programSchema = z.object({\n  name: z.string().min(3, \"Program name must be at least 3 characters\"),\n  description: z.string().min(10, \"Description must be at least 10 characters\"),\n  rewardsRange: z.string().min(1, \"Reward range is required\"),\n  logo: z.string().optional(),\n  scope: z.string().min(2, \"Program scope is required\"),\n  isPrivate: z.boolean(),\n  status: z.enum([\"active\", \"inactive\"]).default(\"active\"),\n});\n\ntype ProgramFormValues = z.infer<typeof programSchema>;\n\nexport default function CreateProgramPage() {\n  const [submitting, setSubmitting] = useState(false);\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [_, setLocation] = useLocation();\n\n  // Redirect non-company users\n  if (user && user.userType !== \"company\") {\n    setLocation(\"/dashboard\");\n    return null;\n  }\n\n  const form = useForm<ProgramFormValues>({\n    resolver: zodResolver(programSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      rewardsRange: \"$100 - $5,000\",\n      logo: \"\",\n      status: \"active\",\n      isPrivate: false,\n      scope: JSON.stringify({\n        domains: [],\n        assets: [],\n        exclusions: []\n      }, null, 2)\n    }\n  });\n\n  const onSubmit = async (data: ProgramFormValues) => {\n    setSubmitting(true);\n\n    try {\n      let parsedScope;\n      try {\n        parsedScope = JSON.parse(data.scope);\n      } catch (e) {\n        parsedScope = { domains: [], assets: [], exclusions: [] };\n      }\n\n      const programData = {\n        ...data,\n        scope: parsedScope\n      };\n\n      const response = await apiRequest(\"POST\", \"/api/company/programs\", programData);\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to create program\");\n      }\n\n      toast({\n        title: \"Program Created\",\n        description: \"Your bug bounty program has been created successfully.\",\n      });\n\n      setLocation(\"/dashboard\");\n    } catch (error) {\n      console.error(\"Error creating program:\", error);\n      toast({\n        title: \"Failed to Create Program\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black text-white relative\">\n      <MatrixBackground className=\"opacity-20\" />\n\n      <div className=\"max-w-4xl mx-auto px-4 py-12 relative z-10\">\n        <h1 className=\"text-3xl font-bold tracking-tight text-matrix mb-2\">Create Bug Bounty Program</h1>\n        <p className=\"text-dim-gray mb-8\">Set up a new bug bounty program for your organization</p>\n\n        <Card className=\"bg-deep-black border-matrix/20\">\n          <CardContent className=\"pt-6\">\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Program Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g. CyberHunt Main Program\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Describe your program, objectives, and what you're looking to protect\"\n                          className=\"min-h-[100px]\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"rewardsRange\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Rewards Range</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g. $100 - $5,000\" {...field} />\n                      </FormControl>\n                      <FormDescription>\n                        Specify the range of rewards for different severity levels\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"logo\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Program Logo URL (Optional)</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"https://example.com/logo.png\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"scope\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Program Scope</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder='{\"domains\":[\"*.example.com\"],\"assets\":[\"Web Application\",\"Mobile App\"],\"exclusions\":[\"*.test.example.com\"]}'\n                          className=\"min-h-[150px] font-mono\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormDescription>\n                        Enter the scope as JSON with domains, assets, and exclusions\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"isPrivate\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center justify-between\">\n                      <div>\n                        <FormLabel>Private Program</FormLabel>\n                        <FormDescription>\n                          Only invited researchers can participate\n                        </FormDescription>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"pt-4\">\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-matrix hover:bg-matrix/90\"\n                    disabled={submitting}\n                  >\n                    {submitting ? \"Creating Program...\" : \"Create Program\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8206},"client/src/pages/crypto-payment-page.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';\nimport { Button } from '../components/ui/button';\nimport { Badge } from '../components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';\nimport { Wallet, Copy, QrCode, ExternalLink } from 'lucide-react';\nimport { useAuth } from '../hooks/use-auth';\nimport { useToast } from '../hooks/use-toast';\nimport { MatrixBackground } from '../components/matrix-background';\nimport { Navbar } from '../components/layout/navbar';\nimport { TwoFactorVerification } from '../components/two-factor-verification';\nimport { SecurityNotice } from '../components/security-notice';\n\ninterface CompanyWallet {\n  id: number;\n  companyId: number;\n  balance: number;\n  totalPaid: number;\n  lastUpdated: string;\n}\n\ninterface CompanyTransaction {\n  id: number;\n  companyId: number;\n  amount: number;\n  type: string;\n  note: string;\n  createdAt: string;\n}\n\nconst BINANCE_PAY_ID = \"928374001\";\nconst BINANCE_QR_CODE = \"https://qr.binance.com/en/qr/dplk/928374001\";\n\nexport default function CryptoPaymentPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [companyWallet, setCompanyWallet] = useState<CompanyWallet | null>(null);\n  const [transactions, setTransactions] = useState<CompanyTransaction[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [show2FA, setShow2FA] = useState(false);\n  const [pendingDeposit, setPendingDeposit] = useState<{ amount: number; currency: string } | null>(null);\n\n  useEffect(() => {\n    if (user?.userType === 'company') {\n      fetchWalletData();\n      fetchTransactions();\n    }\n  }, [user]);\n\n  const fetchWalletData = async () => {\n    try {\n      const response = await fetch('/api/company/wallet', {\n        credentials: 'include'\n      });\n      if (response.ok) {\n        const wallet = await response.json();\n        setCompanyWallet(wallet);\n      }\n    } catch (error) {\n      console.error('Error fetching wallet data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchTransactions = async () => {\n    try {\n      const response = await fetch('/api/company/transactions', {\n        credentials: 'include'\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setTransactions(data);\n      }\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n    }\n  };\n\n  const copyToClipboard = (text: string, label: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copied!\",\n      description: `${label} copied to clipboard`,\n    });\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(amount / 100);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const verify2FA = async (code: string): Promise<boolean> => {\n    try {\n      const response = await fetch('/api/auth/verify-2fa', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify({ \n          code, \n          operation: 'crypto_deposit',\n          amount: pendingDeposit?.amount \n        })\n      });\n\n      if (response.ok) {\n        // Proceed with the actual deposit after 2FA verification\n        await processCryptoDeposit();\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('2FA verification failed:', error);\n      return false;\n    }\n  };\n\n  const processCryptoDeposit = async () => {\n    if (!pendingDeposit) return;\n\n    try {\n      const response = await fetch('/api/crypto/payment-intent', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify({\n          amount: Math.round(pendingDeposit.amount * 100),\n          currency: pendingDeposit.currency,\n          purpose: 'wallet_topup'\n        })\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Deposit Request Created\",\n          description: `Your deposit request for ${pendingDeposit.amount} ${pendingDeposit.currency} has been submitted for processing.`,\n        });\n        fetchWalletData();\n        fetchTransactions();\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Error\",\n          description: error.error || \"Failed to process deposit\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Network Error\",\n        description: \"Failed to process deposit. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setPendingDeposit(null);\n    }\n  };\n\n  const handleCryptoDeposit = (amount: number, currency: string = 'USDT') => {\n    setPendingDeposit({ amount, currency });\n    setShow2FA(true);\n  };\n\n  if (user?.userType !== 'company') {\n    return (\n      <div className=\"min-h-screen bg-deep-black relative\">\n        <MatrixBackground className=\"opacity-20\" />\n        <Navbar />\n        <div className=\"flex items-center justify-center min-h-[80vh]\">\n          <div className=\"terminal-card p-8 text-center\">\n            <h2 className=\"text-2xl font-mono text-matrix mb-4\">Access Denied</h2>\n            <p className=\"text-dim-gray\">This page is only available to company accounts.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground className=\"opacity-20\" />\n      <Navbar />\n\n      <main className=\"max-w-6xl mx-auto px-4 py-8 relative z-10\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-mono font-bold text-matrix mb-2\">Company Wallet</h1>\n          <p className=\"text-dim-gray\">Fund your bounty program with cryptocurrency</p>\n        </div>\n\n        <SecurityNotice />\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Wallet Balance */}\n          <Card className=\"bg-dark-bg/50 border-matrix/20\">\n            <CardHeader>\n              <CardTitle className=\"text-matrix flex items-center gap-2\">\n                <Wallet className=\"h-5 w-5\" />\n                Current Balance\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-4xl font-bold text-matrix mb-4\">\n                {companyWallet ? formatCurrency(companyWallet.balance) : '$0.00'}\n              </div>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-dim-gray\">Total Deposited:</span>\n                  <span className=\"text-light-gray\">\n                    {companyWallet ? formatCurrency(companyWallet.totalPaid) : '$0.00'}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-dim-gray\">Last Updated:</span>\n                  <span className=\"text-light-gray\">\n                    {companyWallet ? formatDate(companyWallet.lastUpdated) : 'Never'}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Binance Pay Payment */}\n          <Card className=\"bg-dark-bg/50 border-matrix/20\">\n            <CardHeader>\n              <CardTitle className=\"text-matrix flex items-center gap-2\">\n                <QrCode className=\"h-5 w-5\" />\n                Fund Wallet - Binance Pay\n              </CardTitle>\n              <CardDescription className=\"text-dim-gray\">\n                Send cryptocurrency to fund your wallet balance\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* QR Code */}\n              <div className=\"text-center\">\n                <div className=\"inline-block p-4 bg-white rounded-lg\">\n                  <img \n                    src={BINANCE_QR_CODE} \n                    alt=\"Binance Pay QR Code\"\n                    className=\"w-48 h-48 mx-auto\"\n                    onError={(e) => {\n                      // Fallback if QR code fails to load\n                      e.currentTarget.style.display = 'none';\n                      e.currentTarget.nextElementSibling!.style.display = 'block';\n                    }}\n                  />\n                  <div className=\"hidden w-48 h-48 bg-gray-200 flex items-center justify-center text-gray-500 text-sm\">\n                    QR Code\n                  </div>\n                </div>\n                <p className=\"text-xs text-dim-gray mt-2\">Scan with Binance app</p>\n              </div>\n\n              {/* Pay ID */}\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm text-dim-gray block mb-2\">Binance Pay ID</label>\n                  <div className=\"flex items-center gap-2 p-3 bg-deep-black/50 border border-matrix/20 rounded\">\n                    <code className=\"flex-1 text-matrix font-mono\">{BINANCE_PAY_ID}</code>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => copyToClipboard(BINANCE_PAY_ID, \"Pay ID\")}\n                      className=\"text-matrix hover:bg-matrix/20\"\n                    >\n                      <Copy className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"p-4 bg-blue-600/10 border border-blue-600/30 rounded-lg\">\n                  <h4 className=\"text-blue-400 font-medium mb-2\">Payment Instructions</h4>\n                  <ol className=\"text-sm text-dim-gray space-y-1\">\n                    <li>1. Open your Binance app</li>\n                    <li>2. Go to Pay → Send</li>\n                    <li>3. Scan QR code or enter Pay ID: <code className=\"text-matrix\">{BINANCE_PAY_ID}</code></li>\n                    <li>4. Send USDT, BUSD, or other supported cryptocurrencies</li>\n                    <li>5. Your balance will be updated manually after confirmation</li>\n                  </ol>\n                </div>\n\n                <div className=\"p-4 bg-amber-600/10 border border-amber-600/30 rounded-lg\">\n                  <h4 className=\"text-amber-400 font-medium mb-2\">Important Notes</h4>\n                  <ul className=\"text-sm text-dim-gray space-y-1\">\n                    <li>• Include your company name in the payment memo</li>\n                    <li>• Balance updates are processed manually within 24 hours</li>\n                    <li>• Contact support if your payment isn't reflected after 24 hours</li>\n                  </ul>\n                </div>\n\n                <Button \n                  className=\"w-full bg-amber-600/20 border-amber-600/30 hover:bg-amber-600/30 text-amber-400\"\n                  onClick={() => window.open('https://www.binance.com/en/download', '_blank')}\n                >\n                  <ExternalLink className=\"h-4 w-4 mr-2\" />\n                  Download Binance App\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Transaction History */}\n        <Card className=\"mt-8 bg-dark-bg/50 border-matrix/20\">\n          <CardHeader>\n            <CardTitle className=\"text-matrix\">Transaction History</CardTitle>\n            <CardDescription className=\"text-dim-gray\">\n              Recent wallet activity and balance updates\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs defaultValue=\"all\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-3 bg-deep-black/50\">\n                <TabsTrigger value=\"all\" className=\"data-[state=active]:bg-matrix/20 data-[state=active]:text-matrix\">\n                  All Transactions\n                </TabsTrigger>\n                <TabsTrigger value=\"deposits\" className=\"data-[state=active]:bg-matrix/20 data-[state=active]:text-matrix\">\n                  Deposits\n                </TabsTrigger>\n                <TabsTrigger value=\"payments\" className=\"data-[state=active]:bg-matrix/20 data-[state=active]:text-matrix\">\n                  Payments\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"all\" className=\"mt-6\">\n                <div className=\"space-y-4\">\n                  {transactions.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-dim-gray\">No transactions yet</p>\n                      <p className=\"text-sm text-dim-gray mt-1\">\n                        Make your first deposit using Binance Pay above\n                      </p>\n                    </div>\n                  ) : (\n                    transactions.map((transaction) => (\n                      <div\n                        key={transaction.id}\n                        className=\"flex items-center justify-between p-4 bg-deep-black/30 border border-matrix/10 rounded-lg\"\n                      >\n                        <div>\n                          <div className=\"font-medium text-light-gray\">\n                            {transaction.type === 'admin_adjustment' ? 'Balance Update' : \n                             transaction.type === 'crypto_deposit' ? 'Crypto Deposit' : \n                             'Payment'}\n                          </div>\n                          <div className=\"text-sm text-dim-gray\">{transaction.note}</div>\n                          <div className=\"text-xs text-dim-gray\">{formatDate(transaction.createdAt)}</div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className={`font-bold ${transaction.amount > 0 ? 'text-green-400' : 'text-red-400'}`}>\n                            {transaction.amount > 0 ? '+' : ''}{formatCurrency(transaction.amount)}\n                          </div>\n                          <Badge variant=\"outline\" className=\"border-matrix/20 text-dim-gray mt-1\">\n                            {transaction.amount > 0 ? 'Credit' : 'Debit'}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"deposits\" className=\"mt-6\">\n                <div className=\"space-y-4\">\n                  {transactions.filter(t => t.amount > 0).length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-dim-gray\">No deposits yet</p>\n                    </div>\n                  ) : (\n                    transactions\n                      .filter(t => t.amount > 0)\n                      .map((transaction) => (\n                        <div\n                          key={transaction.id}\n                          className=\"flex items-center justify-between p-4 bg-deep-black/30 border border-matrix/10 rounded-lg\"\n                        >\n                          <div>\n                            <div className=\"font-medium text-light-gray\">Balance Update</div>\n                            <div className=\"text-sm text-dim-gray\">{transaction.note}</div>\n                            <div className=\"text-xs text-dim-gray\">{formatDate(transaction.createdAt)}</div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"font-bold text-green-400\">\n                              +{formatCurrency(transaction.amount)}\n                            </div>\n                            <Badge variant=\"outline\" className=\"border-green-400/20 text-green-400 mt-1\">\n                              Credit\n                            </Badge>\n                          </div>\n                        </div>\n                      ))\n                  )}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"payments\" className=\"mt-6\">\n                <div className=\"space-y-4\">\n                  {transactions.filter(t => t.amount < 0).length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-dim-gray\">No payments yet</p>\n                    </div>\n                  ) : (\n                    transactions\n                      .filter(t => t.amount < 0)\n                      .map((transaction) => (\n                        <div\n                          key={transaction.id}\n                          className=\"flex items-center justify-between p-4 bg-deep-black/30 border border-matrix/10 rounded-lg\"\n                        >\n                          <div>\n                            <div className=\"font-medium text-light-gray\">Bounty Payment</div>\n                            <div className=\"text-sm text-dim-gray\">{transaction.note}</div>\n                            <div className=\"text-xs text-dim-gray\">{formatDate(transaction.createdAt)}</div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"font-bold text-red-400\">\n                              {formatCurrency(transaction.amount)}\n                            </div>\n                            <Badge variant=\"outline\" className=\"border-red-400/20 text-red-400 mt-1\">\n                              Debit\n                            </Badge>\n                          </div>\n                        </div>\n                      ))\n                  )}\n                </div>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </main>\n\n      <TwoFactorVerification\n        isOpen={show2FA}\n        onClose={() => {\n          setShow2FA(false);\n          setPendingDeposit(null);\n        }}\n        onVerify={verify2FA}\n        operation=\"crypto deposit\"\n        amount={pendingDeposit?.amount}\n        currency={pendingDeposit?.currency}\n      />\n    </div>\n  );\n}","size_bytes":18246},"client/src/pages/crypto-withdrawal-page.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';\nimport { Button } from '../components/ui/button';\nimport { Input } from '../components/ui/input';\nimport { Label } from '../components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';\nimport { Badge } from '../components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '../components/ui/dialog';\nimport { Wallet, Plus, Clock, CheckCircle, XCircle, AlertTriangle, Copy } from 'lucide-react';\nimport { useAuth } from '../hooks/use-auth';\nimport { MatrixBackground } from '../components/matrix-background';\nimport { Navbar } from '../components/layout/navbar';\nimport { TwoFactorVerification } from '../components/two-factor-verification';\nimport { SecurityNotice } from '../components/security-notice';\n\ninterface CryptoWallet {\n  id: number;\n  walletType: string;\n  walletAddress: string;\n  network: string;\n  isVerified: boolean;\n  createdAt: string;\n}\n\ninterface CryptoWithdrawal {\n  id: number;\n  amount: number;\n  currency: string;\n  status: string;\n  transactionId?: string;\n  completedAt?: string;\n  createdAt: string;\n}\n\ninterface CryptoNetwork {\n  id: number;\n  network: string;\n  displayName: string;\n  currency: string;\n  minWithdrawal: number;\n  maxWithdrawal: number;\n  networkFee: number;\n}\n\nexport default function CryptoWithdrawalPage() {\n  const { user } = useAuth();\n  const [userWallets, setUserWallets] = useState<CryptoWallet[]>([]);\n  const [withdrawals, setWithdrawals] = useState<CryptoWithdrawal[]>([]);\n  const [cryptoNetworks, setCryptoNetworks] = useState<CryptoNetwork[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [showWalletDialog, setShowWalletDialog] = useState(false);\n  const [showWithdrawalDialog, setShowWithdrawalDialog] = useState(false);\n  const [show2FA, setShow2FA] = useState(false);\n  const [pendingWithdrawal, setPendingWithdrawal] = useState<{\n    amount: number;\n    currency: string;\n    walletAddress: string;\n    network: string;\n  } | null>(null);\n\n  // Wallet form state\n  const [walletType, setWalletType] = useState('');\n  const [walletAddress, setWalletAddress] = useState('');\n  const [walletNetwork, setWalletNetwork] = useState('');\n\n  // Withdrawal form state\n  const [withdrawalAmount, setWithdrawalAmount] = useState('');\n  const [withdrawalCurrency, setWithdrawalCurrency] = useState('USDT');\n  const [selectedWallet, setSelectedWallet] = useState<CryptoWallet | null>(null);\n\n  useEffect(() => {\n    fetchUserWallets();\n    fetchWithdrawals();\n    fetchCryptoNetworks();\n  }, []);\n\n  const fetchUserWallets = async () => {\n    try {\n      const response = await fetch('/api/crypto/wallets');\n      if (response.ok) {\n        const wallets = await response.json();\n        setUserWallets(wallets);\n      }\n    } catch (error) {\n      console.error('Error fetching user wallets:', error);\n    }\n  };\n\n  const fetchWithdrawals = async () => {\n    try {\n      const response = await fetch('/api/crypto/withdrawals');\n      if (response.ok) {\n        const withdrawalData = await response.json();\n        setWithdrawals(withdrawalData);\n      }\n    } catch (error) {\n      console.error('Error fetching withdrawals:', error);\n    }\n  };\n\n  const fetchCryptoNetworks = async () => {\n    try {\n      const response = await fetch('/api/crypto/networks');\n      if (response.ok) {\n        const networks = await response.json();\n        setCryptoNetworks(networks);\n      }\n    } catch (error) {\n      console.error('Error fetching crypto networks:', error);\n    }\n  };\n\n  const addWallet = async () => {\n    if (!walletType || !walletAddress || !walletNetwork) {\n      alert('Please fill in all fields');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const response = await fetch('/api/crypto/wallets', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          walletType,\n          walletAddress,\n          network: walletNetwork\n        })\n      });\n\n      if (response.ok) {\n        await fetchUserWallets();\n        setShowWalletDialog(false);\n        setWalletType('');\n        setWalletAddress('');\n        setWalletNetwork('');\n        alert('Wallet added successfully!');\n      } else {\n        const error = await response.json();\n        alert(error.error || 'Failed to add wallet');\n      }\n    } catch (error) {\n      console.error('Error adding wallet:', error);\n      alert('Network error occurred');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createWithdrawal = async () => {\n    if (!withdrawalAmount || !selectedWallet) {\n      alert('Please select a wallet and enter an amount');\n      return;\n    }\n\n    const amount = parseFloat(withdrawalAmount);\n    if (amount <= 0) {\n      alert('Please enter a valid amount');\n      return;\n    }\n\n    // Set up 2FA verification before processing withdrawal\n    setPendingWithdrawal({\n      amount,\n      currency: withdrawalCurrency,\n      walletAddress: selectedWallet.walletAddress,\n      network: selectedWallet.network\n    });\n    setShowWithdrawalDialog(false);\n    setShow2FA(true);\n  };\n\n  const verify2FA = async (code: string): Promise<boolean> => {\n    try {\n      const response = await fetch('/api/auth/verify-2fa', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify({ \n          code, \n          operation: 'crypto_withdrawal',\n          amount: pendingWithdrawal?.amount \n        })\n      });\n\n      if (response.ok) {\n        // Proceed with the actual withdrawal after 2FA verification\n        await processWithdrawal();\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('2FA verification failed:', error);\n      return false;\n    }\n  };\n\n  const processWithdrawal = async () => {\n    if (!pendingWithdrawal) return;\n\n    setLoading(true);\n    try {\n      const response = await fetch('/api/crypto/withdrawals', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          amount: Math.round(pendingWithdrawal.amount * 100), // Convert to cents\n          currency: pendingWithdrawal.currency,\n          walletAddress: pendingWithdrawal.walletAddress,\n          network: pendingWithdrawal.network\n        })\n      });\n\n      if (response.ok) {\n        await fetchWithdrawals();\n        setWithdrawalAmount('');\n        setSelectedWallet(null);\n        alert('Withdrawal request submitted successfully and is under review!');\n      } else {\n        const error = await response.json();\n        alert(error.error || 'Failed to create withdrawal');\n      }\n    } catch (error) {\n      console.error('Error creating withdrawal:', error);\n      alert('Network error occurred');\n    } finally {\n      setLoading(false);\n      setPendingWithdrawal(null);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <Badge className=\"bg-green-600\"><CheckCircle className=\"h-3 w-3 mr-1\" />Completed</Badge>;\n      case 'pending':\n        return <Badge className=\"bg-yellow-600\"><Clock className=\"h-3 w-3 mr-1\" />Pending</Badge>;\n      case 'processing':\n        return <Badge className=\"bg-blue-600\"><Clock className=\"h-3 w-3 mr-1\" />Processing</Badge>;\n      case 'failed':\n        return <Badge className=\"bg-red-600\"><XCircle className=\"h-3 w-3 mr-1\" />Failed</Badge>;\n      case 'cancelled':\n        return <Badge className=\"bg-gray-600\"><XCircle className=\"h-3 w-3 mr-1\" />Cancelled</Badge>;\n      default:\n        return <Badge>{status}</Badge>;\n    }\n  };\n\n  const formatAmount = (amount: number, currency: string) => {\n    return `${(amount / 100).toFixed(2)} ${currency}`;\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    alert('Copied to clipboard!');\n  };\n\n  if (user?.userType !== 'hacker') {\n    return (\n      <div className=\"min-h-screen bg-deep-black relative\">\n        <MatrixBackground className=\"opacity-20\" />\n        <Navbar />\n        <div className=\"flex items-center justify-center min-h-[80vh]\">\n          <div className=\"terminal-card p-8 text-center\">\n            <h2 className=\"text-2xl font-mono text-matrix mb-4\">Access Denied</h2>\n            <p className=\"text-dim-gray\">This page is only available to researcher accounts.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground className=\"opacity-20\" />\n      <Navbar />\n\n      <main className=\"max-w-7xl mx-auto px-4 py-8 relative z-10\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-mono font-bold text-matrix mb-2\">Crypto Withdrawals</h1>\n          <p className=\"text-dim-gray\">Withdraw your bounty earnings to your cryptocurrency wallets</p>\n          <div className=\"mt-4 p-4 border border-green-600/30 rounded-lg bg-green-600/10\">\n            <div className=\"flex items-center gap-2 text-green-400 mb-2\">\n              <span className=\"font-mono\">🔐 Crypto Only</span>\n            </div>\n            <p className=\"text-sm text-dim-gray\">\n              All researcher payments are processed exclusively through cryptocurrency. Add your crypto wallet to receive bounty payments.\n            </p>\n          </div>\n        </div>\n\n        <SecurityNotice />\n\n        <Tabs defaultValue=\"withdrawal\" className=\"space-y-6\">\n          <TabsList className=\"terminal-tabs\">\n            <TabsTrigger value=\"withdrawal\" className=\"terminal-tab\">\n              <Wallet className=\"h-4 w-4 mr-2\" />\n              Withdraw\n            </TabsTrigger>\n            <TabsTrigger value=\"wallets\" className=\"terminal-tab\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              My Wallets\n            </TabsTrigger>\n            <TabsTrigger value=\"history\" className=\"terminal-tab\">\n              <Clock className=\"h-4 w-4 mr-2\" />\n              History\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"withdrawal\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card className=\"terminal-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-xl font-mono text-matrix\">Create Withdrawal</CardTitle>\n                  <CardDescription className=\"text-dim-gray\">\n                    Withdraw your earnings to your crypto wallet\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-light-gray font-mono\">Amount (USD)</Label>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"50.00\"\n                      value={withdrawalAmount}\n                      onChange={(e) => setWithdrawalAmount(e.target.value)}\n                      className=\"terminal-input mt-1\"\n                      min=\"1\"\n                      step=\"0.01\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label className=\"text-light-gray font-mono\">Currency</Label>\n                    <Select value={withdrawalCurrency} onValueChange={setWithdrawalCurrency}>\n                      <SelectTrigger className=\"terminal-input mt-1\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"terminal-select\">\n                        <SelectItem value=\"USDT\">USDT (Tether)</SelectItem>\n                        <SelectItem value=\"BTC\">BTC (Bitcoin)</SelectItem>\n                        <SelectItem value=\"ETH\">ETH (Ethereum)</SelectItem>\n                        <SelectItem value=\"BNB\">BNB (Binance Coin)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-light-gray font-mono\">Destination Wallet</Label>\n                    <Select onValueChange={(value) => {\n                      const wallet = userWallets.find(w => w.id.toString() === value);\n                      setSelectedWallet(wallet || null);\n                    }}>\n                      <SelectTrigger className=\"terminal-input mt-1\">\n                        <SelectValue placeholder=\"Select a wallet\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"terminal-select\">\n                        {userWallets.map((wallet) => (\n                          <SelectItem key={wallet.id} value={wallet.id.toString()}>\n                            {wallet.walletType} - {wallet.network} ({wallet.walletAddress})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {userWallets.length === 0 && (\n                    <div className=\"p-4 border border-yellow-600/30 rounded-lg bg-yellow-600/10\">\n                      <div className=\"flex items-center gap-2 text-yellow-400 mb-2\">\n                        <AlertTriangle className=\"h-4 w-4\" />\n                        <span className=\"font-mono\">No Wallets Found</span>\n                      </div>\n                      <p className=\"text-sm text-dim-gray\">\n                        Please add a crypto wallet first in the \"My Wallets\" tab.\n                      </p>\n                    </div>\n                  )}\n\n                  <Button \n                    onClick={() => setShowWithdrawalDialog(true)}\n                    disabled={loading || !withdrawalAmount || !selectedWallet}\n                    className=\"terminal-button w-full\"\n                  >\n                    {loading ? 'Processing...' : 'Create Withdrawal'}\n                  </Button>\n                </CardContent>\n              </Card>\n\n              <Card className=\"terminal-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-xl font-mono text-matrix\">Withdrawal Limits</CardTitle>\n                  <CardDescription className=\"text-dim-gray\">\n                    Network fees and limits per currency\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {cryptoNetworks.map((network) => (\n                      <div key={network.id} className=\"flex items-center justify-between p-3 border border-dark-terminal rounded-lg\">\n                        <div>\n                          <span className=\"font-mono text-light-gray\">{network.displayName}</span>\n                          <p className=\"text-sm text-dim-gray\">{network.currency}</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-sm text-matrix\">Fee: ${(network.networkFee / 100).toFixed(2)}</p>\n                          <p className=\"text-xs text-dim-gray\">\n                            Min: ${(network.minWithdrawal / 100).toFixed(0)} | \n                            Max: ${(network.maxWithdrawal / 100).toFixed(0)}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"wallets\">\n            <Card className=\"terminal-card\">\n              <CardHeader>\n                <CardTitle className=\"text-xl font-mono text-matrix flex items-center justify-between\">\n                  My Crypto Wallets\n                  <Button \n                    onClick={() => setShowWalletDialog(true)}\n                    className=\"terminal-button-sm\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Wallet\n                  </Button>\n                </CardTitle>\n                <CardDescription className=\"text-dim-gray\">\n                  Manage your cryptocurrency wallet addresses\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {userWallets.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-dim-gray\">No wallets added yet</p>\n                      <Button \n                        onClick={() => setShowWalletDialog(true)}\n                        className=\"terminal-button mt-4\"\n                      >\n                        Add Your First Wallet\n                      </Button>\n                    </div>\n                  ) : (\n                    userWallets.map((wallet) => (\n                      <div key={wallet.id} className=\"flex items-center justify-between p-4 border border-dark-terminal rounded-lg\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-3 mb-2\">\n                            <span className=\"font-mono text-light-gray\">{wallet.walletType}</span>\n                            <Badge className={wallet.isVerified ? \"bg-green-600\" : \"bg-yellow-600\"}>\n                              {wallet.isVerified ? \"Verified\" : \"Pending\"}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-dim-gray\">{wallet.network}</p>\n                          <p className=\"text-xs text-dim-gray font-mono\">\n                            {wallet.walletAddress}\n                          </p>\n                        </div>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => copyToClipboard(wallet.walletAddress)}\n                          className=\"terminal-button-outline\"\n                        >\n                          <Copy className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"history\">\n            <Card className=\"terminal-card\">\n              <CardHeader>\n                <CardTitle className=\"text-xl font-mono text-matrix\">Withdrawal History</CardTitle>\n                <CardDescription className=\"text-dim-gray\">\n                  Your cryptocurrency withdrawal transactions\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {withdrawals.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-dim-gray\">No withdrawals found</p>\n                    </div>\n                  ) : (\n                    withdrawals.map((withdrawal) => (\n                      <div key={withdrawal.id} className=\"flex items-center justify-between p-4 border border-dark-terminal rounded-lg\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-3 mb-2\">\n                            <span className=\"font-mono text-light-gray\">\n                              {formatAmount(withdrawal.amount, withdrawal.currency)}\n                            </span>\n                            {getStatusBadge(withdrawal.status)}\n                          </div>\n                          <p className=\"text-xs text-dim-gray\">\n                            {new Date(withdrawal.createdAt).toLocaleDateString()}\n                          </p>\n                        </div>\n                        <div className=\"text-right\">\n                          {withdrawal.transactionId && (\n                            <p className=\"text-xs text-matrix font-mono\">\n                              {withdrawal.transactionId.substring(0, 16)}...\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </main>\n\n      {/* Add Wallet Dialog */}\n      <Dialog open={showWalletDialog} onOpenChange={setShowWalletDialog}>\n        <DialogContent className=\"terminal-card max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"text-xl font-mono text-matrix\">Add Crypto Wallet</DialogTitle>\n            <DialogDescription className=\"text-dim-gray\">\n              Add a new cryptocurrency wallet for withdrawals\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div>\n              <Label className=\"text-light-gray font-mono\">Wallet Type</Label>\n              <Select value={walletType} onValueChange={setWalletType}>\n                <SelectTrigger className=\"terminal-input mt-1\">\n                  <SelectValue placeholder=\"Select wallet type\" />\n                </SelectTrigger>\n                <SelectContent className=\"terminal-select\">\n                  <SelectItem value=\"binance\">Binance</SelectItem>\n                  <SelectItem value=\"metamask\">MetaMask</SelectItem>\n                  <SelectItem value=\"trust_wallet\">Trust Wallet</SelectItem>\n                  <SelectItem value=\"coinbase\">Coinbase</SelectItem>\n                  <SelectItem value=\"other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label className=\"text-light-gray font-mono\">Network</Label>\n              <Select value={walletNetwork} onValueChange={setWalletNetwork}>\n                <SelectTrigger className=\"terminal-input mt-1\">\n                  <SelectValue placeholder=\"Select network\" />\n                </SelectTrigger>\n                <SelectContent className=\"terminal-select\">\n                  <SelectItem value=\"bitcoin\">Bitcoin (BTC)</SelectItem>\n                  <SelectItem value=\"ethereum\">Ethereum (ETH)</SelectItem>\n                  <SelectItem value=\"bsc\">Binance Smart Chain (BSC)</SelectItem>\n                  <SelectItem value=\"tron\">Tron (TRX)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label className=\"text-light-gray font-mono\">Wallet Address</Label>\n              <Input\n                type=\"text\"\n                placeholder=\"Enter your wallet address\"\n                value={walletAddress}\n                onChange={(e) => setWalletAddress(e.target.value)}\n                className=\"terminal-input mt-1\"\n              />\n            </div>\n\n            <div className=\"flex gap-2\">\n              <Button \n                onClick={addWallet}\n                disabled={loading || !walletType || !walletAddress || !walletNetwork}\n                className=\"terminal-button flex-1\"\n              >\n                {loading ? 'Adding...' : 'Add Wallet'}\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowWalletDialog(false)}\n                className=\"terminal-button-outline\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Withdrawal Confirmation Dialog */}\n      <Dialog open={showWithdrawalDialog} onOpenChange={setShowWithdrawalDialog}>\n        <DialogContent className=\"terminal-card max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"text-xl font-mono text-matrix\">Confirm Withdrawal</DialogTitle>\n            <DialogDescription className=\"text-dim-gray\">\n              Please review and confirm your withdrawal details\n            </DialogDescription>\n          </DialogHeader>\n\n          {selectedWallet && (\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-dim-gray\">Amount:</span>\n                  <span className=\"text-matrix font-mono\">\n                    {withdrawalAmount} {withdrawalCurrency}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-dim-gray\">Destination:</span>\n                  <span className=\"text-light-gray font-mono text-sm\">\n                    {selectedWallet.walletType}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-dim-gray\">Network:</span>\n                  <span className=\"text-light-gray\">{selectedWallet.network}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-dim-gray\">Address:</span>\n                  <span className=\"text-light-gray font-mono text-xs\">\n                    {selectedWallet.walletAddress}\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"p-4 border border-red-600/30 rounded-lg bg-red-600/10\">\n                <div className=\"flex items-center gap-2 text-red-400 mb-2\">\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  <span className=\"font-mono\">Important</span>\n                </div>\n                <p className=\"text-sm text-dim-gray\">\n                  Please double-check the wallet address. Cryptocurrency transactions cannot be reversed.\n                </p>\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button \n                  onClick={createWithdrawal}\n                  disabled={loading}\n                  className=\"terminal-button flex-1\"\n                >\n                  {loading ? 'Processing...' : 'Confirm Withdrawal'}\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setShowWithdrawalDialog(false)}\n                  className=\"terminal-button-outline\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      <TwoFactorVerification\n        isOpen={show2FA}\n        onClose={() => {\n          setShow2FA(false);\n          setPendingWithdrawal(null);\n        }}\n        onVerify={verify2FA}\n        operation=\"crypto withdrawal\"\n        amount={pendingWithdrawal?.amount}\n        currency={pendingWithdrawal?.currency}\n      />\n    </div>\n  );\n}","size_bytes":26836},"client/src/pages/dashboard-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport ProgramCard from \"@/components/ui/program-card\";\nimport ActivityItem from \"@/components/ui/activity-item\";\nimport { Program, Activity } from \"@shared/schema\";\nimport { \n  AlertTriangle, Bug, Search, User, Terminal, Award, \n  BarChart2, TrendingUp, Shield, Zap, ArrowRight, Clock, \n  Server, Code, Target, CheckCircle, XCircle, Megaphone\n} from \"lucide-react\";\nimport { Loader2 } from \"lucide-react\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport PublicChat from \"@/components/public-chat\";\nimport { \n  Tabs, \n  TabsContent, \n  TabsList, \n  TabsTrigger \n} from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\n\n// Badges data\nconst badges = [\n  { id: 1, name: \"First Blood\", icon: <Zap className=\"h-5 w-5 text-matrix\" />, acquired: true },\n  { id: 2, name: \"Bug Hunter\", icon: <Bug className=\"h-5 w-5 text-matrix\" />, acquired: true },\n  { id: 3, name: \"Code Breaker\", icon: <Code className=\"h-5 w-5 text-matrix\" />, acquired: false },\n  { id: 4, name: \"Perfect Score\", icon: <Target className=\"h-5 w-5 text-matrix\" />, acquired: false },\n];\n\nexport default function DashboardPage() {\n  const { user } = useAuth();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  // Calculate next rank thresholds\n  const reputation = user?.reputation || 0;\n  let nextRankThreshold = 100;\n  let nextRank = \"Researcher\";\n\n  if (reputation >= 100 && reputation < 500) {\n    nextRankThreshold = 500;\n    nextRank = \"Bug Hunter\";\n  } else if (reputation >= 500 && reputation < 2000) {\n    nextRankThreshold = 2000;\n    nextRank = \"Veteran\";\n  } else if (reputation >= 2000 && reputation < 5000) {\n    nextRankThreshold = 5000;\n    nextRank = \"Elite Hunter\";\n  }\n\n  const progressPercentage = Math.min(100, (reputation / nextRankThreshold) * 100);\n\n  // Fetch active programs\n  const {\n    data: programs,\n    isLoading: programsLoading,\n    error: programsError\n  } = useQuery<Program[]>({\n    queryKey: [\"/api/programs\"],\n  });\n\n  // Fetch user activities\n  const {\n    data: activities,\n    isLoading: activitiesLoading,\n    error: activitiesError\n  } = useQuery<Activity[]>({\n    queryKey: [\"/api/activities\"],\n  });\n\n  // Filter programs for different categories (would use separate API endpoints in production)\n  const popularPrograms = programs?.filter((_, index) => index < 2) || [];\n  const newPrograms = programs?.filter((_, index) => index < 3).reverse() || [];\n\n  // Stats cards data (would be from API in production)\n  const statsCards = [\n    { \n      title: \"Valid Submissions\", \n      value: Math.floor((user?.reputation || 0) / 50), \n      icon: <CheckCircle className=\"h-5 w-5 text-matrix\" />, \n      change: \"+3 this month\",\n      trend: \"up\"\n    },\n    { \n      title: \"Pending Review\", \n      value: Math.floor((user?.reputation || 0) / 300), \n      icon: <Clock className=\"h-5 w-5 text-warning-yellow\" />, \n      change: \"2 new\",\n      trend: \"neutral\"\n    },\n    { \n      title: \"Total Earnings\", \n      value: `$${(user?.reputation || 0) * 4}`, \n      icon: <Award className=\"h-5 w-5 text-electric-blue\" />, \n      change: \"+$450 this month\",\n      trend: \"up\"\n    },\n    { \n      title: \"Acceptance Rate\", \n      value: \"78%\", \n      icon: <BarChart2 className=\"h-5 w-5 text-matrix\" />, \n      change: \"+5% from last month\",\n      trend: \"up\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground />\n      <Navbar />\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 relative z-10\">\n        {/* Terminal-style welcome message with typing effect */}\n        <div className=\"terminal-card p-6 rounded-lg mb-8 relative overflow-hidden\">\n          <div className=\"terminal-header mb-4\"></div>\n          <div className=\"z-10 relative\">\n            <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n              <div>\n                <div className=\"flex items-center mb-2\">\n                  <Terminal className=\"h-5 w-5 text-matrix mr-2\" />\n                  <h1 className=\"text-2xl font-mono font-bold text-light-gray\">\n                    <span className=\"text-dim-gray mr-2\">&gt;</span>\n                    <span className=\"text-matrix\">sys.welcome</span>(\"{user?.username || \"Hacker\"}\")\n                  </h1>\n                </div>\n                <p className=\"text-dim-gray font-mono ml-7 mb-2\">\n                  <span className=\"text-warning-yellow\">{user?.rank || \"Newbie\"}</span> |  \n                  <span className=\"text-matrix ml-2\">{user?.reputation || 0}</span> reputation points\n                </p>\n\n                {/* Progress to next rank */}\n                <div className=\"ml-7 mt-4 mb-2\">\n                  <div className=\"flex justify-between items-center mb-1\">\n                    <span className=\"text-xs text-dim-gray font-mono\">Progress to {nextRank}</span>\n                    <span className=\"text-xs text-matrix font-mono\">{Math.round(progressPercentage)}%</span>\n                  </div>\n                  <Progress value={progressPercentage} className=\"h-1.5 bg-surface\" indicatorClassName=\"bg-matrix\" />\n                </div>\n              </div>\n\n              {/* Security Level Animation */}\n              <div className=\"mt-4 md:mt-0 p-3 bg-terminal/50 border border-matrix/30 rounded animate-pulse-glow\">\n                <div className=\"text-center\">\n                  <p className=\"text-xs text-dim-gray font-mono mb-1\">SECURITY LEVEL</p>\n                  <div className=\"flex justify-center gap-1 mb-1\">\n                    {[...Array(5)].map((_, i) => (\n                      <div \n                        key={i} \n                        className={`h-3 w-3 rounded-sm ${i < Math.ceil((user?.reputation || 0) / 1000) ? 'bg-matrix' : 'bg-dim-gray/20'}`}\n                      />\n                    ))}\n                  </div>\n                  <p className=\"text-sm text-matrix font-mono\">AUTHORIZED</p>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"absolute top-0 right-0 w-full h-full bg-gradient-to-bl from-matrix/5 via-transparent to-transparent\"></div>\n        </div>\n\n        {/* Main Dashboard Tabs */}\n        <Tabs defaultValue=\"overview\" className=\"mb-8\" onValueChange={setActiveTab}>\n          <TabsList className=\"bg-terminal border-b border-matrix/30 w-full justify-start rounded-b-none h-12 p-0\">\n            <TabsTrigger \n              value=\"overview\" \n              className=\"font-mono data-[state=active]:text-matrix data-[state=active]:border-matrix data-[state=active]:border-b-2 rounded-none h-full px-4\"\n            >\n              Overview\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"programs\" \n              className=\"font-mono data-[state=active]:text-matrix data-[state=active]:border-matrix data-[state=active]:border-b-2 rounded-none h-full px-4\"\n            >\n              Programs\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"activity\" \n              className=\"font-mono data-[state=active]:text-matrix data-[state=active]:border-matrix data-[state=active]:border-b-2 rounded-none h-full px-4\"\n            >\n              Activity\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"achievements\" \n              className=\"font-mono data-[state=active]:text-matrix data-[state=active]:border-matrix data-[state=active]:border-b-2 rounded-none h-full px-4\"\n            >\n              Achievements\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"chat\" \n              className=\"font-mono data-[state=active]:text-matrix data-[state=active]:border-matrix data-[state=active]:border-b-2 rounded-none h-full px-4\"\n            >\n              Community Chat\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Overview Tab Content */}\n          <TabsContent value=\"overview\" className=\"pt-6\">\n            {/* Stats Grid */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-8\">\n              {statsCards.map((stat, index) => (\n                <div key={index} className=\"terminal-card p-4 rounded-lg border border-matrix/30 relative overflow-hidden\">\n                  <div className=\"flex justify-between\">\n                    <div>\n                      <p className=\"text-xs text-dim-gray font-mono mb-1\">{stat.title}</p>\n                      <p className=\"text-2xl text-light-gray font-mono mb-1\">{stat.value}</p>\n                      <p className={`text-xs font-mono ${stat.trend === 'up' ? 'text-matrix' : stat.trend === 'down' ? 'text-alert-red' : 'text-dim-gray'} flex items-center`}>\n                        {stat.trend === 'up' && <TrendingUp className=\"h-3 w-3 mr-1\" />}\n                        {stat.trend === 'down' && <TrendingUp className=\"h-3 w-3 mr-1 transform rotate-180\" />}\n                        {stat.change}\n                      </p>\n                    </div>\n                    <div className=\"bg-surface/80 p-2 rounded-md border border-matrix/20 h-fit\">\n                      {stat.icon}\n                    </div>\n                  </div>\n                  <div className=\"absolute bottom-0 left-0 w-full h-1 bg-gradient-to-r from-transparent via-matrix/30 to-transparent\"></div>\n                </div>\n              ))}\n            </div>\n\n            {/* Two Column Layout for Programs and Activity */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              {/* Programs Column */}\n              <div className=\"lg:col-span-2 space-y-6\">\n                <div className=\"flex justify-between items-center mb-4\">\n                  <h2 className=\"text-xl font-mono font-bold text-light-gray\">Active Programs</h2>\n                  <Link href=\"/programs\" className=\"text-matrix hover:text-matrix-dark text-sm font-mono flex items-center\">\n                    View All <ArrowRight className=\"ml-1 h-4 w-4\" />\n                  </Link>\n                </div>\n\n                {programsLoading ? (\n                  <div className=\"flex justify-center py-8\">\n                    <Loader2 className=\"h-8 w-8 animate-spin text-matrix\" />\n                  </div>\n                ) : programsError ? (\n                  <div className=\"terminal-card p-6 rounded-lg text-center\">\n                    <AlertTriangle className=\"h-8 w-8 text-alert-red mx-auto mb-2\" />\n                    <p className=\"text-alert-red font-mono\">Error loading programs</p>\n                  </div>\n                ) : programs && programs.length > 0 ? (\n                  programs.map((program) => (\n                    <ProgramCard key={program.id} program={program} />\n                  ))\n                ) : (\n                  <div className=\"terminal-card p-6 rounded-lg text-center\">\n                    <p className=\"text-dim-gray font-mono\">No active programs found</p>\n                  </div>\n                )}\n              </div>\n\n              {/* Activity & Actions Column */}\n              <div className=\"space-y-6\">\n                {/* Quick Actions */}\n                <div className=\"terminal-card p-4 rounded-lg border border-matrix/30\">\n                  <h2 className=\"text-lg font-mono font-bold text-light-gray mb-4\">Quick Actions</h2>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    <Link href=\"/submit\">\n                      <a className=\"flex items-center p-3 rounded bg-matrix/10 hover:bg-matrix/20 transition-all duration-200 border border-matrix/40 group\">\n                        <Bug className=\"text-matrix mr-3 h-5 w-5 group-hover:animate-pulse\" />\n                        <span className=\"text-light-gray font-mono text-sm\">Submit New Bug</span>\n                      </a>\n                    </Link>\n                    <Link href=\"/programs\">\n                      <a className=\"flex items-center p-3 rounded bg-surface hover:bg-matrix/10 transition-all duration-200 border border-matrix/20\">\n                        <Search className=\"text-matrix mr-3 h-5 w-5\" />\n                        <span className=\"text-light-gray font-mono text-sm\">Find Programs</span>\n                      </a>\n                    </Link>\n                    <Link href=\"/profile\">\n                      <a className=\"flex items-center p-3 rounded bg-surface hover:bg-matrix/10 transition-all duration-200 border border-matrix/20\">\n                        <User className=\"text-matrix mr-3 h-5 w-5\" />\n                        <span className=\"text-light-gray font-mono text-sm\">Edit Profile</span>\n                      </a>\n                    </Link>\n                  </div>\n                </div>\n\n                {/* Recent Activity */}\n                <div className=\"terminal-card p-4 rounded-lg border border-matrix/30\">\n                  <div className=\"flex justify-between items-center mb-4\">\n                    <h2 className=\"text-lg font-mono font-bold text-light-gray\">Recent Activity</h2>\n                    <Link href=\"/activities\" className=\"text-matrix hover:text-matrix-dark text-xs font-mono flex items-center\">\n                      View All <ArrowRight className=\"ml-1 h-3 w-3\" />\n                    </Link>\n                  </div>\n\n                  {activitiesLoading ? (\n                    <div className=\"flex justify-center py-4\">\n                      <Loader2 className=\"h-6 w-6 animate-spin text-matrix\" />\n                    </div>\n                  ) : activitiesError ? (\n                    <div className=\"text-center py-4\">\n                      <AlertTriangle className=\"h-6 w-6 text-alert-red mx-auto mb-2\" />\n                      <p className=\"text-alert-red font-mono text-sm\">Error loading activities</p>\n                    </div>\n                  ) : activities && activities.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {activities.slice(0, 3).map((activity) => (\n                        <ActivityItem key={activity.id} activity={activity} />\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-4\">\n                      <p className=\"text-dim-gray font-mono text-sm\">No recent activities</p>\n                    </div>\n                  )}\n                </div>\n\n                {/* Your Badges */}\n                <div className=\"terminal-card p-4 rounded-lg border border-matrix/30\">\n                  <div className=\"flex justify-between items-center mb-4\">\n                    <h2 className=\"text-lg font-mono font-bold text-light-gray\">Your Badges</h2>\n                    <Link href=\"/badges\" className=\"text-matrix hover:text-matrix-dark text-xs font-mono\">\n                      View All\n                    </Link>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    {badges.map((badge) => (\n                      <div \n                        key={badge.id} \n                        className={`p-3 rounded-md border flex items-center justify-center flex-col ${\n                          badge.acquired \n                            ? 'border-matrix/40 bg-matrix/5' \n                            : 'border-dim-gray/20 bg-surface/50 opacity-50'\n                        }`}\n                      >\n                        <div className={`mb-1 ${badge.acquired ? 'text-matrix' : 'text-dim-gray'}`}>\n                          {badge.icon}\n                        </div>\n                        <p className={`text-xs font-mono ${badge.acquired ? 'text-light-gray' : 'text-dim-gray'}`}>\n                          {badge.name}\n                        </p>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Programs Tab Content */}\n          <TabsContent value=\"programs\" className=\"pt-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              <div className=\"md:col-span-2 space-y-8\">\n                {/* Popular Programs */}\n                <div>\n                  <h2 className=\"text-xl font-mono font-bold text-light-gray mb-4\">Popular Programs</h2>\n                  {programsLoading ? (\n                    <div className=\"flex justify-center py-8\">\n                      <Loader2 className=\"h-8 w-8 animate-spin text-matrix\" />\n                    </div>\n                  ) : programsError ? (\n                    <div className=\"terminal-card p-6 rounded-lg text-center\">\n                      <AlertTriangle className=\"h-8 w-8 text-alert-red mx-auto mb-2\" />\n                      <p className=\"text-alert-red font-mono\">Error loading programs</p>\n                    </div>\n                  ) : popularPrograms.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {popularPrograms.map(program => (\n                        <ProgramCard key={program.id} program={program} />\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"terminal-card p-6 rounded-lg text-center\">\n                      <p className=\"text-dim-gray font-mono\">No popular programs found</p>\n                    </div>\n                  )}\n                </div>\n\n                {/* Newly Added Programs */}\n                <div>\n                  <h2 className=\"text-xl font-mono font-bold text-light-gray mb-4\">Newly Added</h2>\n                  {programsLoading ? (\n                    <div className=\"flex justify-center py-8\">\n                      <Loader2 className=\"h-8 w-8 animate-spin text-matrix\" />\n                    </div>\n                  ) : programsError ? (\n                    <div className=\"terminal-card p-6 rounded-lg text-center\">\n                      <AlertTriangle className=\"h-8 w-8 text-alert-red mx-auto mb-2\" />\n                      <p className=\"text-alert-red font-mono\">Error loading programs</p>\n                    </div>\n                  ) : newPrograms.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {newPrograms.map(program => (\n                        <ProgramCard key={program.id} program={program} />\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"terminal-card p-6 rounded-lg text-center\">\n                      <p className=\"text-dim-gray font-mono\">No new programs found</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div>\n                {/* Program Categories */}\n                <div className=\"terminal-card p-4 rounded-lg border border-matrix/30 mb-6\">\n                  <h2 className=\"text-lg font-mono font-bold text-light-gray mb-4\">Categories</h2>\n                  <div className=\"space-y-2\">\n                    <Link href=\"/programs?category=web\">\n                      <a className=\"flex items-center justify-between p-3 rounded bg-surface hover:bg-matrix/10 transition-all duration-200 border border-matrix/20\">\n                        <div className=\"flex items-center\">\n                          <Server className=\"text-matrix mr-3 h-5 w-5\" />\n                          <span className=\"text-light-gray font-mono text-sm\">Web Applications</span>\n                        </div>\n                        <span className=\"text-matrix text-xs font-mono\">24</span>\n                      </a>\n                    </Link>\n                    <Link href=\"/programs?category=mobile\">\n                      <a className=\"flex items-center justify-between p-3 rounded bg-surface hover:bg-matrix/10 transition-all duration-200 border border-matrix/20\">\n                        <div className=\"flex items-center\">\n                          <Terminal className=\"text-matrix mr-3 h-5 w-5\" />\n                          <span className=\"text-light-gray font-mono text-sm\">Mobile Apps</span>\n                        </div>\n                        <span className=\"text-matrix text-xs font-mono\">16</span>\n                      </a>\n                    </Link>\n                    <Link href=\"/programs?category=api\">\n                      <a className=\"flex items-center justify-between p-3 rounded bg-surface hover:bg-matrix/10 transition-all duration-200 border border-matrix/20\">\n                        <div className=\"flex items-center\">\n                          <Code className=\"text-matrix mr-3 h-5 w-5\" />\n                          <span className=\"text-light-gray font-mono text-sm\">API Security</span>\n                        </div>\n                        <span className=\"text-matrix text-xs font-mono\">12</span>\n                      </a>\n                    </Link>\n                    <Link href=\"/programs?category=network\">\n                      <a className=\"flex items-center justify-between p-3 rounded bg-surface hover:bg-matrix/10 transition-all duration-200 border border-matrix/20\">\n                        <div className=\"flex items-center\">\n                          <Shield className=\"text-matrix mr-3 h-5 w-5\" />\n                          <span className=\"text-light-gray font-mono text-sm\">Network Security</span>\n                        </div>\n                        <span className=\"text-matrix text-xs font-mono\">8</span>\n                      </a>\n                    </Link>\n                  </div>\n                </div>\n\n                {/* Filters */}\n                <div className=\"terminal-card p-4 rounded-lg border border-matrix/30\">\n                  <h2 className=\"text-lg font-mono font-bold text-light-gray mb-4\">Reward Ranges</h2>\n                  <div className=\"space-y-2\">\n                    <Link href=\"/programs?reward=high\">\n                      <a className=\"flex items-center justify-between p-3 rounded bg-surface hover:bg-matrix/10 transition-all duration-200 border border-matrix/20\">\n                        <span className=\"text-light-gray font-mono text-sm\">$10,000+</span>\n                        <span className=\"text-warning-yellow text-xs font-mono\">8 programs</span>\n                      </a>\n                    </Link>\n                    <Link href=\"/programs?reward=medium\">\n                      <a className=\"flex items-center justify-between p-3 rounded bg-surface hover:bg-matrix/10 transition-all duration-200 border border-matrix/20\">\n                        <span className=\"text-light-gray font-mono text-sm\">$1,000 - $10,000</span>\n                        <span className=\"text-warning-yellow text-xs font-mono\">15 programs</span>\n                      </a>\n                    </Link>\n                    <Link href=\"/programs?reward=low\">\n                      <a className=\"flex items-center justify-between p-3 rounded bg-surface hover:bg-matrix/10 transition-all duration-200 border border-matrix/20\">\n                        <span className=\"text-light-gray font-mono text-sm\">Up to $1,000</span>\n                        <span className=\"text-warning-yellow text-xs font-mono\">42 programs</span>\n                      </a>\n                    </Link>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Activity Tab Content */}\n          <TabsContent value=\"activity\" className=\"pt-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              <div className=\"md:col-span-2 space-y-6\">\n                <h2 className=\"text-xl font-mono font-bold text-light-gray mb-4\">All Activity</h2>\n\n                {activitiesLoading ? (\n                  <div className=\"flex justify-center py-8\">\n                    <Loader2 className=\"h-8 w-8 animate-spin text-matrix\" />\n                  </div>\n                ) : activitiesError ? (\n                  <div className=\"terminal-card p-6 rounded-lg text-center\">\n                    <AlertTriangle className=\"h-8 w-8 text-alert-red mx-auto mb-2\" />\n                    <p className=\"text-alert-red font-mono\">Error loading activities</p>\n                  </div>\n                ) : activities && activities.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {activities.map((activity) => (\n                      <ActivityItem key={activity.id} activity={activity} />\n                    ))}\n                    {/* Add some more mock activities for UI fullness */}\n                    <ActivityItem \n                      activity={{\n                        id: 9999,\n                        type: \"submission_pending\",\n                        message: \"Your submission is pending review\",\n                        details: \"XSS Vulnerability in user profile\",\n                        userId: user?.id || 1,\n                        relatedId: 1,\n                        createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000) // 1 day ago\n                      }} \n                    />\n                    <ActivityItem \n                      activity={{\n                        id: 9998,\n                        type: \"submission_accepted\",\n                        message: \"Your submission was accepted\",\n                        details: \"CSRF vulnerability in payment form - $500\",\n                        userId: user?.id || 1,\n                        relatedId: 1,\n                        createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000) // 3 days ago\n                      }} \n                    />\n                  </div>\n                ) : (\n                  <div className=\"terminal-card p-6 rounded-lg text-center\">\n                    <p className=\"text-dim-gray font-mono\">No activities found</p>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"space-y-6\">\n                {/* Activity Filters */}\n                <div className=\"terminal-card p-4 rounded-lg border border-matrix/30\">\n                  <h2 className=\"text-lg font-mono font-bold text-light-gray mb-4\">Filter Activity</h2>\n                  <div className=\"space-y-2\">\n                    <button className=\"w-full flex items-center p-3 rounded bg-matrix/10 hover:bg-matrix/20 transition-all duration-200 border border-matrix/30\">\n                      <CheckCircle className=\"text-matrix mr-3 h-5 w-5\" />\n                      <span className=\"text-light-gray font-mono text-sm\">Accepted Submissions</span>\n                    </button>\n                    <button className=\"w-full flex items-center p-3 rounded bg-surface hover:bg-matrix/10 transition-all duration-200 border border-matrix/20\">\n                      <XCircle className=\"text-alert-red mr-3 h-5 w-5\" />\n                      <span className=\"text-light-gray font-mono text-sm\">Rejected Submissions</span>\n                    </button>\n                    <button className=\"w-full flex items-center p-3 rounded bg-surface hover:bg-matrix/10 transition-all duration-200 border border-matrix/20\">\n                      <Clock className=\"text-warning-yellow mr-3 h-5 w-5\" />\n                      <span className=\"text-light-gray font-mono text-sm\">Pending Review</span>\n                    </button>\n                    <button className=\"w-full flex items-center p-3 rounded bg-surface hover:bg-matrix/10 transition-all duration-200 border border-matrix/20\">\n                      <Award className=\"text-electric-blue mr-3 h-5 w-5\" />\n                      <span className=\"text-light-gray font-mono text-sm\">Achievements</span>\n                    </button>\n                  </div>\n                </div>\n\n                {/* Activity Stats */}\n                <div className=\"terminal-card p-4 rounded-lg border border-matrix/30\">\n                  <h2 className=\"text-lg font-mono font-bold text-light-gray mb-4\">Activity Stats</h2>\n                  <div className=\"space-y-4\">\n                    {/* Submissions by Status */}\n                    <div>\n                      <div className=\"flex justify-between mb-1\">\n                        <span className=\"text-xs text-dim-gray font-mono\">Accepted</span>\n                        <span className=\"text-xs text-matrix font-mono\">65%</span>\n                      </div>\n                      <Progress value={65} className=\"h-1.5 bg-surface\" indicatorClassName=\"bg-matrix\" />\n                    </div>\n                    <div>\n                      <div className=\"flex justify-between mb-1\">\n                        <span className=\"text-xs text-dim-gray font-mono\">Rejected</span>\n                        <span className=\"text-xs text-alert-red font-mono\">20%</span>\n                      </div>\n                      <Progress value={20} className=\"h-1.5 bg-surface\" indicatorClassName=\"bg-alert-red\" />\n                    </div>\n                    <div>\n                      <div className=\"flex justify-between mb-1\">\n                        <span className=\"text-xs text-dim-gray font-mono\">Pending</span>\n                        <span className=\"text-xs text-warning-yellow font-mono\">15%</span>\n                      </div>\n                      <Progress value={15} className=\"h-1.5 bg-surface\" indicatorClassName=\"bg-warning-yellow\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Achievements Tab Content */}\n          <TabsContent value=\"achievements\" className=\"pt-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              <div className=\"md:col-span-2\">\n                <h2 className=\"text-xl font-mono font-bold text-light-gray mb-6\">Your Achievements</h2>\n\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 mb-8\">\n                  {/* Unlocked Achievements */}\n                  <div className=\"terminal-card p-5 rounded-lg border border-matrix/30 hover:shadow-glow-sm transition-all duration-300\">\n                    <div className=\"flex items-center mb-3\">\n                      <div className=\"h-10 w-10 rounded-full bg-matrix/10 p-2 mr-3 border border-matrix/50 flex items-center justify-center\">\n                        <Zap className=\"h-5 w-5 text-matrix\" />\n                      </div>\n                      <div>\n                        <h3 className=\"text-light-gray font-mono text-md\">First Blood</h3>\n                        <p className=\"text-dim-gray font-mono text-xs\">First accepted submission</p>\n                      </div>\n                    </div>\n                    <div className=\"ml-13 pl-13\">\n                      <p className=\"text-sm text-dim-gray font-mono mt-2\">\n                        <span className=\"text-matrix\">+50</span> reputation points\n                      </p>\n                      <p className=\"text-xs text-dim-gray font-mono mt-1\">Unlocked 3 days ago</p>\n                    </div>\n                  </div>\n\n                  <div className=\"terminal-card p-5 rounded-lg border border-matrix/30 hover:shadow-glow-sm transition-all duration-300\">\n                    <div className=\"flex items-center mb-3\">\n                      <div className=\"h-10 w-10 rounded-full bg-matrix/10 p-2 mr-3 border border-matrix/50 flex items-center justify-center\">\n                        <Bug className=\"h-5 w-5 text-matrix\" />\n                      </div>\n                      <div>\n                        <h3 className=\"text-light-gray font-mono text-md\">Bug Hunter</h3>\n                        <p className=\"text-dim-gray font-mono text-xs\">Find 5 confirmed vulnerabilities</p>\n                      </div>\n                    </div>\n                    <div className=\"ml-13 pl-13\">\n                      <p className=\"text-sm text-dim-gray font-mono mt-2\">\n                        <span className=\"text-matrix\">+100</span> reputation points\n                      </p>\n                      <p className=\"text-xs text-dim-gray font-mono mt-1\">Unlocked 1 week ago</p>\n                    </div>\n                  </div>\n\n                  {/* Locked Achievements with Progress */}\n                  <div className=\"terminal-card p-5 rounded-lg border border-dim-gray/30 opacity-70 hover:opacity-90 transition-all duration-300\">\n                    <div className=\"flex items-center mb-3\">\n                      <div className=\"h-10 w-10 rounded-full bg-surface p-2 mr-3 border border-dim-gray/30 flex items-center justify-center\">\n                        <Code className=\"h-5 w-5 text-dim-gray\" />\n                      </div>\n                      <div>\n                        <h3 className=\"text-light-gray font-mono text-md\">Code Breaker</h3>\n                        <p className=\"text-dim-gray font-mono text-xs\">Find a critical RCE vulnerability</p>\n                      </div>\n                    </div>\n                    <div className=\"ml-13 pl-13\">\n                      <p className=\"text-sm text-dim-gray font-mono mt-2\">\n                        Reward: <span className=\"text-matrix\">+200</span> reputation\n                      </p>\n                      <div className=\"mt-2\">\n                        <div className=\"flex justify-between mb-1\">\n                          <span className=\"text-xs text-dim-gray font-mono\">Progress</span>\n                          <span className=\"text-xs text-dim-gray font-mono\">0/1</span>\n                        </div>\n                        <Progress value={0} className=\"h-1.5 bg-dim-gray/20\" indicatorClassName=\"bg-matrix\" />\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"terminal-card p-5 rounded-lg border border-dim-gray/30 opacity-70 hover:opacity-90 transition-all duration-300\">\n                    <div className=\"flex items-center mb-3\">\n                      <div className=\"h-10 w-10 rounded-full bg-surface p-2 mr-3 border border-dim-gray/30 flex items-center justify-center\">\n                        <Target className=\"h-5 w-5 text-dim-gray\" />\n                      </div>\n                      <div>\n                        <h3 className=\"text-light-gray font-mono text-md\">Perfect Score</h3>\n                        <p className=\"text-dim-gray font-mono text-xs\">3 accepted submissions in a row</p>\n                      </div>\n                    </div>\n                    <div className=\"ml-13 pl-13\">\n                      <p className=\"text-sm text-dim-gray font-mono mt-2\">\n                        Reward: <span className=\"text-matrix\">+150</span> reputation\n                      </p>\n                      <div className=\"mt-2\">\n                        <div className=\"flex justify-between mb-1\">\n                          <span className=\"text-xs text-dim-gray font-mono\">Progress</span>\n                          <span className=\"text-xs text-dim-gray font-mono\">1/3</span>\n                        </div>\n                        <Progress value={33} className=\"h-1.5 bg-dim-gray/20\" indicatorClassName=\"bg-matrix\" />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Rank Progress */}\n                <div className=\"terminal-card p-5 rounded-lg border border-matrix/30 mb-6\">\n                  <h2 className=\"text-lg font-mono font-bold text-light-gray mb-4\">Rank Progress</h2>\n\n                  <div className=\"space-y-6\">\n                    <div className=\"relative pt-8\">\n                      {/* Rank progression line */}\n                      <div className=\"absolute top-0 left-1/2 w-0.5 h-full bg-dim-gray/30 -translate-x-1/2\"></div>\n\n                      {/* Checkpoints */}\n                      <div className=\"relative mb-8\">\n                        <div className=\"absolute left-1/2 -translate-x-1/2 w-4 h-4 rounded-full border-2 border-matrix bg-deep-black z-10\"></div>\n                        <div className=\"pl-8 ml-8\">\n                          <p className=\"text-light-gray font-mono text-sm\">Newbie</p>\n                          <p className=\"text-matrix font-mono text-xs\">0 reputation</p>\n                          <p className=\"text-dim-gray font-mono text-xs\">Complete</p>\n                        </div>\n                      </div>\n\n                      <div className=\"relative mb-8\">\n                        <div className=\"absolute left-1/2 -translate-x-1/2 w-4 h-4 rounded-full border-2 border-matrix bg-deep-black z-10\"></div>\n                        <div className=\"pl-8 ml-8\">\n                          <p className=\"text-light-gray font-mono text-sm\">Researcher</p>\n                          <p className=\"text-matrix font-mono text-xs\">100 reputation</p>\n                          <p className=\"text-dim-gray font-mono text-xs\">Complete</p>\n                        </div>\n                      </div>\n\n                      <div className=\"relative mb-8\">\n                        <div className=\"absolute left-1/2 -translate-x-1/2 w-4 h-4 rounded-full border-2 border-matrix bg-deep-black z-10\"></div>\n                        <div className=\"pl-8 ml-8\">\n                          <p className=\"text-light-gray font-mono text-sm\">Bug Hunter</p>\n                          <p className=\"text-matrix font-mono text-xs\">500 reputation</p>\n                          <p className=\"text-warning-yellow font-mono text-xs\">In progress ({Math.round(progressPercentage)}%)</p>\n                        </div>\n                      </div>\n\n                      <div className=\"relative mb-8\">\n                        <div className=\"absolute left-1/2 -translate-x-1/2 w-4 h-4 rounded-full border-2 border-dim-gray/50 bg-deep-black z-10\"></div>\n                        <div className=\"pl-8 ml-8\">\n                          <p className=\"text-dim-gray font-mono text-sm\">Veteran</p>\n                          <p className=\"text-dim-gray font-mono text-xs\">2,000 reputation</p>\n                          <p className=\"text-dim-gray font-mono text-xs\">Locked</p>\n                        </div>\n                      </div>\n\n                      <div className=\"relative\">\n                        <div className=\"absolute left-1/2 -translate-x-1/2 w-4 h-4 rounded-full border-2 border-dim-gray/50 bg-deep-black z-10\"></div>\n                        <div className=\"pl-8 ml-8\">\n                          <p className=\"text-dim-gray font-mono text-sm\">Elite Hunter</p>\n                          <p className=\"text-dim-gray font-mono text-xs\">5,000 reputation</p>\n                          <p className=\"text-dim-gray font-mono text-xs\">Locked</p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-6\">\n                {/* Leaderboard Preview */}\n                <div className=\"terminal-card p-4 rounded-lg border border-matrix/30\">\n                  <div className=\"flex justify-between items-center mb-4\">\n                    <h2 className=\"text-lg font-mono font-bold text-light-gray\">Top Hunters</h2>\n                    <Link href=\"/leaderboard\" className=\"text-matrix hover:text-matrix-dark text-xs font-mono\">\n                      View Full Leaderboard\n                    </Link>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between p-2 rounded bg-matrix/5 border border-matrix/20\">\n                      <div className=\"flex items-center\">\n                        <div className=\"h-8 w-8 rounded-full bg-terminal p-1 mr-3 border border-matrix/30 flex items-center justify-center\">\n                          <span className=\"text-electric-blue font-mono text-xs\">01</span>\n                        </div>\n                        <span className=\"text-light-gray text-sm font-mono\">hackerman</span>\n                      </div>\n                      <span className=\"text-matrix text-xs font-mono\">54,320 pts</span>\n                    </div>\n\n                    <div className=\"flex items-center justify-between p-2 rounded bg-surface border border-matrix/20\">\n                      <div className=\"flex items-center\">\n                        <div className=\"h-8 w-8 rounded-full bg-terminal p-1 mr-3 border border-matrix/30 flex items-center justify-center\">\n                          <span className=\"text-electric-blue font-mono text-xs\">02</span>\n                        </div>\n                        <span className=\"text-light-gray text-sm font-mono\">zerocool</span>\n                      </div>\n                      <span className=\"text-matrix text-xs font-mono\">48,750 pts</span>\n                    </div>\n\n                    <div className=\"flex items-center justify-between p-2 rounded bg-surface border border-matrix/20\">\n                      <div className=\"flex items-center\">\n                        <div className=\"h-8 w-8 rounded-full bg-terminal p-1 mr-3 border border-matrix/30 flex items-center justify-center\">\n                          <span className=\"text-electric-blue font-mono text-xs\">03</span>\n                        </div>\n                        <span className=\"text-light-gray text-sm font-mono\">cyph3r</span>\n                      </div>\n                      <span className=\"text-matrix text-xs font-mono\">42,130 pts</span>\n                    </div>\n\n                    <div className=\"flex items-center justify-between p-2 rounded bg-surface border border-matrix/20\">\n                      <div className=\"flex items-center\">\n                        <div className=\"h-8 w-8 rounded-full bg-terminal p-1 mr-3 border border-matrix/30 flex items-center justify-center\">\n                          <span className=\"text-electric-blue font-mono text-xs\">04</span>\n                        </div>\n                        <span className=\"text-light-gray text-sm font-mono\">l33thax0r</span>\n                      </div>\n                      <span className=\"text-matrix text-xs font-mono\">36,840 pts</span>\n                    </div>\n\n                    <div className=\"flex items-center justify-between p-2 rounded bg-surface border border-matrix/20\">\n                      <div className=\"flex items-center\">\n                        <div className=\"h-8 w-8 rounded-full bg-terminal p-1 mr-3 border border-matrix/30 flex items-center justify-center\">\n                          <span className=\"text-electric-blue font-mono text-xs\">05</span>\n                        </div>\n                        <span className=\"text-light-gray text-sm font-mono\">neocortex</span>\n                      </div>\n                      <span className=\"text-matrix text-xs font-mono\">33,210 pts</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Your position */}\n                <div className=\"terminal-card p-4 rounded-lg border border-matrix/30\">\n                  <h2 className=\"text-lg font-mono font-bold text-light-gray mb-4\">Your Position</h2>\n                  <div className=\"p-3 rounded bg-matrix/10 border border-matrix/30\">\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <div className=\"flex items-center\">\n                        <div className=\"h-8 w-8 rounded-full bg-terminal p-1 mr-3 border border-matrix/30 flex items-center justify-center\">\n                          <span className=\"text-electric-blue font-mono text-xs\">186</span>\n                        </div>\n                        <span className=\"text-light-gray text-sm font-mono\">{user?.username || \"you\"}</span>\n                      </div>\n                      <span className=\"text-matrix text-xs font-mono\">{user?.reputation || 0} pts</span>\n                    </div>\n                    <div className=\"text-center mt-3\">\n                      <p className=\"text-xs text-dim-gray font-mono\">\n                        <span className=\"text-matrix\">+85</span> positions in the last month\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Achievement Statistics */}\n                <div className=\"terminal-card p-4 rounded-lg border border-matrix/30\">\n                  <h2 className=\"text-lg font-mono font-bold text-light-gray mb-4\">Statistics</h2>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-dim-gray font-mono text-sm\">Total Achievements</span>\n                      <span className=\"text-light-gray font-mono text-sm\">2/12</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-dim-gray font-mono text-sm\">Rare Badges</span>\n                      <span className=\"text-light-gray font-mono text-sm\">0/4</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-dim-gray font-mono text-sm\">Reputation from Achievements</span>\n                      <span className=\"text-matrix font-mono text-sm\">150 pts</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-dim-gray font-mono text-sm\">Next Achievement</span>\n                      <span className=\"text-warning-yellow font-mono text-sm\">33% complete</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Chat Tab Content */}\n          <TabsContent value=\"chat\" className=\"pt-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              <div className=\"lg:col-span-2\">\n                <PublicChat />\n              </div>\n\n              <div className=\"space-y-6\">\n                {/* Chat Guidelines */}\n                <div className=\"terminal-card p-4 rounded-lg border border-matrix/30\">\n                  <h2 className=\"text-lg font-mono font-bold text-light-gray mb-4\">Chat Guidelines</h2>\n                  <div className=\"space-y-3 text-sm text-dim-gray font-mono\">\n                    <div className=\"flex items-start\">\n                      <div className=\"h-2 w-2 bg-matrix rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                      <p>Be respectful to all community members</p>\n                    </div>\n                    <div className=\"flex items-start\">\n                      <div className=\"h-2 w-2 bg-matrix rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                      <p>No spam or promotional content</p>\n                    </div>\n                    <div className=\"flex items-start\">\n                      <div className=\"h-2 w-2 bg-matrix rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                      <p>Share vulnerability findings responsibly</p>\n                    </div>\n                    <div className=\"flex items-start\">\n                      <div className=\"h-2 w-2 bg-matrix rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                      <p>Companies can post program announcements</p>\n                    </div>\n                    <div className=\"flex items-start\">\n                      <div className=\"h-2 w-2 bg-matrix rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                      <p>Ask questions and help fellow hackers</p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Active Users */}\n                <div className=\"terminal-card p-4 rounded-lg border border-matrix/30\">\n                  <h2 className=\"text-lg font-mono font-bold text-light-gray mb-4\">Online Now</h2>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between p-2 rounded bg-surface\">\n                      <div className=\"flex items-center\">\n                        <div className=\"h-2 w-2 bg-matrix rounded-full mr-2\"></div>\n                        <span className=\"text-light-gray text-sm font-mono\">hackerman</span>\n                      </div>\n                      <Badge className=\"bg-matrix/20 text-matrix border-matrix/30 text-xs\">\n                        Elite Hunter\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center justify-between p-2 rounded bg-surface\">\n                      <div className=\"flex items-center\">\n                        <div className=\"h-2 w-2 bg-matrix rounded-full mr-2\"></div>\n                        <span className=\"text-light-gray text-sm font-mono\">TechCorp</span>\n                      </div>\n                      <Badge className=\"bg-electric-blue/20 text-electric-blue border-electric-blue/30 text-xs\">\n                        Company\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center justify-between p-2 rounded bg-surface\">\n                      <div className=\"flex items-center\">\n                        <div className=\"h-2 w-2 bg-matrix rounded-full mr-2\"></div>\n                        <span className=\"text-light-gray text-sm font-mono\">zerocool</span>\n                      </div>\n                      <Badge className=\"bg-matrix/20 text-matrix border-matrix/30 text-xs\">\n                        Bug Hunter\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Recent Announcements */}\n                <div className=\"terminal-card p-4 rounded-lg border border-matrix/30\">\n                  <h2 className=\"text-lg font-mono font-bold text-light-gray mb-4\">Recent Announcements</h2>\n                  <div className=\"space-y-3\">\n                    <div className=\"p-3 rounded bg-warning-yellow/5 border border-warning-yellow/30\">\n                      <div className=\"flex items-center mb-1\">\n                        <Megaphone className=\"h-3 w-3 text-warning-yellow mr-2\" />\n                        <span className=\"text-light-gray text-xs font-mono\">TechCorp</span>\n                      </div>\n                      <p className=\"text-sm text-dim-gray font-mono\">\n                        New bug bounty program launched! Check out our web application scope.\n                      </p>\n                      <p className=\"text-xs text-dim-gray font-mono mt-1\">2 hours ago</p>\n                    </div>\n                    \n                    <div className=\"p-3 rounded bg-warning-yellow/5 border border-warning-yellow/30\">\n                      <div className=\"flex items-center mb-1\">\n                        <Megaphone className=\"h-3 w-3 text-warning-yellow mr-2\" />\n                        <span className=\"text-light-gray text-xs font-mono\">SecureBank</span>\n                      </div>\n                      <p className=\"text-sm text-dim-gray font-mono\">\n                        Increased rewards for critical vulnerabilities - up to $10,000!\n                      </p>\n                      <p className=\"text-xs text-dim-gray font-mono mt-1\">1 day ago</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        {/* Terminal-style system message */}\n        <div className=\"terminal-card p-3 rounded-lg mb-2 mt-8 relative overflow-hidden border-matrix/10\">\n          <p className=\"text-dim-gray font-mono text-xs\">\n            <span className=\"text-matrix mr-2\">sys.message:</span>\n            \"Remember to check for new programs daily. Rewards are claimed on a first-come, first-served basis.\"\n          </p>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":51703},"client/src/pages/documentation-page.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport {\n  Search,\n  Book,\n  Code,\n  Terminal,\n  FileText,\n  Lock,\n  ShieldCheck,\n  CreditCard,\n  Database,\n  Globe,\n  Activity,\n  ChevronRight,\n  ExternalLink,\n  Copy,\n  Laptop,\n  Server,\n  Zap\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function DocumentationPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  \n  // Documentation categories\n  const documentationSections = [\n    {\n      id: \"getting-started\",\n      title: \"Getting Started\",\n      icon: <Book className=\"h-5 w-5 text-matrix\" />,\n      pages: [\n        \"Introduction & Overview\",\n        \"Account Setup\",\n        \"Platform Navigation\",\n        \"Understanding Bug Bounty Programs\",\n        \"Researcher Guidelines\",\n        \"Key Terminology\"\n      ]\n    },\n    {\n      id: \"researcher-guides\",\n      title: \"Researcher Guides\",\n      icon: <Terminal className=\"h-5 w-5 text-electric-blue\" />,\n      pages: [\n        \"Submitting Reports\",\n        \"Report Templates\",\n        \"Severity Classification\",\n        \"Avoiding Duplicate Reports\",\n        \"Communicating with Program Owners\",\n        \"Payment & Rewards\"\n      ]\n    },\n    {\n      id: \"program-owner-guides\",\n      title: \"Program Owner Guides\",\n      icon: <Lock className=\"h-5 w-5 text-green-500\" />,\n      pages: [\n        \"Creating a Program\",\n        \"Defining Scope\",\n        \"Setting Reward Structures\",\n        \"Triage Process\",\n        \"Response Templates\",\n        \"Program Analytics\"\n      ]\n    },\n    {\n      id: \"api-reference\",\n      title: \"API Reference\",\n      icon: <Code className=\"h-5 w-5 text-yellow-400\" />,\n      pages: [\n        \"Authentication\",\n        \"Programs API\",\n        \"Reports API\",\n        \"Users API\",\n        \"Webhooks\",\n        \"Rate Limits & Pagination\"\n      ]\n    },\n    {\n      id: \"integrations\",\n      title: \"Integrations\",\n      icon: <Database className=\"h-5 w-5 text-purple-400\" />,\n      pages: [\n        \"GitHub Integration\",\n        \"Jira Integration\",\n        \"Slack Integration\",\n        \"Microsoft Teams Integration\",\n        \"Custom Webhooks\",\n        \"CI/CD Integration\"\n      ]\n    }\n  ];\n\n  // Popular articles\n  const popularArticles = [\n    \"Setting Up Two-Factor Authentication\",\n    \"Understanding Reputation Points\",\n    \"Creating Effective Bug Reports\",\n    \"Program Scope Best Practices\",\n    \"Payment Methods Overview\",\n    \"Using the API to Manage Reports\"\n  ];\n\n  // Recent updates\n  const recentUpdates = [\n    {\n      title: \"API v2.0 Release\",\n      date: \"March 25, 2025\",\n      description: \"New endpoints for analytics, improved rate limits, and enhanced webhook functionality.\"\n    },\n    {\n      title: \"Report Template Updates\",\n      date: \"March 18, 2025\",\n      description: \"New templates for mobile application testing and cloud infrastructure.\"\n    },\n    {\n      title: \"Severity Classification Guide\",\n      date: \"March 10, 2025\",\n      description: \"Updated CVSS scoring guidelines and impact assessment criteria.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground className=\"opacity-20\" />\n      <Navbar />\n      \n      <main className=\"max-w-7xl mx-auto px-4 py-12 relative z-10\">\n        {/* Header Section */}\n        <div className=\"mb-12 text-center\">\n          <h1 className=\"text-4xl font-mono font-bold text-matrix mb-4\">CyberHunt Documentation</h1>\n          <p className=\"text-dim-gray mb-6 max-w-3xl mx-auto\">\n            Comprehensive guides, API references, and best practices for using the CyberHunt platform\n            as a security researcher or program owner.\n          </p>\n          \n          <div className=\"max-w-xl mx-auto relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search documentation...\"\n              className=\"bg-dark-terminal border-matrix/30 pl-10 h-12 font-mono\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n            />\n            <Search className=\"absolute left-3 top-3.5 h-5 w-5 text-dim-gray pointer-events-none\" />\n          </div>\n        </div>\n        \n        {/* Main Content */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          {/* Sidebar */}\n          <div className=\"lg:col-span-1 order-2 lg:order-1\">\n            <div className=\"terminal-card p-5 rounded-lg sticky top-24\">\n              {/* Navigation Menu */}\n              <h2 className=\"text-xl font-mono font-bold text-matrix mb-4\">Documentation</h2>\n              \n              <Accordion type=\"single\" collapsible className=\"w-full mb-6\">\n                {documentationSections.map((section) => (\n                  <AccordionItem key={section.id} value={section.id} className=\"border-b border-matrix/20 last:border-0\">\n                    <AccordionTrigger className=\"text-light-gray hover:text-matrix font-mono py-3\">\n                      <div className=\"flex items-center\">\n                        <div className=\"mr-3\">{section.icon}</div>\n                        <span>{section.title}</span>\n                      </div>\n                    </AccordionTrigger>\n                    <AccordionContent>\n                      <ul className=\"pl-8 py-2 space-y-2\">\n                        {section.pages.map((page, index) => (\n                          <li key={index}>\n                            <a href=\"#\" className=\"text-dim-gray hover:text-matrix text-sm flex items-center\">\n                              <ChevronRight className=\"h-3 w-3 mr-1\" />\n                              {page}\n                            </a>\n                          </li>\n                        ))}\n                      </ul>\n                    </AccordionContent>\n                  </AccordionItem>\n                ))}\n              </Accordion>\n              \n              {/* Popular Articles */}\n              <div className=\"mb-6\">\n                <h3 className=\"font-mono text-light-gray text-lg mb-3\">Popular Articles</h3>\n                <ul className=\"space-y-2\">\n                  {popularArticles.map((article, index) => (\n                    <li key={index}>\n                      <a href=\"#\" className=\"text-dim-gray hover:text-matrix text-sm flex items-center\">\n                        <Activity className=\"h-3.5 w-3.5 mr-2 text-matrix\" />\n                        {article}\n                      </a>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n              \n              {/* Recent Updates */}\n              <div>\n                <h3 className=\"font-mono text-light-gray text-lg mb-3\">Recent Updates</h3>\n                <div className=\"space-y-3\">\n                  {recentUpdates.map((update, index) => (\n                    <div key={index} className=\"border-b border-matrix/20 last:border-0 pb-3 last:pb-0\">\n                      <h4 className=\"text-light-gray text-sm font-mono\">{update.title}</h4>\n                      <p className=\"text-xs text-dim-gray mb-1\">{update.date}</p>\n                      <p className=\"text-xs text-dim-gray\">{update.description}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Main Documentation Content */}\n          <div className=\"lg:col-span-3 order-1 lg:order-2\">\n            <div className=\"terminal-card p-6 rounded-lg mb-8\">\n              <h2 className=\"text-2xl font-mono font-bold text-matrix mb-6\">Introduction to CyberHunt</h2>\n              \n              <div className=\"prose prose-sm prose-invert max-w-none\">\n                <p className=\"text-dim-gray\">\n                  CyberHunt is a modern bug bounty platform designed to connect security researchers with organizations \n                  seeking to improve their security posture. Our platform provides tools, resources, and infrastructure \n                  to facilitate the discovery, reporting, and remediation of security vulnerabilities.\n                </p>\n                \n                <h3 className=\"text-xl font-mono text-light-gray mt-6 mb-3\">Key Features</h3>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n                  <div className=\"border border-matrix/30 rounded-lg p-4 bg-terminal/50\">\n                    <div className=\"flex items-center mb-2\">\n                      <ShieldCheck className=\"h-5 w-5 text-matrix mr-2\" />\n                      <h4 className=\"text-light-gray font-mono\">Vulnerability Reporting</h4>\n                    </div>\n                    <p className=\"text-dim-gray text-sm\">\n                      Structured templates and workflows for submitting, triaging, and managing security vulnerabilities.\n                    </p>\n                  </div>\n                  \n                  <div className=\"border border-matrix/30 rounded-lg p-4 bg-terminal/50\">\n                    <div className=\"flex items-center mb-2\">\n                      <CreditCard className=\"h-5 w-5 text-electric-blue mr-2\" />\n                      <h4 className=\"text-light-gray font-mono\">Rewards & Payments</h4>\n                    </div>\n                    <p className=\"text-dim-gray text-sm\">\n                      Flexible bounty structures and secure payment processing for vulnerability discoveries.\n                    </p>\n                  </div>\n                  \n                  <div className=\"border border-matrix/30 rounded-lg p-4 bg-terminal/50\">\n                    <div className=\"flex items-center mb-2\">\n                      <Globe className=\"h-5 w-5 text-green-500 mr-2\" />\n                      <h4 className=\"text-light-gray font-mono\">Program Management</h4>\n                    </div>\n                    <p className=\"text-dim-gray text-sm\">\n                      Tools for organizations to define scope, set rules, and manage security testing programs.\n                    </p>\n                  </div>\n                  \n                  <div className=\"border border-matrix/30 rounded-lg p-4 bg-terminal/50\">\n                    <div className=\"flex items-center mb-2\">\n                      <Terminal className=\"h-5 w-5 text-yellow-400 mr-2\" />\n                      <h4 className=\"text-light-gray font-mono\">Researcher Tools</h4>\n                    </div>\n                    <p className=\"text-dim-gray text-sm\">\n                      Resources, guides, and assistance for security researchers at all experience levels.\n                    </p>\n                  </div>\n                </div>\n                \n                <h3 className=\"text-xl font-mono text-light-gray mt-6 mb-3\">Getting Started</h3>\n                \n                <p className=\"text-dim-gray mb-4\">\n                  Whether you're a security researcher looking to find and report vulnerabilities or an organization \n                  wanting to establish a bug bounty program, this documentation will help you get started with CyberHunt.\n                </p>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <a href=\"#\" className=\"border border-matrix/30 rounded-lg p-4 bg-terminal/50 hover:bg-matrix/5 transition duration-200\">\n                    <div className=\"flex items-center mb-2\">\n                      <Laptop className=\"h-5 w-5 text-matrix mr-2\" />\n                      <h4 className=\"text-light-gray font-mono\">Researcher Guide</h4>\n                    </div>\n                    <p className=\"text-dim-gray text-sm\">\n                      Learn how to find vulnerabilities, submit reports, and earn bounties as a security researcher.\n                    </p>\n                  </a>\n                  \n                  <a href=\"#\" className=\"border border-matrix/30 rounded-lg p-4 bg-terminal/50 hover:bg-matrix/5 transition duration-200\">\n                    <div className=\"flex items-center mb-2\">\n                      <Server className=\"h-5 w-5 text-electric-blue mr-2\" />\n                      <h4 className=\"text-light-gray font-mono\">Program Owner Guide</h4>\n                    </div>\n                    <p className=\"text-dim-gray text-sm\">\n                      Set up and manage an effective bug bounty program for your organization.\n                    </p>\n                  </a>\n                </div>\n              </div>\n            </div>\n            \n            {/* API Quick Reference */}\n            <div className=\"terminal-card p-6 rounded-lg mb-8\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h2 className=\"text-2xl font-mono font-bold text-matrix\">API Quick Reference</h2>\n                <a href=\"#\" className=\"text-matrix hover:text-matrix-dark text-sm font-mono flex items-center\">\n                  Full API Docs <ExternalLink className=\"ml-1 h-4 w-4\" />\n                </a>\n              </div>\n              \n              <Tabs defaultValue=\"authentication\">\n                <TabsList className=\"bg-transparent h-auto p-0 border-b border-matrix/20 w-full justify-start space-x-6 mb-4\">\n                  <TabsTrigger \n                    value=\"authentication\" \n                    className=\"px-0 py-3 bg-transparent text-sm rounded-none border-b-2 border-transparent data-[state=active]:border-matrix data-[state=active]:text-matrix text-dim-gray h-auto\"\n                  >\n                    Authentication\n                  </TabsTrigger>\n                  <TabsTrigger \n                    value=\"programs\" \n                    className=\"px-0 py-3 bg-transparent text-sm rounded-none border-b-2 border-transparent data-[state=active]:border-matrix data-[state=active]:text-matrix text-dim-gray h-auto\"\n                  >\n                    Programs\n                  </TabsTrigger>\n                  <TabsTrigger \n                    value=\"reports\" \n                    className=\"px-0 py-3 bg-transparent text-sm rounded-none border-b-2 border-transparent data-[state=active]:border-matrix data-[state=active]:text-matrix text-dim-gray h-auto\"\n                  >\n                    Reports\n                  </TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"authentication\" className=\"p-0 mt-0\">\n                  <div className=\"bg-terminal rounded-lg border border-matrix/20 p-4 mb-4 relative\">\n                    <button className=\"absolute top-2 right-2 text-dim-gray hover:text-matrix\">\n                      <Copy className=\"h-4 w-4\" />\n                    </button>\n                    <pre className=\"text-xs text-light-gray font-mono whitespace-pre overflow-x-auto\">\n{`curl -X POST https://api.cyberhunt.com/v1/auth/token \\\\\n  -H \"Content-Type: application/json\" \\\\\n  -d '{\"api_key\": \"YOUR_API_KEY\", \"api_secret\": \"YOUR_API_SECRET\"}'`}\n                    </pre>\n                  </div>\n                  \n                  <p className=\"text-dim-gray text-sm mb-4\">\n                    All API requests must include an authorization token. You can generate an API key and secret from your \n                    account settings page. The token returned from this endpoint should be included in the Authorization \n                    header of all subsequent requests.\n                  </p>\n                  \n                  <div className=\"bg-terminal rounded-lg border border-matrix/20 p-4 relative\">\n                    <button className=\"absolute top-2 right-2 text-dim-gray hover:text-matrix\">\n                      <Copy className=\"h-4 w-4\" />\n                    </button>\n                    <pre className=\"text-xs text-light-gray font-mono whitespace-pre overflow-x-auto\">\n{`// Example Response\n{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"expires_at\": \"2025-04-29T00:00:00Z\"\n}`}\n                    </pre>\n                  </div>\n                </TabsContent>\n                \n                <TabsContent value=\"programs\" className=\"p-0 mt-0\">\n                  <div className=\"bg-terminal rounded-lg border border-matrix/20 p-4 mb-4 relative\">\n                    <button className=\"absolute top-2 right-2 text-dim-gray hover:text-matrix\">\n                      <Copy className=\"h-4 w-4\" />\n                    </button>\n                    <pre className=\"text-xs text-light-gray font-mono whitespace-pre overflow-x-auto\">\n{`# List all public programs\ncurl -X GET https://api.cyberhunt.com/v1/programs \\\\\n  -H \"Authorization: Bearer YOUR_TOKEN\"\n\n# Get a specific program\ncurl -X GET https://api.cyberhunt.com/v1/programs/123 \\\\\n  -H \"Authorization: Bearer YOUR_TOKEN\"`}\n                    </pre>\n                  </div>\n                  \n                  <p className=\"text-dim-gray text-sm mb-4\">\n                    The Programs API allows you to list and retrieve details about bug bounty programs. For \n                    organization accounts, additional endpoints are available for creating and managing programs.\n                  </p>\n                  \n                  <div className=\"bg-terminal rounded-lg border border-matrix/20 p-4 relative\">\n                    <button className=\"absolute top-2 right-2 text-dim-gray hover:text-matrix\">\n                      <Copy className=\"h-4 w-4\" />\n                    </button>\n                    <pre className=\"text-xs text-light-gray font-mono whitespace-pre overflow-x-auto\">\n{`// Example Program Object\n{\n  \"id\": 123,\n  \"name\": \"SecureCorp Bug Bounty\",\n  \"description\": \"Find vulnerabilities in our web application.\",\n  \"scope\": [\"https://securecorp.com\"],\n  \"rewards\": {\n    \"low\": \"100-200\",\n    \"medium\": \"200-500\",\n    \"high\": \"500-1000\",\n    \"critical\": \"1000-5000\"\n  },\n  \"status\": \"active\",\n  \"created_at\": \"2025-01-15T00:00:00Z\"\n}`}\n                    </pre>\n                  </div>\n                </TabsContent>\n                \n                <TabsContent value=\"reports\" className=\"p-0 mt-0\">\n                  <div className=\"bg-terminal rounded-lg border border-matrix/20 p-4 mb-4 relative\">\n                    <button className=\"absolute top-2 right-2 text-dim-gray hover:text-matrix\">\n                      <Copy className=\"h-4 w-4\" />\n                    </button>\n                    <pre className=\"text-xs text-light-gray font-mono whitespace-pre overflow-x-auto\">\n{`# Submit a new report\ncurl -X POST https://api.cyberhunt.com/v1/reports \\\\\n  -H \"Authorization: Bearer YOUR_TOKEN\" \\\\\n  -H \"Content-Type: application/json\" \\\\\n  -d '{\n    \"program_id\": 123,\n    \"title\": \"XSS in Search Function\",\n    \"description\": \"...\",\n    \"severity\": \"high\",\n    \"steps_to_reproduce\": \"...\"\n  }'`}\n                    </pre>\n                  </div>\n                  \n                  <p className=\"text-dim-gray text-sm mb-4\">\n                    The Reports API allows researchers to submit and manage vulnerability reports. Program owners \n                    can use this API to retrieve, update, and triage reports for their programs.\n                  </p>\n                  \n                  <div className=\"bg-terminal rounded-lg border border-matrix/20 p-4 relative\">\n                    <button className=\"absolute top-2 right-2 text-dim-gray hover:text-matrix\">\n                      <Copy className=\"h-4 w-4\" />\n                    </button>\n                    <pre className=\"text-xs text-light-gray font-mono whitespace-pre overflow-x-auto\">\n{`// Example Report Object\n{\n  \"id\": 456,\n  \"program_id\": 123,\n  \"title\": \"XSS in Search Function\",\n  \"description\": \"...\",\n  \"severity\": \"high\",\n  \"status\": \"pending\",\n  \"submitted_at\": \"2025-03-28T12:34:56Z\",\n  \"last_updated_at\": \"2025-03-28T12:34:56Z\"\n}`}\n                    </pre>\n                  </div>\n                </TabsContent>\n              </Tabs>\n            </div>\n            \n            {/* Learning Paths */}\n            <div className=\"terminal-card p-6 rounded-lg mb-8\">\n              <h2 className=\"text-2xl font-mono font-bold text-matrix mb-6\">Documentation Learning Paths</h2>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"border border-matrix/30 rounded-lg p-5 hover:bg-matrix/5 transition duration-200\">\n                  <div className=\"flex items-center mb-4\">\n                    <div className=\"h-10 w-10 rounded-md bg-terminal p-2 mr-4 border border-matrix/30 flex items-center justify-center\">\n                      <Terminal className=\"h-5 w-5 text-matrix\" />\n                    </div>\n                    <h3 className=\"text-lg font-mono text-light-gray\">Beginner Researcher</h3>\n                  </div>\n                  \n                  <div className=\"space-y-2 mb-4\">\n                    <div className=\"flex items-center\">\n                      <div className=\"h-5 w-5 rounded-full border border-matrix/50 flex items-center justify-center mr-2\">\n                        <div className=\"h-2.5 w-2.5 bg-matrix rounded-full\"></div>\n                      </div>\n                      <p className=\"text-sm text-dim-gray\">Account Setup & Verification</p>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"h-5 w-5 rounded-full border border-matrix/50 flex items-center justify-center mr-2\">\n                        <div className=\"h-2.5 w-2.5 bg-matrix rounded-full\"></div>\n                      </div>\n                      <p className=\"text-sm text-dim-gray\">Understanding Vulnerability Types</p>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"h-5 w-5 rounded-full border border-matrix/50 flex items-center justify-center mr-2\">\n                        <div className=\"h-2.5 w-2.5 bg-matrix rounded-full\"></div>\n                      </div>\n                      <p className=\"text-sm text-dim-gray\">Creating Your First Report</p>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"h-5 w-5 rounded-full border border-matrix/50 flex items-center justify-center mr-2\">\n                        <div className=\"h-2.5 w-2.5 bg-matrix rounded-full\"></div>\n                      </div>\n                      <p className=\"text-sm text-dim-gray\">Navigating the Payment System</p>\n                    </div>\n                  </div>\n                  \n                  <a href=\"#\" className=\"text-matrix hover:text-matrix-dark text-sm font-mono flex items-center\">\n                    Start This Path <ChevronRight className=\"ml-1 h-4 w-4\" />\n                  </a>\n                </div>\n                \n                <div className=\"border border-matrix/30 rounded-lg p-5 hover:bg-matrix/5 transition duration-200\">\n                  <div className=\"flex items-center mb-4\">\n                    <div className=\"h-10 w-10 rounded-md bg-terminal p-2 mr-4 border border-matrix/30 flex items-center justify-center\">\n                      <Server className=\"h-5 w-5 text-electric-blue\" />\n                    </div>\n                    <h3 className=\"text-lg font-mono text-light-gray\">Program Owner</h3>\n                  </div>\n                  \n                  <div className=\"space-y-2 mb-4\">\n                    <div className=\"flex items-center\">\n                      <div className=\"h-5 w-5 rounded-full border border-matrix/50 flex items-center justify-center mr-2\">\n                        <div className=\"h-2.5 w-2.5 bg-electric-blue rounded-full\"></div>\n                      </div>\n                      <p className=\"text-sm text-dim-gray\">Creating Your Organization</p>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"h-5 w-5 rounded-full border border-matrix/50 flex items-center justify-center mr-2\">\n                        <div className=\"h-2.5 w-2.5 bg-electric-blue rounded-full\"></div>\n                      </div>\n                      <p className=\"text-sm text-dim-gray\">Setting Up Your First Program</p>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"h-5 w-5 rounded-full border border-matrix/50 flex items-center justify-center mr-2\">\n                        <div className=\"h-2.5 w-2.5 bg-electric-blue rounded-full\"></div>\n                      </div>\n                      <p className=\"text-sm text-dim-gray\">Triaging & Responding to Reports</p>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"h-5 w-5 rounded-full border border-matrix/50 flex items-center justify-center mr-2\">\n                        <div className=\"h-2.5 w-2.5 bg-electric-blue rounded-full\"></div>\n                      </div>\n                      <p className=\"text-sm text-dim-gray\">Managing Bounty Payments</p>\n                    </div>\n                  </div>\n                  \n                  <a href=\"#\" className=\"text-electric-blue hover:text-blue-400 text-sm font-mono flex items-center\">\n                    Start This Path <ChevronRight className=\"ml-1 h-4 w-4\" />\n                  </a>\n                </div>\n                \n                <div className=\"border border-matrix/30 rounded-lg p-5 hover:bg-matrix/5 transition duration-200\">\n                  <div className=\"flex items-center mb-4\">\n                    <div className=\"h-10 w-10 rounded-md bg-terminal p-2 mr-4 border border-matrix/30 flex items-center justify-center\">\n                      <Code className=\"h-5 w-5 text-green-500\" />\n                    </div>\n                    <h3 className=\"text-lg font-mono text-light-gray\">API Integration</h3>\n                  </div>\n                  \n                  <div className=\"space-y-2 mb-4\">\n                    <div className=\"flex items-center\">\n                      <div className=\"h-5 w-5 rounded-full border border-matrix/50 flex items-center justify-center mr-2\">\n                        <div className=\"h-2.5 w-2.5 bg-green-500 rounded-full\"></div>\n                      </div>\n                      <p className=\"text-sm text-dim-gray\">Authentication & Access Keys</p>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"h-5 w-5 rounded-full border border-matrix/50 flex items-center justify-center mr-2\">\n                        <div className=\"h-2.5 w-2.5 bg-green-500 rounded-full\"></div>\n                      </div>\n                      <p className=\"text-sm text-dim-gray\">Core API Endpoints</p>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"h-5 w-5 rounded-full border border-matrix/50 flex items-center justify-center mr-2\">\n                        <div className=\"h-2.5 w-2.5 bg-green-500 rounded-full\"></div>\n                      </div>\n                      <p className=\"text-sm text-dim-gray\">Webhook Implementation</p>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"h-5 w-5 rounded-full border border-matrix/50 flex items-center justify-center mr-2\">\n                        <div className=\"h-2.5 w-2.5 bg-green-500 rounded-full\"></div>\n                      </div>\n                      <p className=\"text-sm text-dim-gray\">Custom Integration Examples</p>\n                    </div>\n                  </div>\n                  \n                  <a href=\"#\" className=\"text-green-500 hover:text-green-400 text-sm font-mono flex items-center\">\n                    Start This Path <ChevronRight className=\"ml-1 h-4 w-4\" />\n                  </a>\n                </div>\n                \n                <div className=\"border border-matrix/30 rounded-lg p-5 hover:bg-matrix/5 transition duration-200\">\n                  <div className=\"flex items-center mb-4\">\n                    <div className=\"h-10 w-10 rounded-md bg-terminal p-2 mr-4 border border-matrix/30 flex items-center justify-center\">\n                      <Zap className=\"h-5 w-5 text-yellow-400\" />\n                    </div>\n                    <h3 className=\"text-lg font-mono text-light-gray\">Advanced Features</h3>\n                  </div>\n                  \n                  <div className=\"space-y-2 mb-4\">\n                    <div className=\"flex items-center\">\n                      <div className=\"h-5 w-5 rounded-full border border-matrix/50 flex items-center justify-center mr-2\">\n                        <div className=\"h-2.5 w-2.5 bg-yellow-400 rounded-full\"></div>\n                      </div>\n                      <p className=\"text-sm text-dim-gray\">Custom Workflows</p>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"h-5 w-5 rounded-full border border-matrix/50 flex items-center justify-center mr-2\">\n                        <div className=\"h-2.5 w-2.5 bg-yellow-400 rounded-full\"></div>\n                      </div>\n                      <p className=\"text-sm text-dim-gray\">Advanced Analytics</p>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"h-5 w-5 rounded-full border border-matrix/50 flex items-center justify-center mr-2\">\n                        <div className=\"h-2.5 w-2.5 bg-yellow-400 rounded-full\"></div>\n                      </div>\n                      <p className=\"text-sm text-dim-gray\">Team Collaboration</p>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"h-5 w-5 rounded-full border border-matrix/50 flex items-center justify-center mr-2\">\n                        <div className=\"h-2.5 w-2.5 bg-yellow-400 rounded-full\"></div>\n                      </div>\n                      <p className=\"text-sm text-dim-gray\">Custom Reward Rules</p>\n                    </div>\n                  </div>\n                  \n                  <a href=\"#\" className=\"text-yellow-400 hover:text-yellow-300 text-sm font-mono flex items-center\">\n                    Start This Path <ChevronRight className=\"ml-1 h-4 w-4\" />\n                  </a>\n                </div>\n              </div>\n            </div>\n            \n            {/* Documentation Feedback */}\n            <div className=\"terminal-card p-6 rounded-lg text-center\">\n              <h2 className=\"text-xl font-mono font-bold text-matrix mb-3\">Documentation Feedback</h2>\n              <p className=\"text-dim-gray mb-6 max-w-xl mx-auto\">\n                Was this documentation helpful? Let us know if you have suggestions for improvements or find any issues.\n              </p>\n              \n              <div className=\"flex justify-center space-x-4\">\n                <Button variant=\"outline\" className=\"border-matrix text-matrix hover:bg-matrix/10\">\n                  <FileText className=\"mr-2 h-4 w-4\" />\n                  Report Issue\n                </Button>\n                <Button variant=\"outline\" className=\"border-matrix text-matrix hover:bg-matrix/10\">\n                  <Book className=\"mr-2 h-4 w-4\" />\n                  Suggest Edit\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":31621},"client/src/pages/find-programs-page.tsx":{"content":"import ProgramsPage from './programs-page';\n\nexport default function FindProgramsPage() {\n  return <ProgramsPage />;\n}","size_bytes":118},"client/src/pages/force-admin.tsx":{"content":"export default function ForceAdmin() {\n  return (\n    <div className=\"min-h-screen bg-black text-green-400 flex items-center justify-center\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-mono mb-4\">ADMIN PANEL ACCESS</h1>\n        <p className=\"text-xl font-mono\">This is the admin login page</p>\n        <p className=\"text-sm font-mono mt-4\">Route: /admin is working</p>\n        \n        <div className=\"mt-8 p-4 border border-green-400\">\n          <h2 className=\"text-lg font-mono mb-2\">Admin Credentials:</h2>\n          <p className=\"font-mono\">Email: admin@cyberhunt.com</p>\n          <p className=\"font-mono\">Password: AdminSecure123!</p>\n        </div>\n        \n        <button \n          onClick={() => {\n            console.log(\"Admin login clicked\");\n            // Simple login form would go here\n          }}\n          className=\"mt-4 px-6 py-2 border border-green-400 bg-green-400/10 text-green-400 font-mono hover:bg-green-400/20\"\n        >\n          LOGIN TO ADMIN\n        </button>\n      </div>\n    </div>\n  );\n}","size_bytes":1054},"client/src/pages/forgot-password-page.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { ArrowLeft, Mail, Terminal, Loader2 } from \"lucide-react\";\nimport { Form, FormControl, FormField, FormItem, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\n\nconst forgotSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n});\n\ntype ForgotPasswordFormValues = z.infer<typeof forgotSchema>;\n\nexport default function ForgotPasswordPage() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [emailSent, setEmailSent] = useState(false);\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const form = useForm<ForgotPasswordFormValues>({\n    resolver: zodResolver(forgotSchema),\n    defaultValues: { email: \"\" },\n  });\n\n  const onSubmit = async (data: ForgotPasswordFormValues) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"/api/forgot-password\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) throw new Error();\n      \n      setEmailSent(true);\n      toast({\n        title: \"Reset Link Sent\",\n        description: \"Check your email for password reset instructions.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send reset link. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground />\n      \n      <div className=\"absolute top-4 left-4 z-20\">\n        <button \n          onClick={() => setLocation(\"/auth\")} \n          className=\"flex items-center gap-2 text-matrix hover:text-matrix-dark transition-colors\"\n        >\n          <ArrowLeft className=\"h-5 w-5\" />\n          <span className=\"text-sm font-mono\">Back to Login</span>\n        </button>\n      </div>\n\n      <div className=\"min-h-screen flex items-center justify-center p-4 relative z-10\">\n        <div className=\"w-full max-w-md p-8 rounded-lg relative overflow-hidden border border-matrix/30 bg-black/80 backdrop-blur-sm\">\n          <div className=\"absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-matrix/0 via-matrix/50 to-matrix/0\" />\n          \n          <div className=\"text-center mb-8\">\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"h-12 w-12 rounded-lg bg-matrix/10 border border-matrix/30 flex items-center justify-center\">\n                <Terminal className=\"h-6 w-6 text-matrix\" />\n              </div>\n            </div>\n            <h1 className=\"text-matrix text-3xl font-mono font-bold mb-2\">Password Reset_</h1>\n            <p className=\"text-dim-gray text-sm\">\n              Enter your email address and we'll send you instructions to reset your password.\n            </p>\n          </div>\n\n          {emailSent ? (\n            <div className=\"space-y-6 text-center\">\n              <div className=\"p-6 rounded-lg bg-matrix/5 border border-matrix/30\">\n                <Mail className=\"h-8 w-8 text-matrix mx-auto mb-4\" />\n                <h2 className=\"text-matrix text-xl font-mono mb-2\">Check Your Inbox</h2>\n                <p className=\"text-dim-gray text-sm\">\n                  If an account exists with this email, you'll receive password reset instructions shortly.\n                </p>\n              </div>\n              <Button \n                onClick={() => setEmailSent(false)}\n                className=\"w-full bg-matrix/10 hover:bg-matrix/20 text-matrix border border-matrix/30\"\n              >\n                Try Another Email\n              </Button>\n            </div>\n          ) : (\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            {...field}\n                            type=\"email\"\n                            className=\"pl-10 bg-black/50 border-matrix/30 text-light-gray font-mono\"\n                            placeholder=\"Enter your email\"\n                            disabled={isLoading}\n                          />\n                          <Mail className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-dim-gray\" />\n                        </div>\n                      </FormControl>\n                      <FormMessage className=\"text-alert-red text-xs\" />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-matrix/10 hover:bg-matrix/20 text-matrix border border-matrix/30\"\n                  disabled={isLoading}\n                >\n                  {isLoading ? (\n                    <span className=\"flex items-center justify-center\">\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      SENDING RESET LINK...\n                    </span>\n                  ) : (\n                    \"SEND RESET LINK\"\n                  )}\n                </Button>\n              </form>\n            </Form>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5767},"client/src/pages/hacktivity-page.tsx":{"content":"\nimport { useState, useMemo } from \"react\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport { Search, Filter, Bug, Shield, Eye, Calendar, User, Building2, Award } from \"lucide-react\";\n\n// Mock data for bug disclosures\nconst mockDisclosures = [\n  {\n    id: 1,\n    title: \"SQL Injection in User Authentication\",\n    bugType: \"SQLi\",\n    status: \"Resolved\",\n    researcher: \"alexhacker\",\n    program: \"TechCorp\",\n    disclosureDate: \"2024-01-15\",\n    reward: 2500,\n    severity: \"High\",\n    description: \"A SQL injection vulnerability was found in the user authentication endpoint allowing unauthorized access to user data.\",\n    cvss: 8.2\n  },\n  {\n    id: 2,\n    title: \"Cross-Site Scripting in Comment System\",\n    bugType: \"XSS\",\n    status: \"Accepted\",\n    researcher: \"sarah_sec\",\n    program: \"SocialApp\",\n    disclosureDate: \"2024-01-12\",\n    reward: 800,\n    severity: \"Medium\",\n    description: \"Stored XSS vulnerability in the comment system allowing execution of malicious scripts.\",\n    cvss: 6.1\n  },\n  {\n    id: 3,\n    title: \"Insecure Direct Object Reference in File Access\",\n    bugType: \"IDOR\",\n    status: \"Resolved\",\n    researcher: \"cyberdev\",\n    program: \"FileShare Pro\",\n    disclosureDate: \"2024-01-10\",\n    reward: 1200,\n    severity: \"High\",\n    description: \"IDOR vulnerability allowing unauthorized access to other users' private files.\",\n    cvss: 7.5\n  },\n  {\n    id: 4,\n    title: \"Remote Code Execution via File Upload\",\n    bugType: \"RCE\",\n    status: \"Resolved\",\n    researcher: \"pentester99\",\n    program: \"WebBuilder\",\n    disclosureDate: \"2024-01-08\",\n    reward: 5000,\n    severity: \"Critical\",\n    description: \"RCE vulnerability through unrestricted file upload allowing server compromise.\",\n    cvss: 9.8\n  },\n  {\n    id: 5,\n    title: \"Authentication Bypass in Admin Panel\",\n    bugType: \"Auth Bypass\",\n    status: \"Accepted\",\n    researcher: \"whitehat_joe\",\n    program: \"AdminSuite\",\n    disclosureDate: \"2024-01-05\",\n    reward: 3000,\n    severity: \"Critical\",\n    description: \"Authentication bypass vulnerability allowing unauthorized access to admin functionality.\",\n    cvss: 9.1\n  },\n  {\n    id: 6,\n    title: \"Information Disclosure in API Response\",\n    bugType: \"Info Disclosure\",\n    status: \"Resolved\",\n    researcher: \"bugfinder\",\n    program: \"APIGateway\",\n    disclosureDate: \"2024-01-03\",\n    reward: 600,\n    severity: \"Low\",\n    description: \"Sensitive information exposed in API responses including internal system details.\",\n    cvss: 4.3\n  }\n];\n\nconst bugTypeIcons = {\n  \"SQLi\": \"💉\",\n  \"XSS\": \"🔗\",\n  \"IDOR\": \"🔐\",\n  \"RCE\": \"💀\",\n  \"Auth Bypass\": \"🚪\",\n  \"Info Disclosure\": \"📄\",\n  \"CSRF\": \"🔄\",\n  \"XXE\": \"📋\"\n};\n\nconst getSeverityColor = (severity: string) => {\n  switch (severity.toLowerCase()) {\n    case \"critical\": return \"text-red-400 bg-red-400/10 border-red-400/30\";\n    case \"high\": return \"text-orange-400 bg-orange-400/10 border-orange-400/30\";\n    case \"medium\": return \"text-yellow-400 bg-yellow-400/10 border-yellow-400/30\";\n    case \"low\": return \"text-blue-400 bg-blue-400/10 border-blue-400/30\";\n    default: return \"text-matrix bg-matrix/10 border-matrix/30\";\n  }\n};\n\nexport default function HacktivityPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedBugType, setSelectedBugType] = useState(\"\");\n  const [selectedStatus, setSelectedStatus] = useState(\"\");\n  const [selectedDisclosure, setSelectedDisclosure] = useState<any>(null);\n\n  const filteredDisclosures = useMemo(() => {\n    return mockDisclosures.filter(disclosure => {\n      const matchesSearch = disclosure.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                          disclosure.researcher.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                          disclosure.program.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesBugType = selectedBugType === \"\" || disclosure.bugType === selectedBugType;\n      const matchesStatus = selectedStatus === \"\" || disclosure.status === selectedStatus;\n      \n      return matchesSearch && matchesBugType && matchesStatus;\n    });\n  }, [searchTerm, selectedBugType, selectedStatus]);\n\n  const uniqueBugTypes = Array.from(new Set(mockDisclosures.map(d => d.bugType)));\n  const uniqueStatuses = Array.from(new Set(mockDisclosures.map(d => d.status)));\n\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground />\n      <Navbar />\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 relative z-10\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-mono font-bold text-matrix mb-2\">Hacktivity</h1>\n          <p className=\"text-dim-gray font-mono\">Public bug bounty disclosures from the community</p>\n        </div>\n\n        {/* Filters */}\n        <div className=\"mb-8 grid grid-cols-1 md:grid-cols-4 gap-4\">\n          {/* Search */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-matrix h-4 w-4\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search disclosures...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-2 bg-terminal border border-matrix/30 rounded-lg text-light-gray font-mono text-sm focus:outline-none focus:border-matrix focus:ring-1 focus:ring-matrix\"\n            />\n          </div>\n\n          {/* Bug Type Filter */}\n          <select\n            value={selectedBugType}\n            onChange={(e) => setSelectedBugType(e.target.value)}\n            className=\"px-4 py-2 bg-terminal border border-matrix/30 rounded-lg text-light-gray font-mono text-sm focus:outline-none focus:border-matrix focus:ring-1 focus:ring-matrix\"\n          >\n            <option value=\"\">All Bug Types</option>\n            {uniqueBugTypes.map(type => (\n              <option key={type} value={type}>{type}</option>\n            ))}\n          </select>\n\n          {/* Status Filter */}\n          <select\n            value={selectedStatus}\n            onChange={(e) => setSelectedStatus(e.target.value)}\n            className=\"px-4 py-2 bg-terminal border border-matrix/30 rounded-lg text-light-gray font-mono text-sm focus:outline-none focus:border-matrix focus:ring-1 focus:ring-matrix\"\n          >\n            <option value=\"\">All Statuses</option>\n            {uniqueStatuses.map(status => (\n              <option key={status} value={status}>{status}</option>\n            ))}\n          </select>\n\n          {/* Clear Filters */}\n          <button\n            onClick={() => {\n              setSearchTerm(\"\");\n              setSelectedBugType(\"\");\n              setSelectedStatus(\"\");\n            }}\n            className=\"px-4 py-2 bg-matrix/10 border border-matrix/30 rounded-lg text-matrix font-mono text-sm hover:bg-matrix/20 transition-all duration-200\"\n          >\n            Clear Filters\n          </button>\n        </div>\n\n        {/* Disclosure Cards */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {filteredDisclosures.map((disclosure) => (\n            <div\n              key={disclosure.id}\n              className=\"terminal-card p-6 rounded-lg border border-matrix/30 hover:border-matrix/50 hover:shadow-glow-sm transition-all duration-300 cursor-pointer\"\n              onClick={() => setSelectedDisclosure(disclosure)}\n            >\n              {/* Header */}\n              <div className=\"flex items-start justify-between mb-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"text-2xl\">{bugTypeIcons[disclosure.bugType] || \"🐛\"}</div>\n                  <div>\n                    <h3 className=\"text-light-gray font-mono text-lg font-semibold mb-1\">\n                      {disclosure.title}\n                    </h3>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className={`px-2 py-1 rounded-full text-xs font-mono border ${getSeverityColor(disclosure.severity)}`}>\n                        {disclosure.severity}\n                      </span>\n                      <span className=\"px-2 py-1 rounded-full text-xs font-mono bg-matrix/10 text-matrix border border-matrix/30\">\n                        {disclosure.bugType}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                \n                {disclosure.reward && (\n                  <div className=\"flex items-center space-x-1 text-warning-yellow\">\n                    <Award className=\"h-4 w-4\" />\n                    <span className=\"font-mono text-sm\">${disclosure.reward}</span>\n                  </div>\n                )}\n              </div>\n\n              {/* Content */}\n              <p className=\"text-dim-gray text-sm mb-4 line-clamp-2\">\n                {disclosure.description}\n              </p>\n\n              {/* Meta Information */}\n              <div className=\"flex items-center justify-between text-xs text-dim-gray font-mono\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex items-center space-x-1\">\n                    <User className=\"h-3 w-3\" />\n                    <span>{disclosure.researcher}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Building2 className=\"h-3 w-3\" />\n                    <span>{disclosure.program}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Calendar className=\"h-3 w-3\" />\n                    <span>{disclosure.disclosureDate}</span>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-1 text-matrix hover:text-matrix-dark\">\n                  <Eye className=\"h-3 w-3\" />\n                  <span>View Details</span>\n                </div>\n              </div>\n\n              {/* Status Badge */}\n              <div className=\"flex justify-end mt-3\">\n                <span className={`px-2 py-1 rounded-full text-xs font-mono ${\n                  disclosure.status === \"Resolved\" \n                    ? \"bg-matrix/10 text-matrix border border-matrix/30\" \n                    : \"bg-warning-yellow/10 text-warning-yellow border border-warning-yellow/30\"\n                }`}>\n                  {disclosure.status}\n                </span>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* No Results */}\n        {filteredDisclosures.length === 0 && (\n          <div className=\"text-center py-12\">\n            <Bug className=\"h-16 w-16 text-dim-gray mx-auto mb-4\" />\n            <h3 className=\"text-xl font-mono text-light-gray mb-2\">No disclosures found</h3>\n            <p className=\"text-dim-gray\">Try adjusting your filters or search terms.</p>\n          </div>\n        )}\n\n        {/* Detailed View Modal */}\n        {selectedDisclosure && (\n          <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center p-4 z-50\">\n            <div className=\"bg-terminal border border-matrix/30 rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n              {/* Modal Header */}\n              <div className=\"p-6 border-b border-matrix/30\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"text-3xl\">{bugTypeIcons[selectedDisclosure.bugType] || \"🐛\"}</div>\n                    <div>\n                      <h2 className=\"text-2xl font-mono text-light-gray font-bold mb-2\">\n                        {selectedDisclosure.title}\n                      </h2>\n                      <div className=\"flex items-center space-x-3\">\n                        <span className={`px-3 py-1 rounded-full text-sm font-mono border ${getSeverityColor(selectedDisclosure.severity)}`}>\n                          {selectedDisclosure.severity} • CVSS {selectedDisclosure.cvss}\n                        </span>\n                        <span className=\"px-3 py-1 rounded-full text-sm font-mono bg-matrix/10 text-matrix border border-matrix/30\">\n                          {selectedDisclosure.bugType}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <button\n                    onClick={() => setSelectedDisclosure(null)}\n                    className=\"text-dim-gray hover:text-light-gray text-2xl font-mono\"\n                  >\n                    ×\n                  </button>\n                </div>\n              </div>\n\n              {/* Modal Content */}\n              <div className=\"p-6\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                  {/* Main Content */}\n                  <div className=\"lg:col-span-2 space-y-6\">\n                    <div>\n                      <h3 className=\"text-lg font-mono text-matrix mb-3\">Vulnerability Description</h3>\n                      <p className=\"text-dim-gray leading-relaxed\">\n                        {selectedDisclosure.description}\n                      </p>\n                    </div>\n\n                    <div>\n                      <h3 className=\"text-lg font-mono text-matrix mb-3\">Technical Details</h3>\n                      <div className=\"bg-deep-black p-4 rounded-lg border border-matrix/20\">\n                        <p className=\"text-dim-gray font-mono text-sm\">\n                          This vulnerability was discovered through security testing and has been responsibly disclosed to the program owner. \n                          The issue has been {selectedDisclosure.status.toLowerCase()} and appropriate security measures have been implemented.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Sidebar */}\n                  <div className=\"space-y-6\">\n                    <div className=\"bg-deep-black p-4 rounded-lg border border-matrix/20\">\n                      <h3 className=\"text-lg font-mono text-matrix mb-4\">Disclosure Info</h3>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-dim-gray text-sm\">Researcher</span>\n                          <span className=\"text-light-gray font-mono text-sm\">{selectedDisclosure.researcher}</span>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-dim-gray text-sm\">Program</span>\n                          <span className=\"text-light-gray font-mono text-sm\">{selectedDisclosure.program}</span>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-dim-gray text-sm\">Date</span>\n                          <span className=\"text-light-gray font-mono text-sm\">{selectedDisclosure.disclosureDate}</span>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-dim-gray text-sm\">Status</span>\n                          <span className={`px-2 py-1 rounded-full text-xs font-mono ${\n                            selectedDisclosure.status === \"Resolved\" \n                              ? \"bg-matrix/10 text-matrix border border-matrix/30\" \n                              : \"bg-warning-yellow/10 text-warning-yellow border border-warning-yellow/30\"\n                          }`}>\n                            {selectedDisclosure.status}\n                          </span>\n                        </div>\n                        {selectedDisclosure.reward && (\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-dim-gray text-sm\">Reward</span>\n                            <span className=\"text-warning-yellow font-mono text-sm\">${selectedDisclosure.reward}</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"bg-deep-black p-4 rounded-lg border border-matrix/20\">\n                      <h3 className=\"text-lg font-mono text-matrix mb-4\">Security Rating</h3>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-dim-gray text-sm\">CVSS Score</span>\n                          <span className=\"text-light-gray font-mono text-sm\">{selectedDisclosure.cvss}</span>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-dim-gray text-sm\">Severity</span>\n                          <span className={`px-2 py-1 rounded-full text-xs font-mono border ${getSeverityColor(selectedDisclosure.severity)}`}>\n                            {selectedDisclosure.severity}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n","size_bytes":17544},"client/src/pages/help-center-page.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport {\n  Search,\n  HelpCircle,\n  Book,\n  FileText,\n  AlertTriangle,\n  Lock,\n  ShieldCheck,\n  CreditCard,\n  Award,\n  MessageCircle,\n  User,\n  Mail,\n  ChevronDown,\n  ChevronRight\n} from \"lucide-react\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function HelpCenterPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  \n  // FAQ categories and items\n  const faqCategories = [\n    {\n      id: \"general\",\n      name: \"General Questions\",\n      icon: <HelpCircle className=\"h-5 w-5 text-matrix\" />,\n      faqs: [\n        {\n          question: \"What is CyberHunt?\",\n          answer: \"CyberHunt is a bug bounty platform that connects security researchers with organizations looking to improve their security posture. Our platform gamifies the bug hunting process, offering rewards, reputation points, and achievements for finding and reporting security vulnerabilities.\"\n        },\n        {\n          question: \"How does CyberHunt differ from other bug bounty platforms?\",\n          answer: \"CyberHunt stands out with its gamified approach to bug bounties. We incorporate elements like achievements, leaderboards, and reputation levels to make vulnerability hunting more engaging and rewarding. Our platform also emphasizes learning and skill development through resources, tutorials, and mentorship opportunities.\"\n        },\n        {\n          question: \"Is CyberHunt free to use?\",\n          answer: \"CyberHunt is free for security researchers to join and participate in public programs. Organizations running bug bounty programs pay for our services, which include program management, triage, and platform features.\"\n        },\n        {\n          question: \"Can I participate if I'm new to security research?\",\n          answer: \"Absolutely! We welcome researchers of all experience levels. We offer resources, guides, and introductory programs specifically designed for newcomers to the field. Our reputation system also helps match you with programs appropriate for your skill level.\"\n        }\n      ]\n    },\n    {\n      id: \"researchers\",\n      name: \"For Security Researchers\",\n      icon: <ShieldCheck className=\"h-5 w-5 text-electric-blue\" />,\n      faqs: [\n        {\n          question: \"How do I get started as a researcher?\",\n          answer: \"To get started, create an account, complete your profile, verify your email, and explore available programs. We recommend beginning with our resources section to familiarize yourself with common vulnerability types and best practices before submitting your first report.\"\n        },\n        {\n          question: \"How does the reputation system work?\",\n          answer: \"Your reputation score increases when your vulnerability reports are accepted and validated. Higher-severity findings award more reputation points. As your reputation grows, you unlock access to invitation-only programs and additional platform features. Your position on the leaderboard is determined by your reputation score.\"\n        },\n        {\n          question: \"How and when do I get paid for my findings?\",\n          answer: \"Payment terms vary by program, but typically bounties are paid after a vulnerability is validated and fixed. Payments are processed through our platform, and you can receive funds via bank transfer, PayPal, or cryptocurrency, depending on your preferences and regional availability.\"\n        },\n        {\n          question: \"What if my report is rejected?\",\n          answer: \"If your report is rejected, you'll receive feedback explaining why. Common reasons include duplicate reports, out-of-scope vulnerabilities, or insufficient information. You can use this feedback to improve future submissions. If you believe a rejection was in error, you can request a review.\"\n        }\n      ]\n    },\n    {\n      id: \"programs\",\n      name: \"For Program Owners\",\n      icon: <Lock className=\"h-5 w-5 text-green-500\" />,\n      faqs: [\n        {\n          question: \"How do I start a bug bounty program?\",\n          answer: \"To launch a program, contact our sales team or create an organization account and follow the program setup process. You'll define the scope, rules, reward structure, and other parameters. Our team can assist with best practices and program optimization to ensure you get the most value.\"\n        },\n        {\n          question: \"What does a typical bug bounty program cost?\",\n          answer: \"Program costs vary based on several factors, including the scope, duration, and level of support required. In addition to platform fees, you'll need to budget for bounty payments. We offer flexible pricing models, including pay-per-vulnerability and subscription-based options.\"\n        },\n        {\n          question: \"How do you ensure quality reports?\",\n          answer: \"Our platform includes a built-in triage process that validates reports before they reach you. Our reputation system also helps filter out low-quality submissions by incentivizing thorough, well-documented reports. Additionally, we offer managed triage services where our experts handle initial validation.\"\n        },\n        {\n          question: \"Can we run a private or invitation-only program?\",\n          answer: \"Yes, you can create private programs visible only to selected researchers or those who meet specific reputation criteria. Private programs give you more control over who can test your systems and allow for a more targeted approach to vulnerability discovery.\"\n        }\n      ]\n    },\n    {\n      id: \"technical\",\n      name: \"Technical Questions\",\n      icon: <AlertTriangle className=\"h-5 w-5 text-yellow-400\" />,\n      faqs: [\n        {\n          question: \"What types of vulnerabilities are typically in scope?\",\n          answer: \"Common in-scope vulnerabilities include SQLi, XSS, CSRF, SSRF, authentication flaws, authorization issues, business logic flaws, and other OWASP Top 10 vulnerabilities. Each program defines its specific scope, which may include or exclude certain vulnerability types.\"\n        },\n        {\n          question: \"How should I format my vulnerability reports?\",\n          answer: \"A good report includes a clear title, detailed description, steps to reproduce, impact assessment, and suggested remediation. Our platform provides a standard template to help structure your reports effectively. Including screenshots or videos demonstrating the vulnerability is highly recommended.\"\n        },\n        {\n          question: \"Do you support API or mobile application testing?\",\n          answer: \"Yes, many programs include APIs and mobile applications within their scope. Our platform supports report formats specific to these technologies, and we provide specialized resources for testing APIs, Android apps, and iOS applications.\"\n        },\n        {\n          question: \"What tools can I use for testing?\",\n          answer: \"You can use standard security testing tools, but always respect the program's rules regarding automated testing. Some programs limit the use of scanners or require prior approval. Our resources section lists recommended tools for various testing scenarios and vulnerability types.\"\n        }\n      ]\n    },\n    {\n      id: \"payment\",\n      name: \"Payment & Rewards\",\n      icon: <CreditCard className=\"h-5 w-5 text-purple-400\" />,\n      faqs: [\n        {\n          question: \"What payment methods are supported?\",\n          answer: \"We support payments via bank transfer, PayPal, and several cryptocurrencies including Bitcoin and Ethereum. Available payment methods may vary by region. You can manage your payment preferences in your account settings.\"\n        },\n        {\n          question: \"How are bounty amounts determined?\",\n          answer: \"Bounty amounts are determined by the program owner based on the severity and impact of the vulnerability. Most programs publish a reward range for different vulnerability types and severity levels. The final amount is at the discretion of the program owner, with guidance from our triage team.\"\n        },\n        {\n          question: \"Are there taxes on bounty payments?\",\n          answer: \"Bounty payments may be subject to taxes depending on your country of residence. We provide basic tax documentation, but we advise consulting with a tax professional regarding your specific situation. You are responsible for reporting and paying any applicable taxes on your earnings.\"\n        },\n        {\n          question: \"What if there's a dispute about a bounty amount?\",\n          answer: \"If you believe a bounty doesn't reflect the severity of your finding, you can request a review. Our mediation team will assess the vulnerability and work with both parties to reach a fair resolution. We strive to ensure researchers are appropriately compensated for their valuable contributions.\"\n        }\n      ]\n    }\n  ];\n  \n  // Help categories\n  const helpCategories = [\n    {\n      title: \"Getting Started\",\n      icon: <Book className=\"h-6 w-6 text-matrix\" />,\n      description: \"New to CyberHunt? Learn the basics and set up your account\",\n      links: [\n        \"Account Setup Guide\",\n        \"Researcher Onboarding\",\n        \"Program Owner Quickstart\",\n        \"Platform Navigation Tutorial\"\n      ]\n    },\n    {\n      title: \"Submitting Reports\",\n      icon: <FileText className=\"h-6 w-6 text-electric-blue\" />,\n      description: \"Learn how to create effective vulnerability reports\",\n      links: [\n        \"Report Writing Best Practices\",\n        \"Severity Classification Guide\",\n        \"Report Template Guide\",\n        \"Common Report Mistakes\"\n      ]\n    },\n    {\n      title: \"Payment & Rewards\",\n      icon: <CreditCard className=\"h-6 w-6 text-green-500\" />,\n      description: \"Everything about bounties, payments, and taxes\",\n      links: [\n        \"Payment Methods Overview\",\n        \"Tax Information Guide\",\n        \"Understanding Bounty Ranges\",\n        \"Payment Troubleshooting\"\n      ]\n    },\n    {\n      title: \"Program Management\",\n      icon: <Lock className=\"h-6 w-6 text-yellow-400\" />,\n      description: \"Resources for running successful bug bounty programs\",\n      links: [\n        \"Program Setup Guide\",\n        \"Scope Definition Best Practices\",\n        \"Reward Structure Guidelines\",\n        \"Triage Process Explained\"\n      ]\n    },\n    {\n      title: \"Reputation System\",\n      icon: <Award className=\"h-6 w-6 text-purple-400\" />,\n      description: \"Understanding how reputation and rankings work\",\n      links: [\n        \"Reputation Points Explained\",\n        \"Leaderboard Ranking Guide\",\n        \"Achievements & Badges\",\n        \"Unlocking Opportunities\"\n      ]\n    },\n    {\n      title: \"Community & Support\",\n      icon: <MessageCircle className=\"h-6 w-6 text-red-400\" />,\n      description: \"Connect with other researchers and get help\",\n      links: [\n        \"Community Guidelines\",\n        \"Discord Server Information\",\n        \"Mentorship Program\",\n        \"Events Calendar\"\n      ]\n    }\n  ];\n  \n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground className=\"opacity-20\" />\n      <Navbar />\n      \n      <main className=\"max-w-6xl mx-auto px-4 py-12 relative z-10\">\n        {/* Hero Section */}\n        <div className=\"terminal-card p-8 rounded-lg mb-12 text-center\">\n          <h1 className=\"text-3xl md:text-4xl font-mono font-bold text-matrix mb-4\">CyberHunt Help Center</h1>\n          <p className=\"text-dim-gray mb-6 max-w-3xl mx-auto\">\n            Find answers to frequently asked questions, tutorials, and resources to help you \n            make the most of CyberHunt's bug bounty platform.\n          </p>\n          \n          <div className=\"max-w-xl mx-auto relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search for help...\"\n              className=\"bg-dark-terminal border-matrix/30 pl-10 h-12 font-mono\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n            />\n            <Search className=\"absolute left-3 top-3.5 h-5 w-5 text-dim-gray pointer-events-none\" />\n          </div>\n        </div>\n        \n        {/* Help Categories */}\n        <div className=\"mb-12\">\n          <h2 className=\"text-2xl font-mono font-bold text-matrix mb-6\">Help Categories</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {helpCategories.map((category, index) => (\n              <div key={index} className=\"terminal-card p-5 rounded-lg border border-matrix/30 hover:bg-matrix/5 transition duration-200\">\n                <div className=\"flex items-start mb-3\">\n                  <div className=\"h-12 w-12 rounded-md bg-terminal border border-matrix/30 flex items-center justify-center mr-4\">\n                    {category.icon}\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-mono text-light-gray\">{category.title}</h3>\n                    <p className=\"text-dim-gray text-sm mb-3\">{category.description}</p>\n                  </div>\n                </div>\n                <ul className=\"space-y-1\">\n                  {category.links.map((link, i) => (\n                    <li key={i} className=\"text-sm\">\n                      <a href=\"#\" className=\"flex items-center text-matrix hover:text-matrix-light\">\n                        <ChevronRight className=\"h-3 w-3 mr-1\" />\n                        {link}\n                      </a>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        {/* FAQ Section */}\n        <div className=\"mb-12\">\n          <h2 className=\"text-2xl font-mono font-bold text-matrix mb-6\">Frequently Asked Questions</h2>\n          \n          <Tabs defaultValue=\"general\" className=\"w-full\">\n            <TabsList className=\"grid grid-cols-2 md:grid-cols-5 gap-2 bg-transparent h-auto p-0 mb-6\">\n              {faqCategories.map((category) => (\n                <TabsTrigger\n                  key={category.id}\n                  value={category.id}\n                  className=\"flex items-center justify-center text-xs md:text-sm bg-terminal border border-matrix/30 data-[state=active]:bg-matrix/10 data-[state=active]:border-matrix data-[state=active]:text-matrix text-dim-gray rounded-md py-2 px-3\"\n                >\n                  {category.icon}\n                  <span className=\"ml-2 hidden md:inline\">{category.name}</span>\n                </TabsTrigger>\n              ))}\n            </TabsList>\n            \n            {faqCategories.map((category) => (\n              <TabsContent key={category.id} value={category.id} className=\"p-0 mt-0\">\n                <div className=\"terminal-card p-5 rounded-lg\">\n                  <h3 className=\"text-xl font-mono text-matrix mb-4\">{category.name} FAQ</h3>\n                  <Accordion type=\"single\" collapsible className=\"w-full\">\n                    {category.faqs.map((faq, index) => (\n                      <AccordionItem key={index} value={`item-${index}`} className=\"border-b border-matrix/20 last:border-0\">\n                        <AccordionTrigger className=\"text-light-gray hover:text-matrix font-mono py-4 text-left\">\n                          {faq.question}\n                        </AccordionTrigger>\n                        <AccordionContent className=\"text-dim-gray text-sm py-4\">\n                          {faq.answer}\n                        </AccordionContent>\n                      </AccordionItem>\n                    ))}\n                  </Accordion>\n                </div>\n              </TabsContent>\n            ))}\n          </Tabs>\n        </div>\n        \n        {/* Contact Section */}\n        <div className=\"terminal-card p-6 rounded-lg mb-6\">\n          <h2 className=\"text-2xl font-mono font-bold text-matrix mb-6\">Still Need Help?</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"p-5 border border-matrix/30 rounded-lg hover:bg-matrix/5 transition duration-200\">\n              <div className=\"flex items-center mb-3\">\n                <div className=\"h-10 w-10 rounded-md bg-terminal border border-matrix/30 flex items-center justify-center mr-3\">\n                  <User className=\"h-5 w-5 text-matrix\" />\n                </div>\n                <h3 className=\"text-lg font-mono text-light-gray\">Customer Support</h3>\n              </div>\n              <p className=\"text-dim-gray text-sm mb-3\">\n                Our support team is available to assist with technical issues, account questions, and general inquiries.\n              </p>\n              <a href=\"#\" className=\"text-matrix hover:text-matrix-light text-sm font-mono\">Open Support Ticket</a>\n            </div>\n            \n            <div className=\"p-5 border border-matrix/30 rounded-lg hover:bg-matrix/5 transition duration-200\">\n              <div className=\"flex items-center mb-3\">\n                <div className=\"h-10 w-10 rounded-md bg-terminal border border-matrix/30 flex items-center justify-center mr-3\">\n                  <Mail className=\"h-5 w-5 text-electric-blue\" />\n                </div>\n                <h3 className=\"text-lg font-mono text-light-gray\">Email Us</h3>\n              </div>\n              <p className=\"text-dim-gray text-sm mb-3\">\n                For detailed inquiries or specific questions, reach out to our team via email for a personalized response.\n              </p>\n              <a href=\"mailto:support@cyberhunt.com\" className=\"text-matrix hover:text-matrix-light text-sm font-mono\">support@cyberhunt.com</a>\n            </div>\n            \n            <div className=\"p-5 border border-matrix/30 rounded-lg hover:bg-matrix/5 transition duration-200\">\n              <div className=\"flex items-center mb-3\">\n                <div className=\"h-10 w-10 rounded-md bg-terminal border border-matrix/30 flex items-center justify-center mr-3\">\n                  <MessageCircle className=\"h-5 w-5 text-green-500\" />\n                </div>\n                <h3 className=\"text-lg font-mono text-light-gray\">Community Forums</h3>\n              </div>\n              <p className=\"text-dim-gray text-sm mb-3\">\n                Join our community forums to connect with other users, share knowledge, and find solutions to common issues.\n              </p>\n              <a href=\"#\" className=\"text-matrix hover:text-matrix-light text-sm font-mono\">Visit Forums</a>\n            </div>\n          </div>\n        </div>\n        \n        {/* Self-Service Tools */}\n        <div className=\"terminal-card p-6 rounded-lg\">\n          <h2 className=\"text-2xl font-mono font-bold text-matrix mb-4\">Self-Service Tools</h2>\n          <p className=\"text-dim-gray mb-6\">\n            Use these tools to troubleshoot common issues and manage your account:\n          </p>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <a href=\"#\" className=\"flex items-center p-3 border border-matrix/30 rounded-lg hover:bg-matrix/5 transition duration-200\">\n              <div className=\"h-8 w-8 rounded-md bg-terminal border border-matrix/30 flex items-center justify-center mr-3\">\n                <User className=\"h-4 w-4 text-matrix\" />\n              </div>\n              <span className=\"text-sm font-mono text-light-gray\">Account Recovery</span>\n            </a>\n            <a href=\"#\" className=\"flex items-center p-3 border border-matrix/30 rounded-lg hover:bg-matrix/5 transition duration-200\">\n              <div className=\"h-8 w-8 rounded-md bg-terminal border border-matrix/30 flex items-center justify-center mr-3\">\n                <Lock className=\"h-4 w-4 text-electric-blue\" />\n              </div>\n              <span className=\"text-sm font-mono text-light-gray\">Reset Password</span>\n            </a>\n            <a href=\"#\" className=\"flex items-center p-3 border border-matrix/30 rounded-lg hover:bg-matrix/5 transition duration-200\">\n              <div className=\"h-8 w-8 rounded-md bg-terminal border border-matrix/30 flex items-center justify-center mr-3\">\n                <CreditCard className=\"h-4 w-4 text-green-500\" />\n              </div>\n              <span className=\"text-sm font-mono text-light-gray\">Payment Status</span>\n            </a>\n            <a href=\"#\" className=\"flex items-center p-3 border border-matrix/30 rounded-lg hover:bg-matrix/5 transition duration-200\">\n              <div className=\"h-8 w-8 rounded-md bg-terminal border border-matrix/30 flex items-center justify-center mr-3\">\n                <FileText className=\"h-4 w-4 text-yellow-400\" />\n              </div>\n              <span className=\"text-sm font-mono text-light-gray\">API Documentation</span>\n            </a>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":21112},"client/src/pages/landing-page.tsx":{"content":"import { Link, Redirect } from \"wouter\";\nimport { ArrowRight, Shield, Bug, Trophy, Lock } from \"lucide-react\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport default function LandingPage() {\n  const { user } = useAuth();\n\n  // If user is logged in, redirect to dashboard\n  if (user) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground />\n\n      {/* Header/Navigation */}\n      <header className=\"relative z-10 border-b border-matrix/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center\">\n              <span className=\"text-matrix text-xl font-mono font-bold\">CyberHunt_</span>\n            </div>\n            <nav className=\"hidden md:flex space-x-8\">\n              <a href=\"#features\" className=\"text-dim-gray hover:text-matrix font-mono text-sm\">Features</a>\n              <a href=\"#how-it-works\" className=\"text-dim-gray hover:text-matrix font-mono text-sm\">How It Works</a>\n              <a href=\"#programs\" className=\"text-dim-gray hover:text-matrix font-mono text-sm\">Programs</a>\n            </nav>\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/auth\">\n                <Button variant=\"outline\" className=\"border-matrix/50 text-matrix hover:bg-matrix/10 font-mono text-sm\">\n                  Login\n                </Button>\n              </Link>\n              <Link href=\"/auth?mode=register\">\n                <Button className=\"glow-button font-mono text-sm\">\n                  Register\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"relative z-10 pt-20 pb-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h1 className=\"text-4xl md:text-5xl lg:text-6xl font-mono font-bold text-light-gray mb-6\">\n                <span className=\"text-matrix\">Secure</span> the Digital Frontier\n              </h1>\n              <p className=\"text-dim-gray text-lg mb-8\">\n                Join the elite network of ethical hackers hunting for vulnerabilities and earning rewards \n                on the world's first truly immersive bug bounty platform.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Link href=\"/auth\">\n                  <Button className=\"glow-button text-base font-mono py-6 px-8\">\n                    Start Hacking <ArrowRight className=\"ml-2 h-5 w-5\" />\n                  </Button>\n                </Link>\n                <a href=\"#how-it-works\">\n                  <Button variant=\"outline\" className=\"border-matrix/50 text-matrix hover:bg-matrix/10 text-base font-mono py-6 px-8\">\n                    Learn More\n                  </Button>\n                </a>\n              </div>\n            </div>\n            <div className=\"terminal-card p-8 rounded-lg border border-matrix/30 animate-pulse-glow\">\n              <div className=\"terminal-header mb-6\"></div>\n              <pre className=\"text-matrix font-mono text-sm\">\n                <code>\n{`> initializing cyberhunt protocol\n> scanning target_systems\n> bypassing security.layer_1\n> accessing_protected_data\n> vulnerability.detected\n> exploit.confirmed\n> payout.initiated\n> mission.complete`}\n                </code>\n              </pre>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Stripe */}\n      <section className=\"relative z-10 bg-terminal border-y border-matrix/30 py-10\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n            <div className=\"text-center\">\n              <p className=\"text-matrix font-mono text-2xl md:text-3xl font-bold\">250+</p>\n              <p className=\"text-dim-gray font-mono text-sm\">Active Programs</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-matrix font-mono text-2xl md:text-3xl font-bold\">$1.5M+</p>\n              <p className=\"text-dim-gray font-mono text-sm\">Paid Rewards</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-matrix font-mono text-2xl md:text-3xl font-bold\">5,000+</p>\n              <p className=\"text-dim-gray font-mono text-sm\">Hackers</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-matrix font-mono text-2xl md:text-3xl font-bold\">12,000+</p>\n              <p className=\"text-dim-gray font-mono text-sm\">Fixed Vulnerabilities</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features */}\n      <section id=\"features\" className=\"relative z-10 py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-mono font-bold text-light-gray text-center mb-12\">\n            <span className=\"text-matrix\">_</span> Platform Features\n          </h2>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"terminal-card p-6 rounded-lg border border-matrix/30 hover:animate-pulse-glow\">\n              <Shield className=\"text-matrix h-10 w-10 mb-4\" />\n              <h3 className=\"text-xl font-mono font-bold text-light-gray mb-3\">Secure Submission</h3>\n              <p className=\"text-dim-gray\">\n                Submit vulnerabilities through our encrypted pipeline with advanced security measures to protect sensitive data.\n              </p>\n            </div>\n\n            <div className=\"terminal-card p-6 rounded-lg border border-matrix/30 hover:animate-pulse-glow\">\n              <Bug className=\"text-matrix h-10 w-10 mb-4\" />\n              <h3 className=\"text-xl font-mono font-bold text-light-gray mb-3\">Intelligent Matching</h3>\n              <p className=\"text-dim-gray\">\n                Our algorithm matches your skills with the right programs to maximize your success rate and earnings.\n              </p>\n            </div>\n\n            <div className=\"terminal-card p-6 rounded-lg border border-matrix/30 hover:animate-pulse-glow\">\n              <Trophy className=\"text-matrix h-10 w-10 mb-4\" />\n              <h3 className=\"text-xl font-mono font-bold text-light-gray mb-3\">Fast Payouts</h3>\n              <p className=\"text-dim-gray\">\n                Receive rewards quickly through multiple payout options, with the industry's fastest processing times.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works */}\n      <section id=\"how-it-works\" className=\"relative z-10 py-20 bg-terminal border-y border-matrix/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-mono font-bold text-light-gray text-center mb-12\">\n            <span className=\"text-matrix\">_</span> How It Works\n          </h2>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"bg-black/50 p-6 rounded-lg border border-matrix/20 relative\">\n              <div className=\"absolute -top-4 -left-4 w-8 h-8 rounded-full bg-matrix/20 flex items-center justify-center border border-matrix font-mono text-matrix\">1</div>\n              <h3 className=\"text-xl font-mono font-bold text-light-gray mb-3 mt-2\">Choose Program</h3>\n              <p className=\"text-dim-gray\">\n                Browse available bug bounty programs and select those matching your expertise and interests.\n              </p>\n            </div>\n\n            <div className=\"bg-black/50 p-6 rounded-lg border border-matrix/20 relative\">\n              <div className=\"absolute -top-4 -left-4 w-8 h-8 rounded-full bg-matrix/20 flex items-center justify-center border border-matrix font-mono text-matrix\">2</div>\n              <h3 className=\"text-xl font-mono font-bold text-light-gray mb-3 mt-2\">Find Vulnerabilities</h3>\n              <p className=\"text-dim-gray\">\n                Use your skills to identify security vulnerabilities within the scope of the program.\n              </p>\n            </div>\n\n            <div className=\"bg-black/50 p-6 rounded-lg border border-matrix/20 relative\">\n              <div className=\"absolute -top-4 -left-4 w-8 h-8 rounded-full bg-matrix/20 flex items-center justify-center border border-matrix font-mono text-matrix\">3</div>\n              <h3 className=\"text-xl font-mono font-bold text-light-gray mb-3 mt-2\">Submit & Get Paid</h3>\n              <p className=\"text-dim-gray\">\n                Submit detailed reports through our platform and receive rewards for valid findings.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"text-center mt-12\">\n            <Link href=\"/auth\">\n              <Button className=\"glow-button text-base font-mono py-6 px-8\">\n                Get Started Now <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Programs */}\n      <section id=\"programs\" className=\"relative z-10 py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-mono font-bold text-light-gray text-center mb-12\">\n            <span className=\"text-matrix\">_</span> Featured Programs\n          </h2>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"terminal-card p-6 rounded-lg border border-matrix/30\">\n              <div className=\"flex items-start mb-4\">\n                <div className=\"h-12 w-12 rounded-md bg-terminal p-2 mr-4 border border-matrix/30 flex items-center justify-center\">\n                  <span className=\"text-matrix font-mono text-lg\">SC</span>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-mono text-light-gray\">SecureCorp</h3>\n                  <span className=\"text-xs font-mono bg-matrix/10 text-matrix px-2 py-1 rounded-full\">\n                    Active\n                  </span>\n                </div>\n              </div>\n              <p className=\"text-sm text-dim-gray mb-4\">Enterprise security solutions with critical infrastructure protection needs.</p>\n              <div className=\"flex flex-wrap gap-2 mb-4\">\n                <span className=\"text-xs bg-surface px-2 py-1 rounded text-dim-gray font-mono\">Web</span>\n                <span className=\"text-xs bg-surface px-2 py-1 rounded text-dim-gray font-mono\">API</span>\n                <span className=\"text-xs bg-surface px-2 py-1 rounded text-dim-gray font-mono\">Mobile</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <span className=\"text-xs text-dim-gray font-mono\">Rewards: </span> \n                  <span className=\"text-xs text-warning-yellow font-mono\">$500-$10,000</span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"terminal-card p-6 rounded-lg border border-matrix/30\">\n              <div className=\"flex items-start mb-4\">\n                <div className=\"h-12 w-12 rounded-md bg-terminal p-2 mr-4 border border-matrix/30 flex items-center justify-center\">\n                  <span className=\"text-matrix font-mono text-lg\">FN</span>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-mono text-light-gray\">FinNet</h3>\n                  <span className=\"text-xs font-mono bg-matrix/10 text-matrix px-2 py-1 rounded-full\">\n                    Active\n                  </span>\n                </div>\n              </div>\n              <p className=\"text-sm text-dim-gray mb-4\">Financial technology platform handling sensitive transaction data.</p>\n              <div className=\"flex flex-wrap gap-2 mb-4\">\n                <span className=\"text-xs bg-surface px-2 py-1 rounded text-dim-gray font-mono\">Web</span>\n                <span className=\"text-xs bg-surface px-2 py-1 rounded text-dim-gray font-mono\">API</span>\n                <span className=\"text-xs bg-surface px-2 py-1 rounded text-dim-gray font-mono\">Network</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <span className=\"text-xs text-dim-gray font-mono\">Rewards: </span> \n                  <span className=\"text-xs text-warning-yellow font-mono\">$1,000-$25,000</span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"terminal-card p-6 rounded-lg border border-matrix/30\">\n              <div className=\"flex items-start mb-4\">\n                <div className=\"h-12 w-12 rounded-md bg-terminal p-2 mr-4 border border-matrix/30 flex items-center justify-center\">\n                  <span className=\"text-matrix font-mono text-lg\">DT</span>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-mono text-light-gray\">DataTrust</h3>\n                  <span className=\"text-xs font-mono bg-matrix/10 text-matrix px-2 py-1 rounded-full\">\n                    Active\n                  </span>\n                </div>\n              </div>\n              <p className=\"text-sm text-dim-gray mb-4\">Cloud storage provider with emphasis on encrypted user data.</p>\n              <div className=\"flex flex-wrap gap-2 mb-4\">\n                <span className=\"text-xs bg-surface px-2 py-1 rounded text-dim-gray font-mono\">Cloud</span>\n                <span className=\"text-xs bg-surface px-2 py-1 rounded text-dim-gray font-mono\">API</span>\n                <span className=\"text-xs bg-surface px-2 py-1 rounded text-dim-gray font-mono\">Web</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <span className=\"text-xs text-dim-gray font-mono\">Rewards: </span>\n                  <span className=\"text-xs text-warning-yellow font-mono\">$500-$15,000</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"text-center mt-8\">\n            <Link href=\"/auth?mode=register\">\n              <span className=\"text-matrix hover:text-matrix-dark text-sm font-mono cursor-pointer\">\n                View All Programs →\n              </span>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"relative z-10 py-20 bg-black/50 border-y border-matrix/30\">\n        <div className=\"max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <Lock className=\"text-matrix h-12 w-12 mx-auto mb-6\" />\n          <h2 className=\"text-3xl font-mono font-bold text-light-gray mb-6\">\n            Ready to Join the Elite?\n          </h2>\n          <p className=\"text-dim-gray text-lg mb-8\">\n            Create your account today and start finding vulnerabilities that others miss. \n            Join thousands of ethical hackers making the digital world safer.\n          </p>\n          <Link href=\"/auth?mode=register\">\n            <Button className=\"glow-button text-base font-mono py-6 px-8\">\n              Create Account <ArrowRight className=\"ml-2 h-5 w-5\" />\n            </Button>\n          </Link>\n        </div>\n      </section>\n\n      {/* Resources Section */}\n      <section className=\"relative z-10 py-20 bg-terminal border-y border-matrix/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-mono font-bold text-light-gray text-center mb-12\">\n            <span className=\"text-matrix\">_</span> Resources\n          </h2>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <Link href=\"/documentation\">\n              <div className=\"terminal-card p-6 rounded-lg border border-matrix/30 hover:bg-surface/50 transition-all\">\n                <h3 className=\"text-xl font-mono text-matrix mb-4\">Documentation</h3>\n                <p className=\"text-dim-gray\">Comprehensive guides and API references for using our platform.</p>\n              </div>\n            </Link>\n\n            <Link href=\"/help-center\">\n              <div className=\"terminal-card p-6 rounded-lg border border-matrix/30 hover:bg-surface/50 transition-all\">\n                <h3 className=\"text-xl font-mono text-matrix mb-4\">Help Center</h3>\n                <p className=\"text-dim-gray\">Get answers to common questions and learn how to use our features.</p>\n              </div>\n            </Link>\n\n            <Link href=\"/blog\">\n              <div className=\"terminal-card p-6 rounded-lg border border-matrix/30 hover:bg-surface/50 transition-all\">\n                <h3 className=\"text-xl font-mono text-matrix mb-4\">Blog</h3>\n                <p className=\"text-dim-gray\">Latest news, tutorials, and insights from our security experts.</p>\n              </div>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Legal & About Section */}\n      <section className=\"relative z-10 py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-mono font-bold text-light-gray text-center mb-12\">\n            <span className=\"text-matrix\">_</span> Legal & About\n          </h2>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <Link href=\"/about\">\n              <div className=\"terminal-card p-6 rounded-lg border border-matrix/30 hover:bg-surface/50 transition-all\">\n                <h3 className=\"text-xl font-mono text-matrix mb-4\">About Us</h3>\n                <p className=\"text-dim-gray\">Learn about our mission, team, and commitment to security.</p>\n              </div>\n            </Link>\n\n            <Link href=\"/legal\">\n              <div className=\"terminal-card p-6 rounded-lg border border-matrix/30 hover:bg-surface/50 transition-all\">\n                <h3 className=\"text-xl font-mono text-matrix mb-4\">Legal Information</h3>\n                <p className=\"text-dim-gray\">Important legal documents and compliance information.</p>\n              </div>\n            </Link>\n\n            <Link href=\"/security\">\n              <div className=\"terminal-card p-6 rounded-lg border border-matrix/30 hover:bg-surface/50 transition-all\">\n                <h3 className=\"text-xl font-mono text-matrix mb-4\">Security</h3>\n                <p className=\"text-dim-gray\">Our security practices and vulnerability disclosure policy.</p>\n              </div>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"relative z-10 py-12 border-t border-matrix/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <div className=\"mb-6 md:mb-0\">\n              <span className=\"text-matrix text-xl font-mono font-bold\">CyberHunt_</span>\n              <p className=\"text-dim-gray text-sm mt-2\">The elite bug bounty platform</p>\n            </div>\n            <div className=\"flex flex-wrap gap-8\">\n              <div>\n                <h4 className=\"text-light-gray font-mono text-sm mb-3\">Links</h4>\n                <ul className=\"space-y-2\">\n                  <li><a href=\"#\" className=\"text-dim-gray hover:text-matrix text-xs font-mono\">About</a></li>\n                  <li><a href=\"#\" className=\"text-dim-gray hover:text-matrix text-xs font-mono\">Programs</a></li>\n                  <li><a href=\"#\" className=\"text-dim-gray hover:text-matrix text-xs font-mono\">Leaderboard</a></li>\n                </ul>\n              </div>\n              <div>\n                <h4 className=\"text-light-gray font-mono text-sm mb-3\">Resources</h4>\n                <ul className=\"space-y-2\">\n                  <li><a href=\"#\" className=\"text-dim-gray hover:text-matrix text-xs font-mono\">Help Center</a></li>\n                  <li><a href=\"#\" className=\"text-dim-gray hover:text-matrix text-xs font-mono\">Blog</a></li>\n                  <li><a href=\"#\" className=\"text-dim-gray hover:text-matrix text-xs font-mono\">Documentation</a></li>\n                </ul>\n              </div>\n              <div>\n                <h4 className=\"text-light-gray font-mono text-sm mb-3\">Legal</h4>\n                <ul className=\"space-y-2\">\n                  <li><a href=\"#\" className=\"text-dim-gray hover:text-matrix text-xs font-mono\">Privacy</a></li>\n                  <li><a href=\"#\" className=\"text-dim-gray hover:text-matrix text-xs font-mono\">Terms</a></li>\n                  <li><a href=\"#\" className=\"text-dim-gray hover:text-matrix text-xs font-mono\">Security</a></li>\n                </ul>\n              </div>\n            </div>\n          </div>\n          <div className=\"border-t border-matrix/20 mt-8 pt-8 text-center\">\n            <p className=\"text-dim-gray text-xs font-mono\">\n              © {new Date().getFullYear()} CyberHunt. All rights reserved. <span className=\"text-matrix\">|</span> Hack The Planet.\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":21245},"client/src/pages/leaderboard-page.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link } from \"wouter\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport {\n  Search,\n  Award,\n  User,\n  ChevronRight,\n  ChevronUp,\n  ChevronDown,\n  Code,\n  Shield,\n  Target,\n  Trophy,\n  Zap,\n  Calendar,\n  Filter,\n  Clock,\n  Check\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { User as UserType } from \"@shared/schema\";\n\n// Achievement definitions\nconst achievements = [\n  {\n    id: \"first_blood\",\n    name: \"First Blood\",\n    description: \"Submit your first valid vulnerability\",\n    icon: <Zap className=\"h-5 w-5 text-yellow-400\" />,\n    color: \"text-yellow-400\",\n  },\n  {\n    id: \"bug_hunter\",\n    name: \"Bug Hunter\",\n    description: \"Find 10 confirmed vulnerabilities\",\n    icon: <Target className=\"h-5 w-5 text-green-500\" />,\n    color: \"text-green-500\",\n  },\n  {\n    id: \"elite_hacker\",\n    name: \"Elite Hacker\",\n    description: \"Find a critical vulnerability that earns you a top bounty\",\n    icon: <Trophy className=\"h-5 w-5 text-orange-500\" />,\n    color: \"text-orange-500\",\n  },\n  {\n    id: \"code_ninja\",\n    name: \"Code Ninja\",\n    description: \"Find 5 different types of vulnerabilities across multiple programs\",\n    icon: <Code className=\"h-5 w-5 text-electric-blue\" />,\n    color: \"text-electric-blue\",\n  },\n  {\n    id: \"security_sentinel\",\n    name: \"Security Sentinel\",\n    description: \"Maintain activity for 3 consecutive months\",\n    icon: <Shield className=\"h-5 w-5 text-purple-400\" />,\n    color: \"text-purple-400\",\n  }\n];\n\n// Mock leaderboard data\nconst mockLeaderboard = Array(50).fill(0).map((_, index) => ({\n  id: index + 1,\n  username: `hacker${index + 1}`,\n  fullName: `${[\"Alice\", \"Bob\", \"Charlie\", \"Dave\", \"Eve\", \"Frank\", \"Grace\", \"Heidi\", \"Ivan\", \"Judy\"][index % 10]} ${[\"Smith\", \"Jones\", \"Garcia\", \"Miller\", \"Davis\", \"Rodriguez\", \"Martinez\", \"Hernandez\", \"Lopez\", \"Gonzalez\"][index % 10]}`,\n  reputation: 10000 - (index * 150) + Math.floor(Math.random() * 100),\n  level: Math.max(1, Math.floor((10000 - (index * 150)) / 1000)),\n  rank: index + 1,\n  submissionCount: Math.floor(Math.random() * 50) + 10,\n  acceptedCount: Math.floor(Math.random() * 40) + 5,\n  achievements: Array(5).fill(0).map(() => achievements[Math.floor(Math.random() * achievements.length)].id)\n    .filter((value, i, self) => self.indexOf(value) === i) // Remove duplicates\n    .slice(0, Math.floor(Math.random() * 4) + 1), // Random number of achievements (1-4)\n  topProgram: [\"SecureTech Web\", \"PaySecure Gateway\", \"CloudStack Infrastructure\", \"HealthTrack Mobile\", \"NetSecure IoT\"][Math.floor(Math.random() * 5)],\n  lastActive: new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000), // Random date in last 30 days\n}));\n\n// Calculate tier based on reputation\nconst calculateTier = (reputation: number) => {\n  if (reputation >= 8000) return { name: \"Elite\", color: \"text-yellow-400\" };\n  if (reputation >= 5000) return { name: \"Diamond\", color: \"text-electric-blue\" };\n  if (reputation >= 3000) return { name: \"Platinum\", color: \"text-purple-400\" };\n  if (reputation >= 1500) return { name: \"Gold\", color: \"text-orange-400\" };\n  if (reputation >= 800) return { name: \"Silver\", color: \"text-gray-400\" };\n  return { name: \"Bronze\", color: \"text-amber-600\" };\n};\n\n// Time period options\nconst timePeriods = [\n  { id: \"all_time\", name: \"All Time\" },\n  { id: \"this_month\", name: \"This Month\" },\n  { id: \"this_year\", name: \"This Year\" },\n  { id: \"last_30_days\", name: \"Last 30 Days\" },\n  { id: \"last_90_days\", name: \"Last 90 Days\" }\n];\n\nexport default function LeaderboardPage() {\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"global\");\n  const [timePeriod, setTimePeriod] = useState(\"all_time\");\n  const [sortBy, setSortBy] = useState(\"reputation\");\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"desc\");\n  \n  // Fetch leaderboard data\n  const { data: leaderboard = [], isLoading } = useQuery({\n    queryKey: [\"/api/users/leaderboard\", timePeriod],\n    queryFn: async () => {\n      // In a real implementation, this would fetch from the API with the time period\n      // For now, return the mock data after a small delay to simulate network\n      await new Promise(resolve => setTimeout(resolve, 500));\n      return mockLeaderboard;\n    }\n  });\n  \n  // Filter users based on search query\n  const filteredUsers = leaderboard.filter(user => \n    searchQuery === \"\" || \n    user.username.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    user.fullName.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n  \n  // Sort users based on selected sort option and order\n  const sortedUsers = [...filteredUsers].sort((a, b) => {\n    let comparison = 0;\n    \n    if (sortBy === \"reputation\") {\n      comparison = a.reputation - b.reputation;\n    } else if (sortBy === \"submissions\") {\n      comparison = a.submissionCount - b.submissionCount;\n    } else if (sortBy === \"acceptance_rate\") {\n      const rateA = a.submissionCount > 0 ? a.acceptedCount / a.submissionCount : 0;\n      const rateB = b.submissionCount > 0 ? b.acceptedCount / b.submissionCount : 0;\n      comparison = rateA - rateB;\n    } else if (sortBy === \"level\") {\n      comparison = a.level - b.level;\n    } else if (sortBy === \"achievements\") {\n      comparison = a.achievements.length - b.achievements.length;\n    } else if (sortBy === \"last_active\") {\n      comparison = new Date(a.lastActive).getTime() - new Date(b.lastActive).getTime();\n    }\n    \n    return sortOrder === \"desc\" ? -comparison : comparison;\n  });\n  \n  const toggleSortOrder = () => {\n    setSortOrder(sortOrder === \"desc\" ? \"asc\" : \"desc\");\n  };\n  \n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground className=\"opacity-20\" />\n      <Navbar />\n      \n      <main className=\"max-w-7xl mx-auto px-4 py-12 relative z-10\">\n        {/* Header Section */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-mono font-bold text-matrix mb-4\">Hacker Leaderboard</h1>\n          <p className=\"text-dim-gray max-w-3xl\">\n            Discover the top security researchers on CyberHunt ranked by reputation, submissions, and other metrics.\n            Compete for glory, recognition, and exclusive opportunities.\n          </p>\n        </div>\n        \n        {/* Top Hackers Highlight */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-12\">\n          {sortedUsers.slice(0, 3).map((user, index) => {\n            const tier = calculateTier(user.reputation);\n            return (\n              <Card key={user.id} className={`bg-terminal border-matrix/30 ${index === 0 ? 'border-yellow-400/50' : index === 1 ? 'border-electric-blue/50' : 'border-green-500/50'}`}>\n                <CardContent className=\"p-0\">\n                  <div className=\"p-6 text-center relative\">\n                    <div className={`absolute top-4 left-4 rounded-full h-8 w-8 flex items-center justify-center ${\n                      index === 0 ? 'bg-yellow-400/20 text-yellow-400' : \n                      index === 1 ? 'bg-electric-blue/20 text-electric-blue' : \n                      'bg-green-500/20 text-green-500'\n                    }`}>\n                      <Trophy className=\"h-4 w-4\" />\n                    </div>\n                    \n                    <div className=\"mb-4 flex justify-center\">\n                      <Avatar className=\"h-20 w-20 border-2 border-matrix\">\n                        <AvatarFallback className=\"bg-matrix/20 text-matrix text-xl\">\n                          {user.username.substring(0, 2).toUpperCase()}\n                        </AvatarFallback>\n                      </Avatar>\n                    </div>\n                    \n                    <div className=\"mb-2\">\n                      <h3 className=\"text-xl font-mono text-light-gray hover:text-matrix\">\n                        <Link href={`/profile/${user.id}`}>\n                          <a>{user.username}</a>\n                        </Link>\n                      </h3>\n                      <p className=\"text-sm text-dim-gray\">{user.fullName}</p>\n                    </div>\n                    \n                    <div className=\"mb-4\">\n                      <Badge variant={index === 0 ? \"outline\" : \"secondary\"} className=\"bg-matrix/10 border-matrix/30 text-matrix\">\n                        <Award className=\"mr-1 h-3.5 w-3.5\" />\n                        Rank #{user.rank}\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-3 gap-2 mb-4\">\n                      <div className=\"text-center\">\n                        <p className=\"text-2xl font-mono text-matrix\">{user.reputation.toLocaleString()}</p>\n                        <p className=\"text-xs text-dim-gray\">Reputation</p>\n                      </div>\n                      <div className=\"text-center\">\n                        <p className=\"text-2xl font-mono text-matrix\">{user.level}</p>\n                        <p className=\"text-xs text-dim-gray\">Level</p>\n                      </div>\n                      <div className=\"text-center\">\n                        <p className=\"text-2xl font-mono text-matrix\">{user.acceptedCount}</p>\n                        <p className=\"text-xs text-dim-gray\">Accepted</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex flex-wrap gap-1 justify-center mb-4\">\n                      {user.achievements.slice(0, 3).map((id) => {\n                        const achievement = achievements.find(a => a.id === id);\n                        return achievement ? (\n                          <div \n                            key={id} \n                            className=\"h-8 w-8 rounded-full bg-terminal border border-matrix/30 flex items-center justify-center\"\n                            title={achievement.name}\n                          >\n                            {achievement.icon}\n                          </div>\n                        ) : null;\n                      })}\n                      {user.achievements.length > 3 && (\n                        <div className=\"h-8 w-8 rounded-full bg-terminal border border-matrix/30 flex items-center justify-center text-dim-gray text-xs\">\n                          +{user.achievements.length - 3}\n                        </div>\n                      )}\n                    </div>\n                    \n                    <div className={`text-sm ${tier.color}`}>\n                      {tier.name} Tier Hacker\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n        \n        {/* Search and Filters */}\n        <div className=\"terminal-card p-6 rounded-lg mb-8\">\n          <div className=\"flex flex-col lg:flex-row gap-4 mb-6\">\n            <div className=\"relative flex-grow\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search hackers by username or name...\"\n                className=\"bg-dark-terminal border-matrix/30 pl-10 h-12 font-mono\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n              />\n              <Search className=\"absolute left-3 top-3.5 h-5 w-5 text-dim-gray pointer-events-none\" />\n            </div>\n            \n            <div className=\"flex gap-3\">\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"outline\" className=\"border-matrix/30 text-light-gray whitespace-nowrap\">\n                    <Calendar className=\"mr-2 h-4 w-4\" />\n                    {timePeriods.find(p => p.id === timePeriod)?.name || \"All Time\"}\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-56 bg-terminal border-matrix/30\">\n                  {timePeriods.map((period) => (\n                    <DropdownMenuItem \n                      key={period.id}\n                      className={`text-light-gray hover:text-matrix ${timePeriod === period.id ? 'bg-matrix/10 text-matrix' : ''}`}\n                      onClick={() => setTimePeriod(period.id)}\n                    >\n                      {timePeriod === period.id && <Check className=\"mr-2 h-4 w-4\" />}\n                      {period.name}\n                    </DropdownMenuItem>\n                  ))}\n                </DropdownMenuContent>\n              </DropdownMenu>\n              \n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"outline\" className=\"border-matrix/30 text-light-gray\">\n                    <Filter className=\"mr-2 h-4 w-4\" />\n                    Sort By\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-56 bg-terminal border-matrix/30\">\n                  <DropdownMenuItem \n                    className={`text-light-gray hover:text-matrix ${sortBy === 'reputation' ? 'bg-matrix/10 text-matrix' : ''}`}\n                    onClick={() => setSortBy('reputation')}\n                  >\n                    <div className=\"flex items-center justify-between w-full\">\n                      <div className=\"flex items-center\">\n                        {sortBy === 'reputation' && <Check className=\"mr-2 h-4 w-4\" />}\n                        Reputation\n                      </div>\n                      {sortBy === 'reputation' && (\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          className=\"h-6 w-6 p-0\"\n                          onClick={(e) => { e.stopPropagation(); toggleSortOrder(); }}\n                        >\n                          {sortOrder === 'desc' ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronUp className=\"h-4 w-4\" />}\n                        </Button>\n                      )}\n                    </div>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem \n                    className={`text-light-gray hover:text-matrix ${sortBy === 'submissions' ? 'bg-matrix/10 text-matrix' : ''}`}\n                    onClick={() => setSortBy('submissions')}\n                  >\n                    <div className=\"flex items-center justify-between w-full\">\n                      <div className=\"flex items-center\">\n                        {sortBy === 'submissions' && <Check className=\"mr-2 h-4 w-4\" />}\n                        Submissions Count\n                      </div>\n                      {sortBy === 'submissions' && (\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          className=\"h-6 w-6 p-0\"\n                          onClick={(e) => { e.stopPropagation(); toggleSortOrder(); }}\n                        >\n                          {sortOrder === 'desc' ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronUp className=\"h-4 w-4\" />}\n                        </Button>\n                      )}\n                    </div>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem \n                    className={`text-light-gray hover:text-matrix ${sortBy === 'level' ? 'bg-matrix/10 text-matrix' : ''}`}\n                    onClick={() => setSortBy('level')}\n                  >\n                    <div className=\"flex items-center justify-between w-full\">\n                      <div className=\"flex items-center\">\n                        {sortBy === 'level' && <Check className=\"mr-2 h-4 w-4\" />}\n                        Level\n                      </div>\n                      {sortBy === 'level' && (\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          className=\"h-6 w-6 p-0\"\n                          onClick={(e) => { e.stopPropagation(); toggleSortOrder(); }}\n                        >\n                          {sortOrder === 'desc' ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronUp className=\"h-4 w-4\" />}\n                        </Button>\n                      )}\n                    </div>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem \n                    className={`text-light-gray hover:text-matrix ${sortBy === 'acceptance_rate' ? 'bg-matrix/10 text-matrix' : ''}`}\n                    onClick={() => setSortBy('acceptance_rate')}\n                  >\n                    <div className=\"flex items-center justify-between w-full\">\n                      <div className=\"flex items-center\">\n                        {sortBy === 'acceptance_rate' && <Check className=\"mr-2 h-4 w-4\" />}\n                        Acceptance Rate\n                      </div>\n                      {sortBy === 'acceptance_rate' && (\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          className=\"h-6 w-6 p-0\"\n                          onClick={(e) => { e.stopPropagation(); toggleSortOrder(); }}\n                        >\n                          {sortOrder === 'desc' ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronUp className=\"h-4 w-4\" />}\n                        </Button>\n                      )}\n                    </div>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem \n                    className={`text-light-gray hover:text-matrix ${sortBy === 'achievements' ? 'bg-matrix/10 text-matrix' : ''}`}\n                    onClick={() => setSortBy('achievements')}\n                  >\n                    <div className=\"flex items-center justify-between w-full\">\n                      <div className=\"flex items-center\">\n                        {sortBy === 'achievements' && <Check className=\"mr-2 h-4 w-4\" />}\n                        Achievements\n                      </div>\n                      {sortBy === 'achievements' && (\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          className=\"h-6 w-6 p-0\"\n                          onClick={(e) => { e.stopPropagation(); toggleSortOrder(); }}\n                        >\n                          {sortOrder === 'desc' ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronUp className=\"h-4 w-4\" />}\n                        </Button>\n                      )}\n                    </div>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem \n                    className={`text-light-gray hover:text-matrix ${sortBy === 'last_active' ? 'bg-matrix/10 text-matrix' : ''}`}\n                    onClick={() => setSortBy('last_active')}\n                  >\n                    <div className=\"flex items-center justify-between w-full\">\n                      <div className=\"flex items-center\">\n                        {sortBy === 'last_active' && <Check className=\"mr-2 h-4 w-4\" />}\n                        Last Active\n                      </div>\n                      {sortBy === 'last_active' && (\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          className=\"h-6 w-6 p-0\"\n                          onClick={(e) => { e.stopPropagation(); toggleSortOrder(); }}\n                        >\n                          {sortOrder === 'desc' ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronUp className=\"h-4 w-4\" />}\n                        </Button>\n                      )}\n                    </div>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n          \n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"bg-transparent h-auto p-0 border-b border-matrix/20 w-full justify-start space-x-6 mb-0\">\n              <TabsTrigger \n                value=\"global\" \n                className=\"px-0 py-3 bg-transparent text-sm rounded-none border-b-2 border-transparent data-[state=active]:border-matrix data-[state=active]:text-matrix text-dim-gray h-auto\"\n              >\n                Global Ranking\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"country\" \n                className=\"px-0 py-3 bg-transparent text-sm rounded-none border-b-2 border-transparent data-[state=active]:border-matrix data-[state=active]:text-matrix text-dim-gray h-auto\"\n              >\n                By Country\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"program\" \n                className=\"px-0 py-3 bg-transparent text-sm rounded-none border-b-2 border-transparent data-[state=active]:border-matrix data-[state=active]:text-matrix text-dim-gray h-auto\"\n              >\n                By Program\n              </TabsTrigger>\n            </TabsList>\n          </Tabs>\n        </div>\n        \n        {/* Leaderboard Table */}\n        <div className=\"terminal-card rounded-lg overflow-hidden\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"bg-terminal/70 border-b border-matrix/20\">\n                  <th className=\"px-4 py-3 text-left text-xs font-mono text-dim-gray\">Rank</th>\n                  <th className=\"px-4 py-3 text-left text-xs font-mono text-dim-gray\">Hacker</th>\n                  <th className=\"px-4 py-3 text-left text-xs font-mono text-dim-gray\">Reputation</th>\n                  <th className=\"px-4 py-3 text-left text-xs font-mono text-dim-gray\">Level</th>\n                  <th className=\"px-4 py-3 text-left text-xs font-mono text-dim-gray\">Submissions</th>\n                  <th className=\"px-4 py-3 text-left text-xs font-mono text-dim-gray\">Achievements</th>\n                  <th className=\"px-4 py-3 text-left text-xs font-mono text-dim-gray\">Top Program</th>\n                  <th className=\"px-4 py-3 text-left text-xs font-mono text-dim-gray\">Last Active</th>\n                </tr>\n              </thead>\n              <tbody>\n                {isLoading ? (\n                  Array(10).fill(0).map((_, i) => (\n                    <tr key={i} className=\"border-b border-matrix/10 last:border-0 animate-pulse\">\n                      <td colSpan={8} className=\"px-4 py-6\">\n                        <div className=\"h-6 bg-terminal/50 rounded\"></div>\n                      </td>\n                    </tr>\n                  ))\n                ) : sortedUsers.length > 0 ? (\n                  sortedUsers.map((user, index) => {\n                    const tier = calculateTier(user.reputation);\n                    return (\n                      <tr key={user.id} className=\"border-b border-matrix/10 last:border-0 hover:bg-matrix/5\">\n                        <td className=\"px-4 py-4 text-light-gray\">\n                          <div className=\"flex items-center\">\n                            <span className=\"font-mono\">{user.rank}</span>\n                            {user.rank <= 3 && (\n                              <Trophy className={`ml-1.5 h-4 w-4 ${\n                                user.rank === 1 ? 'text-yellow-400' : \n                                user.rank === 2 ? 'text-electric-blue' : \n                                'text-green-500'\n                              }`} />\n                            )}\n                          </div>\n                        </td>\n                        <td className=\"px-4 py-4\">\n                          <div className=\"flex items-center\">\n                            <Avatar className=\"h-8 w-8 mr-3\">\n                              <AvatarFallback className=\"bg-matrix/20 text-matrix text-xs\">\n                                {user.username.substring(0, 2).toUpperCase()}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div>\n                              <Link href={`/profile/${user.id}`}>\n                                <a className=\"text-light-gray hover:text-matrix font-mono block\">{user.username}</a>\n                              </Link>\n                              <span className=\"text-dim-gray text-xs\">{user.fullName}</span>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"px-4 py-4\">\n                          <div className=\"flex flex-col\">\n                            <span className=\"text-light-gray font-mono\">{user.reputation.toLocaleString()}</span>\n                            <span className={`text-xs ${tier.color}`}>{tier.name}</span>\n                          </div>\n                        </td>\n                        <td className=\"px-4 py-4\">\n                          <div className=\"flex items-center\">\n                            <div className=\"h-6 w-6 rounded-full bg-matrix/20 flex items-center justify-center mr-2\">\n                              <span className=\"text-xs text-matrix font-mono\">{user.level}</span>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"px-4 py-4\">\n                          <div className=\"flex flex-col\">\n                            <span className=\"text-light-gray\">{user.submissionCount}</span>\n                            <span className=\"text-dim-gray text-xs\">{user.acceptedCount} accepted</span>\n                          </div>\n                        </td>\n                        <td className=\"px-4 py-4\">\n                          <div className=\"flex\">\n                            {user.achievements.slice(0, 3).map((id) => {\n                              const achievement = achievements.find(a => a.id === id);\n                              return achievement ? (\n                                <div key={id} className=\"h-6 w-6 rounded-full flex items-center justify-center mr-1\" title={achievement.name}>\n                                  {achievement.icon}\n                                </div>\n                              ) : null;\n                            })}\n                            {user.achievements.length > 3 && (\n                              <div className=\"h-6 flex items-center text-dim-gray text-xs\">\n                                +{user.achievements.length - 3} more\n                              </div>\n                            )}\n                          </div>\n                        </td>\n                        <td className=\"px-4 py-4 text-dim-gray text-sm\">\n                          {user.topProgram}\n                        </td>\n                        <td className=\"px-4 py-4 text-dim-gray text-sm\">\n                          <div className=\"flex items-center\">\n                            <Clock className=\"h-3.5 w-3.5 mr-1.5\" />\n                            <span>{new Date(user.lastActive).toLocaleDateString()}</span>\n                          </div>\n                        </td>\n                      </tr>\n                    );\n                  })\n                ) : (\n                  <tr>\n                    <td colSpan={8} className=\"px-4 py-12 text-center text-dim-gray\">\n                      <User className=\"h-8 w-8 mx-auto mb-3 text-matrix/50\" />\n                      <p>No hackers found matching your search criteria.</p>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        className=\"mt-4 border-matrix/30 text-matrix\"\n                        onClick={() => setSearchQuery(\"\")}\n                      >\n                        Clear Search\n                      </Button>\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </div>\n        \n        {/* Achievements Section */}\n        <div className=\"mt-12\">\n          <h2 className=\"text-2xl font-mono font-bold text-matrix mb-6\">Available Achievements</h2>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {achievements.map((achievement) => (\n              <div key={achievement.id} className=\"terminal-card p-5 rounded-lg border border-matrix/30 hover:bg-matrix/5 transition duration-200\">\n                <div className=\"flex items-center mb-3\">\n                  <div className=\"h-12 w-12 rounded-md bg-terminal border border-matrix/30 flex items-center justify-center mr-4\">\n                    {achievement.icon}\n                  </div>\n                  <div>\n                    <h3 className={`text-lg font-mono ${achievement.color}`}>{achievement.name}</h3>\n                  </div>\n                </div>\n                <p className=\"text-dim-gray text-sm mb-3\">{achievement.description}</p>\n                <div className=\"flex items-center text-xs text-dim-gray\">\n                  <Trophy className=\"h-3.5 w-3.5 mr-1 text-matrix/50\" />\n                  <span>{Math.floor(Math.random() * 1000) + 100} hackers have earned this</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        {/* CTA Section */}\n        <div className=\"terminal-card p-8 rounded-lg mt-12 text-center\">\n          <h2 className=\"text-2xl font-mono font-bold text-matrix mb-3\">Want to Join the Leaderboard?</h2>\n          <p className=\"text-dim-gray mb-6 max-w-2xl mx-auto\">\n            Create an account, find vulnerabilities, and earn reputation points to climb the ranks.\n            The higher your reputation, the more exclusive programs you'll unlock.\n          </p>\n          <div className=\"flex flex-col sm:flex-row justify-center space-y-4 sm:space-y-0 sm:space-x-4\">\n            <Link href=\"/auth?mode=register\">\n              <a className=\"px-6 py-3 bg-matrix text-black rounded-md font-mono hover:bg-matrix/80 transition duration-200\">\n                Sign Up Now\n              </a>\n            </Link>\n            <Link href=\"/programs\">\n              <a className=\"px-6 py-3 border border-matrix text-matrix rounded-md font-mono hover:bg-matrix/10 transition duration-200\">\n                Browse Programs\n              </a>\n            </Link>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":30876},"client/src/pages/legal-page.tsx":{"content":"import { Link } from \"wouter\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport { \n  FileText, \n  Shield, \n  Scale, \n  ExternalLink,\n  Globe,\n  Users,\n  Mail,\n  MapPin,\n  Phone\n} from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function LegalPage() {\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground className=\"opacity-20\" />\n      <Navbar />\n      \n      <main className=\"max-w-6xl mx-auto px-4 py-12 relative z-10\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-mono font-bold text-matrix mb-2\">Legal & Company Information</h1>\n          <p className=\"text-dim-gray\">\n            Important legal documents, company information, and contact details.\n          </p>\n        </div>\n        \n        <Tabs defaultValue=\"legal\" className=\"w-full\">\n          <TabsList className=\"w-full border-b border-dark-terminal mb-6 bg-transparent h-auto p-0 justify-start\">\n            <TabsTrigger \n              value=\"legal\" \n              className=\"px-4 py-2 data-[state=active]:border-b-2 data-[state=active]:border-matrix data-[state=active]:text-matrix text-dim-gray\"\n            >\n              Legal Documents\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"about\" \n              className=\"px-4 py-2 data-[state=active]:border-b-2 data-[state=active]:border-matrix data-[state=active]:text-matrix text-dim-gray\"\n            >\n              About Us\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"contact\" \n              className=\"px-4 py-2 data-[state=active]:border-b-2 data-[state=active]:border-matrix data-[state=active]:text-matrix text-dim-gray\"\n            >\n              Contact & Support\n            </TabsTrigger>\n          </TabsList>\n          \n          {/* Legal Documents Tab */}\n          <TabsContent value=\"legal\" className=\"p-0 mt-0\">\n            <div className=\"terminal-card p-6 rounded-lg mb-6\">\n              <h2 className=\"text-xl font-mono text-matrix mb-4\">Important Legal Documents</h2>\n              <p className=\"text-dim-gray mb-6\">\n                These documents govern your use of the CyberHunt platform and explain how we handle your data.\n                Please review them carefully before using our services.\n              </p>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"p-5 border border-dark-terminal rounded-lg hover:bg-dark-terminal/50 transition-all\">\n                  <div className=\"flex items-start mb-3\">\n                    <div className=\"h-10 w-10 rounded-md bg-terminal p-2 mr-4 border border-matrix/30 flex items-center justify-center\">\n                      <FileText className=\"h-5 w-5 text-matrix\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-mono text-light-gray\">\n                        <Link href=\"/terms-of-service\">\n                          Terms of Service\n                        </Link>\n                      </h3>\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-dim-gray\">\n                    The agreement between you and CyberHunt that governs your use of our services.\n                    These terms outline your rights, responsibilities, and our legal obligations.\n                  </p>\n                  <div className=\"mt-3\">\n                    <Link href=\"/terms-of-service\">\n                      <span className=\"text-xs text-matrix hover:text-matrix-dark font-mono cursor-pointer\">View Terms of Service</span>\n                    </Link>\n                  </div>\n                </div>\n                \n                <div className=\"p-5 border border-dark-terminal rounded-lg hover:bg-dark-terminal/50 transition-all\">\n                  <div className=\"flex items-start mb-3\">\n                    <div className=\"h-10 w-10 rounded-md bg-terminal p-2 mr-4 border border-matrix/30 flex items-center justify-center\">\n                      <Shield className=\"h-5 w-5 text-blue-400\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-mono text-light-gray\">\n                        <Link href=\"/privacy-policy\">\n                          Privacy Policy\n                        </Link>\n                      </h3>\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-dim-gray\">\n                    This document explains how we collect, use, and protect your personal information,\n                    and what rights you have regarding your data.\n                  </p>\n                  <div className=\"mt-3\">\n                    <Link href=\"/privacy-policy\">\n                      <span className=\"text-xs text-matrix hover:text-matrix-dark font-mono cursor-pointer\">View Privacy Policy</span>\n                    </Link>\n                  </div>\n                </div>\n                \n                <div className=\"p-5 border border-dark-terminal rounded-lg hover:bg-dark-terminal/50 transition-all\">\n                  <div className=\"flex items-start mb-3\">\n                    <div className=\"h-10 w-10 rounded-md bg-terminal p-2 mr-4 border border-matrix/30 flex items-center justify-center\">\n                      <Scale className=\"h-5 w-5 text-yellow-400\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-mono text-light-gray\">\n                        <Link href=\"#\">\n                          Responsible Disclosure Policy\n                        </Link>\n                      </h3>\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-dim-gray\">\n                    Guidelines for security researchers to responsibly disclose vulnerabilities in our platform,\n                    and our commitment to addressing security issues.\n                  </p>\n                  <div className=\"mt-3\">\n                    <Link href=\"#\">\n                      <span className=\"text-xs text-matrix hover:text-matrix-dark font-mono cursor-pointer\">View Disclosure Policy</span>\n                    </Link>\n                  </div>\n                </div>\n                \n                <div className=\"p-5 border border-dark-terminal rounded-lg hover:bg-dark-terminal/50 transition-all\">\n                  <div className=\"flex items-start mb-3\">\n                    <div className=\"h-10 w-10 rounded-md bg-terminal p-2 mr-4 border border-matrix/30 flex items-center justify-center\">\n                      <Globe className=\"h-5 w-5 text-green-500\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-mono text-light-gray\">\n                        <Link href=\"#\">\n                          Cookie Policy\n                        </Link>\n                      </h3>\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-dim-gray\">\n                    Information about how we use cookies and similar technologies on our website,\n                    and how you can control them.\n                  </p>\n                  <div className=\"mt-3\">\n                    <Link href=\"#\">\n                      <span className=\"text-xs text-matrix hover:text-matrix-dark font-mono cursor-pointer\">View Cookie Policy</span>\n                    </Link>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"terminal-card p-6 rounded-lg\">\n              <h2 className=\"text-xl font-mono text-matrix mb-4\">Additional Legal Resources</h2>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"p-4 border border-dark-terminal rounded-lg\">\n                  <h3 className=\"text-md font-mono text-light-gray mb-2\">GDPR Compliance</h3>\n                  <p className=\"text-sm text-dim-gray\">Information about our compliance with European data protection laws.</p>\n                </div>\n                \n                <div className=\"p-4 border border-dark-terminal rounded-lg\">\n                  <h3 className=\"text-md font-mono text-light-gray mb-2\">CCPA Compliance</h3>\n                  <p className=\"text-sm text-dim-gray\">Information about California consumer privacy rights and our compliance.</p>\n                </div>\n                \n                <div className=\"p-4 border border-dark-terminal rounded-lg\">\n                  <h3 className=\"text-md font-mono text-light-gray mb-2\">Licensing Information</h3>\n                  <p className=\"text-sm text-dim-gray\">Details about open source components used in our platform.</p>\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n          \n          {/* About Us Tab */}\n          <TabsContent value=\"about\" className=\"p-0 mt-0\">\n            <div className=\"terminal-card p-6 rounded-lg mb-6\">\n              <h2 className=\"text-xl font-mono text-matrix mb-4\">About CyberHunt</h2>\n              \n              <div className=\"mb-6\">\n                <h3 className=\"text-lg font-mono text-light-gray mb-3\">Our Mission</h3>\n                <p className=\"text-dim-gray\">\n                  CyberHunt is dedicated to making the digital world more secure by connecting ethical hackers with \n                  organizations seeking to improve their security posture. We believe in the power of community and \n                  collaboration to identify and resolve security vulnerabilities before they can be exploited.\n                </p>\n              </div>\n              \n              <div className=\"mb-6\">\n                <h3 className=\"text-lg font-mono text-light-gray mb-3\">Our Story</h3>\n                <p className=\"text-dim-gray\">\n                  Founded in 2023 by a team of cybersecurity experts, CyberHunt emerged from the recognition that \n                  the traditional bug bounty model needed a refresh. We saw an opportunity to create a more engaging, \n                  gamified platform that rewards hackers not just financially, but through reputation, achievements, \n                  and skill development.\n                </p>\n                <p className=\"text-dim-gray mt-2\">\n                  Today, CyberHunt has grown into a thriving community of security researchers and organizations working \n                  together to strengthen online security and protect digital assets.\n                </p>\n              </div>\n              \n              <div>\n                <h3 className=\"text-lg font-mono text-light-gray mb-3\">Our Values</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"p-4 border border-dark-terminal rounded-lg\">\n                    <h4 className=\"text-md font-mono text-matrix mb-2\">Integrity</h4>\n                    <p className=\"text-sm text-dim-gray\">\n                      We believe in honest, ethical behavior and responsible disclosure practices. Trust is the \n                      foundation of everything we do.\n                    </p>\n                  </div>\n                  \n                  <div className=\"p-4 border border-dark-terminal rounded-lg\">\n                    <h4 className=\"text-md font-mono text-matrix mb-2\">Innovation</h4>\n                    <p className=\"text-sm text-dim-gray\">\n                      We continuously push the boundaries of what's possible in vulnerability discovery and \n                      security research.\n                    </p>\n                  </div>\n                  \n                  <div className=\"p-4 border border-dark-terminal rounded-lg\">\n                    <h4 className=\"text-md font-mono text-matrix mb-2\">Community</h4>\n                    <p className=\"text-sm text-dim-gray\">\n                      We foster a supportive environment where knowledge sharing and collaboration thrive.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n          \n          {/* Contact & Support Tab */}\n          <TabsContent value=\"contact\" className=\"p-0 mt-0\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <div className=\"lg:col-span-2\">\n                <div className=\"terminal-card p-6 rounded-lg mb-6\">\n                  <h2 className=\"text-xl font-mono text-matrix mb-4\">Contact Information</h2>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <h3 className=\"text-lg font-mono text-light-gray mb-3\">General Inquiries</h3>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center\">\n                          <Mail className=\"h-5 w-5 text-matrix mr-3\" />\n                          <span className=\"text-dim-gray\">contact@thecyberhunt.com</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <Phone className=\"h-5 w-5 text-matrix mr-3\" />\n                          <span className=\"text-dim-gray\">+216 27580730</span>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <h3 className=\"text-lg font-mono text-light-gray mb-3\">Support</h3>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center\">\n                          <Mail className=\"h-5 w-5 text-blue-400 mr-3\" />\n                          <span className=\"text-dim-gray\">support@cyberhunt.com</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-6\">\n                    <h3 className=\"text-lg font-mono text-light-gray mb-3\">Mailing Address</h3>\n                    <div className=\"flex\">\n                      <MapPin className=\"h-5 w-5 text-electric-blue mr-3 flex-shrink-0 mt-1\" />\n                      <address className=\"text-dim-gray not-italic\">\n                        CyberHunt, Inc.<br />\n                        Tunisia\n                      </address>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"terminal-card p-6 rounded-lg\">\n                  <h2 className=\"text-xl font-mono text-matrix mb-4\">Support Resources</h2>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <Link href=\"#\">\n                      <div className=\"p-4 border border-dark-terminal rounded-lg hover:bg-dark-terminal/50 transition-all cursor-pointer\">\n                        <h3 className=\"text-md font-mono text-light-gray mb-2 flex items-center\">\n                          Knowledge Base\n                          <ExternalLink className=\"ml-2 h-3.5 w-3.5 text-dim-gray\" />\n                        </h3>\n                        <p className=\"text-sm text-dim-gray\">\n                          Browse our comprehensive documentation and guides.\n                        </p>\n                      </div>\n                    </Link>\n                    \n                    <Link href=\"#\">\n                      <div className=\"p-4 border border-dark-terminal rounded-lg hover:bg-dark-terminal/50 transition-all cursor-pointer\">\n                        <h3 className=\"text-md font-mono text-light-gray mb-2 flex items-center\">\n                          FAQ\n                          <ExternalLink className=\"ml-2 h-3.5 w-3.5 text-dim-gray\" />\n                        </h3>\n                        <p className=\"text-sm text-dim-gray\">\n                          Find answers to commonly asked questions.\n                        </p>\n                      </div>\n                    </Link>\n                    \n                    <Link href=\"#\">\n                      <div className=\"p-4 border border-dark-terminal rounded-lg hover:bg-dark-terminal/50 transition-all cursor-pointer\">\n                        <h3 className=\"text-md font-mono text-light-gray mb-2 flex items-center\">\n                          Submit a Ticket\n                          <ExternalLink className=\"ml-2 h-3.5 w-3.5 text-dim-gray\" />\n                        </h3>\n                        <p className=\"text-sm text-dim-gray\">\n                          Create a support ticket for technical assistance.\n                        </p>\n                      </div>\n                    </Link>\n                    \n                    <Link href=\"#\">\n                      <div className=\"p-4 border border-dark-terminal rounded-lg hover:bg-dark-terminal/50 transition-all cursor-pointer\">\n                        <h3 className=\"text-md font-mono text-light-gray mb-2 flex items-center\">\n                          Live Chat\n                          <ExternalLink className=\"ml-2 h-3.5 w-3.5 text-dim-gray\" />\n                        </h3>\n                        <p className=\"text-sm text-dim-gray\">\n                          Chat with our support team during business hours.\n                        </p>\n                      </div>\n                    </Link>\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <div className=\"terminal-card p-6 rounded-lg mb-6\">\n                  <h2 className=\"text-xl font-mono text-matrix mb-4\">Platform Availability</h2>\n                  \n                  <div className=\"text-center mb-4\">\n                    <div className=\"text-2xl font-mono text-matrix mb-2\">24/7</div>\n                    <div className=\"text-dim-gray\">Continuous Operation</div>\n                  </div>\n                  \n                  <div className=\"mt-4 text-dim-gray text-center\">\n                    <p>Our platform operates 24 hours a day, 7 days a week without interruption to ensure continuous service for all users.</p>\n                    <p className=\"mt-2\">Support tickets and security issues are handled around the clock.</p>\n                  </div>\n                </div>\n                \n                <div className=\"terminal-card p-6 rounded-lg\">\n                  <h2 className=\"text-xl font-mono text-matrix mb-4\">Connect With Us</h2>\n                  \n                  <div className=\"space-y-4\">\n                    <Link href=\"#\">\n                      <div className=\"flex items-center text-dim-gray hover:text-matrix transition-colors\">\n                        <Globe className=\"h-5 w-5 mr-3\" />\n                        <span>Twitter/X</span>\n                      </div>\n                    </Link>\n                    \n                    <Link href=\"#\">\n                      <div className=\"flex items-center text-dim-gray hover:text-matrix transition-colors\">\n                        <Globe className=\"h-5 w-5 mr-3\" />\n                        <span>LinkedIn</span>\n                      </div>\n                    </Link>\n                    \n                    <Link href=\"#\">\n                      <div className=\"flex items-center text-dim-gray hover:text-matrix transition-colors\">\n                        <Globe className=\"h-5 w-5 mr-3\" />\n                        <span>GitHub</span>\n                      </div>\n                    </Link>\n                    \n                    <Link href=\"#\">\n                      <div className=\"flex items-center text-dim-gray hover:text-matrix transition-colors\">\n                        <Globe className=\"h-5 w-5 mr-3\" />\n                        <span>YouTube</span>\n                      </div>\n                    </Link>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n}","size_bytes":20051},"client/src/pages/not-found.tsx":{"content":"\nimport { Link } from \"wouter\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function NotFoundPage() {\n  return (\n    <div className=\"min-h-screen bg-deep-black relative flex items-center justify-center\">\n      <MatrixBackground />\n      <div className=\"relative z-10 text-center px-4\">\n        <h1 className=\"text-6xl font-mono font-bold text-matrix mb-4\">404</h1>\n        <p className=\"text-xl text-light-gray mb-6\">Page not found in the matrix</p>\n        <p className=\"text-dim-gray mb-8\">The page you're looking for doesn't exist or has been moved</p>\n        <Button asChild className=\"bg-matrix hover:bg-matrix/80 text-black\">\n          <Link href=\"/\">Return to Base</Link>\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":817},"client/src/pages/payment-dashboard-page.tsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';\nimport { Button } from '../components/ui/button';\nimport { Input } from '../components/ui/input';\nimport { Label } from '../components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';\nimport { Badge } from '../components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';\nimport { CreditCard, DollarSign, Shield, TrendingUp, AlertTriangle } from 'lucide-react';\nimport { useAuth } from '../hooks/use-auth';\n\ninterface PaymentIntent {\n  id: number;\n  amount: number;\n  currency: string;\n  status: string;\n  purpose: string;\n  createdAt: string;\n}\n\ninterface EscrowAccount {\n  id: number;\n  amount: number;\n  currency: string;\n  status: string;\n  submissionId: number;\n  platformCommission: number;\n  researcherPayout: number;\n  createdAt: string;\n}\n\nexport default function PaymentDashboardPage() {\n  const { user } = useAuth();\n  const [paymentIntents, setPaymentIntents] = useState<PaymentIntent[]>([]);\n  const [escrowAccounts, setEscrowAccounts] = useState<EscrowAccount[]>([]);\n  const [companyWallet, setCompanyWallet] = useState<any>(null);\n  const [analytics, setAnalytics] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n\n  // Deposit form state\n  const [depositAmount, setDepositAmount] = useState('');\n  const [depositCurrency, setDepositCurrency] = useState('USD');\n  const [depositLoading, setDepositLoading] = useState(false);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      // Fetch company wallet\n      const walletResponse = await fetch('/api/company/wallet', {\n        credentials: 'include'\n      });\n      if (walletResponse.ok) {\n        const wallet = await walletResponse.json();\n        setCompanyWallet(wallet);\n      }\n\n      // Fetch payment analytics (admin endpoint, but companies should have their own)\n      const analyticsResponse = await fetch('/api/admin/payment-analytics', {\n        credentials: 'include'\n      });\n      if (analyticsResponse.ok) {\n        const analyticsData = await analyticsResponse.json();\n        setAnalytics(analyticsData);\n      }\n\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching payment data:', error);\n      setLoading(false);\n    }\n  };\n\n  const handleDeposit = async () => {\n    setDepositLoading(true);\n    try {\n      const amount = Math.floor(parseFloat(depositAmount) * 100); // Convert to cents\n\n      // Create payment intent\n      const response = await fetch('/api/payments/create-intent', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          amount,\n          currency: depositCurrency,\n          purpose: 'wallet_topup'\n        })\n      });\n\n      if (response.ok) {\n        const { clientSecret } = await response.json();\n        \n        // In a real implementation, you would integrate with Stripe Elements here\n        // For demo purposes, we'll simulate successful payment\n        setTimeout(async () => {\n          const confirmResponse = await fetch('/api/payments/confirm', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            credentials: 'include',\n            body: JSON.stringify({\n              paymentIntentId: 'pi_simulated_' + Date.now()\n            })\n          });\n\n          if (confirmResponse.ok) {\n            setDepositAmount('');\n            fetchData(); // Refresh data\n          }\n        }, 2000);\n      }\n    } catch (error) {\n      console.error('Error processing deposit:', error);\n    } finally {\n      setDepositLoading(false);\n    }\n  };\n\n  const formatCurrency = (amount: number, currency: string = 'USD') => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency\n    }).format(amount / 100);\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusColors = {\n      pending: 'bg-yellow-500',\n      succeeded: 'bg-green-500',\n      failed: 'bg-red-500',\n      held: 'bg-blue-500',\n      released: 'bg-green-500'\n    };\n\n    return (\n      <Badge className={`${statusColors[status] || 'bg-gray-500'} text-white`}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-deep-black text-light-gray p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center\">Loading payment dashboard...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-deep-black text-light-gray p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-mono font-bold text-matrix mb-2\">Payment Dashboard</h1>\n          <p className=\"text-dim-gray\">Manage your company's payments, escrow, and bounty settlements</p>\n        </div>\n\n        {/* Overview Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"terminal-card\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-dim-gray\">Wallet Balance</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-matrix\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-light-gray\">\n                {companyWallet ? formatCurrency(companyWallet.balance) : '$0.00'}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"terminal-card\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-dim-gray\">Total Paid</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-green-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-light-gray\">\n                {companyWallet ? formatCurrency(companyWallet.totalPaid) : '$0.00'}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"terminal-card\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-dim-gray\">Pending Escrow</CardTitle>\n              <Shield className=\"h-4 w-4 text-blue-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-light-gray\">\n                {analytics ? formatCurrency(analytics.pendingEscrow.total || 0) : '$0.00'}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"terminal-card\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-dim-gray\">Platform Fees</CardTitle>\n              <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-light-gray\">\n                {analytics ? formatCurrency(analytics.commissions?.totalCommissions || 0) : '$0.00'}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"deposit\" className=\"space-y-6\">\n          <TabsList className=\"bg-terminal border border-matrix/30\">\n            <TabsTrigger value=\"deposit\" className=\"data-[state=active]:bg-matrix/20\">Deposit Funds</TabsTrigger>\n            <TabsTrigger value=\"transactions\" className=\"data-[state=active]:bg-matrix/20\">Transactions</TabsTrigger>\n            <TabsTrigger value=\"escrow\" className=\"data-[state=active]:bg-matrix/20\">Escrow Accounts</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"deposit\">\n            <Card className=\"terminal-card\">\n              <CardHeader>\n                <CardTitle className=\"text-xl font-mono text-matrix\">Add Funds to Wallet</CardTitle>\n                <CardDescription className=\"text-dim-gray\">\n                  Deposit funds to pay for bounties and platform fees\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"amount\" className=\"text-light-gray\">Amount</Label>\n                    <Input\n                      id=\"amount\"\n                      type=\"number\"\n                      placeholder=\"0.00\"\n                      value={depositAmount}\n                      onChange={(e) => setDepositAmount(e.target.value)}\n                      className=\"bg-terminal border-matrix/30 text-light-gray\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"currency\" className=\"text-light-gray\">Currency</Label>\n                    <Select value={depositCurrency} onValueChange={setDepositCurrency}>\n                      <SelectTrigger className=\"bg-terminal border-matrix/30 text-light-gray\">\n                        <SelectValue placeholder=\"Select currency\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"USD\">USD</SelectItem>\n                        <SelectItem value=\"EUR\">EUR</SelectItem>\n                        <SelectItem value=\"GBP\">GBP</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                <Button \n                  onClick={handleDeposit}\n                  disabled={depositLoading || !depositAmount}\n                  className=\"bg-matrix hover:bg-matrix-dark text-black font-mono\"\n                >\n                  <CreditCard className=\"mr-2 h-4 w-4\" />\n                  {depositLoading ? 'Processing...' : 'Add Funds'}\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"transactions\">\n            <Card className=\"terminal-card\">\n              <CardHeader>\n                <CardTitle className=\"text-xl font-mono text-matrix\">Recent Transactions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center text-dim-gray py-8\">\n                  No transactions yet. Make a deposit to get started.\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"escrow\">\n            <Card className=\"terminal-card\">\n              <CardHeader>\n                <CardTitle className=\"text-xl font-mono text-matrix\">Escrow Accounts</CardTitle>\n                <CardDescription className=\"text-dim-gray\">\n                  Funds held in escrow for approved bounties\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center text-dim-gray py-8\">\n                  No escrow accounts. Approve some submissions to create escrow accounts.\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11569},"client/src/pages/privacy-policy.tsx":{"content":"import { Link } from \"wouter\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function PrivacyPolicyPage() {\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground className=\"opacity-20\" />\n      <Navbar />\n      \n      <main className=\"max-w-4xl mx-auto px-4 py-12 relative z-10\">\n        <Link href=\"/auth\">\n          <Button variant=\"outline\" size=\"sm\" className=\"mb-8\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Registration\n          </Button>\n        </Link>\n        \n        <div className=\"terminal-card p-8 rounded-lg mb-6\">\n          <h1 className=\"text-3xl font-mono font-bold text-matrix mb-6\">Privacy Policy</h1>\n          \n          <div className=\"space-y-6 text-dim-gray\">\n            <section>\n              <h2 className=\"text-xl font-mono text-light-gray mb-3\">1. Introduction</h2>\n              <p>\n                This Privacy Policy explains how CyberHunt (\"we\", \"us\", or \"our\") collects, uses, and shares your personal \n                information when you use our cybersecurity bug bounty platform (the \"Service\"). By using the Service, you \n                consent to the collection, use, and sharing of your personal information as described in this Privacy Policy.\n              </p>\n            </section>\n            \n            <section>\n              <h2 className=\"text-xl font-mono text-light-gray mb-3\">2. Information We Collect</h2>\n              <p>\n                We collect several types of information from and about users of our Service, including:\n              </p>\n              <ul className=\"list-disc pl-6 mt-2 space-y-1\">\n                <li>\n                  <span className=\"text-light-gray\">Personal Information:</span> This includes your name, email address, username, \n                  and other information you provide during registration or when updating your profile.\n                </li>\n                <li>\n                  <span className=\"text-light-gray\">Usage Data:</span> We collect information about how you interact with our \n                  Service, including the pages you visit, the time and date of your visits, and the time spent on those pages.\n                </li>\n                <li>\n                  <span className=\"text-light-gray\">Technical Data:</span> This includes your IP address, browser type and version, \n                  operating system, and device information.\n                </li>\n                <li>\n                  <span className=\"text-light-gray\">Program and Submission Data:</span> Information related to your bug bounty \n                  submissions, including vulnerability details, impact assessments, and communication with program owners.\n                </li>\n                <li>\n                  <span className=\"text-light-gray\">Payment Information:</span> For processing rewards, we collect payment-related \n                  information. Full payment details are processed by our secure payment processors and are not stored on our servers.\n                </li>\n              </ul>\n            </section>\n            \n            <section>\n              <h2 className=\"text-xl font-mono text-light-gray mb-3\">3. How We Use Your Information</h2>\n              <p>\n                We use the information we collect for various purposes, including:\n              </p>\n              <ul className=\"list-disc pl-6 mt-2 space-y-1\">\n                <li>Providing, maintaining, and improving our Service</li>\n                <li>Processing and managing vulnerability submissions</li>\n                <li>Facilitating communication between security researchers and program owners</li>\n                <li>Processing payments and rewards</li>\n                <li>Sending notifications about your account, submissions, or programs you follow</li>\n                <li>Analyzing usage patterns to enhance user experience</li>\n                <li>Ensuring compliance with our Terms of Service and applicable laws</li>\n                <li>Preventing fraudulent or unauthorized activity</li>\n              </ul>\n            </section>\n            \n            <section>\n              <h2 className=\"text-xl font-mono text-light-gray mb-3\">4. Information Sharing and Disclosure</h2>\n              <p>\n                We may share your personal information in the following situations:\n              </p>\n              <ul className=\"list-disc pl-6 mt-2 space-y-1\">\n                <li>\n                  <span className=\"text-light-gray\">With Program Owners:</span> When you submit a vulnerability report, the \n                  information in that report, along with your profile information, is shared with the relevant program owner.\n                </li>\n                <li>\n                  <span className=\"text-light-gray\">Service Providers:</span> We may share your information with third-party vendors, \n                  service providers, or contractors who perform services on our behalf.\n                </li>\n                <li>\n                  <span className=\"text-light-gray\">Legal Requirements:</span> We may disclose your information if required to do so \n                  by law or in response to valid requests by public authorities.\n                </li>\n                <li>\n                  <span className=\"text-light-gray\">Business Transfers:</span> In connection with any merger, sale of company assets, \n                  financing, or acquisition of all or a portion of our business to another company.\n                </li>\n                <li>\n                  <span className=\"text-light-gray\">With Your Consent:</span> We may share your information for any other purpose \n                  disclosed to you with your consent.\n                </li>\n              </ul>\n            </section>\n            \n            <section>\n              <h2 className=\"text-xl font-mono text-light-gray mb-3\">5. Data Security</h2>\n              <p>\n                We implement appropriate technical and organizational measures to protect the security of your personal information. \n                However, please be aware that no method of transmission over the Internet or method of electronic storage is 100% \n                secure, and we cannot guarantee its absolute security.\n              </p>\n            </section>\n            \n            <section>\n              <h2 className=\"text-xl font-mono text-light-gray mb-3\">6. Your Data Protection Rights</h2>\n              <p>\n                Depending on your location, you may have certain rights regarding your personal information, including:\n              </p>\n              <ul className=\"list-disc pl-6 mt-2 space-y-1\">\n                <li>The right to access the personal information we hold about you</li>\n                <li>The right to request correction of inaccurate personal information</li>\n                <li>The right to request deletion of your personal information</li>\n                <li>The right to restrict or object to processing of your personal information</li>\n                <li>The right to data portability</li>\n                <li>The right to withdraw consent where processing is based on consent</li>\n              </ul>\n              <p className=\"mt-2\">\n                To exercise any of these rights, please contact us using the contact information provided below.\n              </p>\n            </section>\n            \n            <section>\n              <h2 className=\"text-xl font-mono text-light-gray mb-3\">7. Children's Privacy</h2>\n              <p>\n                Our Service is not intended for children under the age of 18. We do not knowingly collect personal information from \n                children under 18. If you are a parent or guardian and you are aware that your child has provided us with personal \n                information, please contact us so that we can take necessary actions.\n              </p>\n            </section>\n            \n            <section>\n              <h2 className=\"text-xl font-mono text-light-gray mb-3\">8. Changes to This Privacy Policy</h2>\n              <p>\n                We may update our Privacy Policy from time to time. We will notify you of any changes by posting the new Privacy \n                Policy on this page and updating the \"Last updated\" date. You are advised to review this Privacy Policy periodically \n                for any changes.\n              </p>\n            </section>\n            \n            <section>\n              <h2 className=\"text-xl font-mono text-light-gray mb-3\">9. Contact Us</h2>\n              <p>\n                If you have any questions about this Privacy Policy, please contact us at privacy@cyberhunt.com.\n              </p>\n            </section>\n            \n            <div className=\"pt-4 border-t border-dark-terminal text-center\">\n              <p>Last updated: March 29, 2025</p>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":9146},"client/src/pages/profile-page.tsx":{"content":"import { useState } from 'react';\nimport { useParams, useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { \n  User as UserIcon, Award, Calendar,\n  Star, CheckCircle, Terminal, Shield,\n  BarChart, Activity as ActivityIcon, Loader2, AlertTriangle, \n  Settings as SettingsIcon, Camera\n} from 'lucide-react';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { User, Submission, Activity as UserActivity } from '@shared/schema';\nimport { Navbar } from '@/components/layout/navbar';\nimport { MatrixBackground } from '@/components/matrix-background';\n\nexport default function ProfilePage() {\n  const params = useParams();\n  const [, navigate] = useLocation();\n  const { user: currentUser } = useAuth();\n  const [activeTab, setActiveTab] = useState('overview');\n  const userId = params.id ? parseInt(params.id) : currentUser?.id;\n\n  // Determine if this is the current user's profile\n  const isCurrentUser = currentUser && currentUser.id === userId;\n\n  // Fetch user profile\n  const {\n    data: user,\n    isLoading: isUserLoading,\n    error: userError\n  } = useQuery<User>({\n    queryKey: ['/api/user', userId],\n    queryFn: () => fetch(isCurrentUser ? '/api/user' : `/api/user/${userId}`).then(res => {\n      if (!res.ok) throw new Error('Failed to load user');\n      return res.json();\n    }),\n    enabled: !!userId\n  });\n\n  // Fetch user submissions\n  const {\n    data: submissions,\n    isLoading: isSubmissionsLoading,\n    error: submissionsError\n  } = useQuery<Submission[]>({\n    queryKey: ['/api/submissions/user', userId],\n    queryFn: () => fetch(`/api/submissions/user/${userId}`).then(res => {\n      if (!res.ok) throw new Error('Failed to load submissions');\n      return res.json();\n    }),\n    enabled: !!userId && isCurrentUser\n  });\n\n  // Fetch user activities\n  const {\n    data: activities,\n    isLoading: isActivitiesLoading,\n    error: activitiesError\n  } = useQuery<UserActivity[]>({\n    queryKey: ['/api/activities', userId],\n    queryFn: () => fetch(`/api/activities?userId=${userId}`).then(res => {\n      if (!res.ok) throw new Error('Failed to load activities');\n      return res.json();\n    }),\n    enabled: !!userId && isCurrentUser\n  });\n\n  // Calculate statistics\n  const getUserStats = () => {\n    if (!submissions) return { \n      totalSubmissions: 0, \n      acceptedSubmissions: 0,\n      pendingSubmissions: 0,\n      rejectedSubmissions: 0,\n      totalRewards: 0\n    };\n\n    const acceptedSubmissions = submissions.filter(s => s.status === 'accepted' || s.status === 'fixed');\n    const pendingSubmissions = submissions.filter(s => s.status === 'pending');\n    const rejectedSubmissions = submissions.filter(s => s.status === 'rejected');\n    const totalRewards = submissions.reduce((sum, s) => sum + (s.reward || 0), 0);\n\n    return {\n      totalSubmissions: submissions.length,\n      acceptedSubmissions: acceptedSubmissions.length,\n      pendingSubmissions: pendingSubmissions.length,\n      rejectedSubmissions: rejectedSubmissions.length,\n      totalRewards\n    };\n  };\n\n  // Get severity distribution\n  const getSeverityDistribution = () => {\n    if (!submissions || submissions.length === 0) return [];\n\n    const severities: Record<string, number> = {};\n    submissions.forEach(s => {\n      if (s.severity) {\n        severities[s.severity] = (severities[s.severity] || 0) + 1;\n      }\n    });\n\n    return Object.entries(severities).map(([severity, count]) => ({\n      severity,\n      count,\n      percentage: Math.round((count / submissions.length) * 100)\n    })).sort((a, b) => b.count - a.count);\n  };\n\n  // Format date\n  const formatDate = (dateString: Date | string | null) => {\n    if (!dateString) return 'N/A';\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  // Get rank color class\n  const getRankColor = (rank: string) => {\n    switch (rank?.toLowerCase()) {\n      case 'elite': return 'text-yellow-400';\n      case 'expert': return 'text-green-500';\n      case 'advanced': return 'text-blue-400';\n      case 'intermediate': return 'text-purple-400';\n      case 'novice': return 'text-pink-400';\n      default: return 'text-matrix';\n    }\n  };\n\n  // Loading state\n  if (isUserLoading) {\n    return (\n      <div className=\"min-h-screen bg-deep-black flex items-center justify-center\">\n        <Loader2 className=\"h-10 w-10 animate-spin text-matrix\" />\n      </div>\n    );\n  }\n\n  // Error state\n  if (userError || !user) {\n    return (\n      <div className=\"min-h-screen bg-deep-black flex flex-col items-center justify-center p-4\">\n        <AlertTriangle className=\"h-16 w-16 text-alert-red mb-4\" />\n        <h2 className=\"text-xl text-alert-red mb-2 text-center\">User not found</h2>\n        <p className=\"text-dim-gray text-center mb-6\">The requested user profile could not be loaded.</p>\n        <Button \n          variant=\"default\" \n          onClick={() => navigate('/dashboard')}\n          className=\"bg-matrix text-black hover:bg-matrix/80\"\n        >\n          Back to Dashboard\n        </Button>\n      </div>\n    );\n  }\n\n  const stats = getUserStats();\n  const severityDistribution = getSeverityDistribution();\n\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground className=\"opacity-20\" />\n      <Navbar />\n\n      <main className=\"max-w-6xl mx-auto px-4 py-12 relative z-10\">\n        {/* Profile Header */}\n        <div className=\"terminal-card p-6 rounded-lg mb-6\">\n          <div className=\"flex flex-col md:flex-row gap-6 items-center md:items-start\">\n            <div className=\"relative w-24 h-24\">\n              {user.photoUrl ? (\n                <img \n                  src={user.photoUrl} \n                  alt={user.username}\n                  className=\"w-24 h-24 rounded-full object-cover border-2 border-matrix/30\"\n                />\n              ) : (\n                <div className=\"w-24 h-24 bg-dark-terminal rounded-full flex items-center justify-center text-matrix border-2 border-matrix/30\">\n                  <UserIcon size={40} />\n                </div>\n              )}\n              {isCurrentUser && (\n                <label \n                  htmlFor=\"photo-upload\" \n                  className=\"absolute bottom-0 right-0 bg-matrix text-black p-2 rounded-full cursor-pointer hover:bg-matrix/80\"\n                >\n                  <input\n                    id=\"photo-upload\"\n                    type=\"file\"\n                    accept=\"image/*\"\n                    className=\"hidden\"\n                    onChange={async (e) => {\n                      const file = e.target.files?.[0];\n                      if (file) {\n                        const formData = new FormData();\n                        formData.append('photo', file);\n\n                        try {\n                          const response = await fetch('/api/user/photo', {\n                            method: 'POST',\n                            credentials: 'include',\n                            body: formData\n                          });\n\n                          if (response.ok) {\n                            const data = await response.json();\n                            // Trigger a refetch of user data to get the new photo URL\n                            queryClient.invalidateQueries(['/api/user']);\n                          }\n                        } catch (error) {\n                          console.error('Failed to upload photo:', error);\n                        }\n                      }\n                    }}\n                  />\n                  <Camera className=\"h-4 w-4\" />\n                </label>\n              )}\n            </div>\n\n            <div className=\"flex-1 text-center md:text-left\">\n              <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-4\">\n                <div>\n                  <h1 className=\"text-2xl md:text-3xl font-mono text-matrix mb-1\">\n                    {user.username}\n                    {user.isEmailVerified && (\n                      <CheckCircle className=\"inline-block ml-2 h-5 w-5 text-green-500\" />\n                    )}\n                  </h1>\n                  <p className={`text-lg ${getRankColor(user.rank || 'Newbie')}`}>\n                    {user.rank || 'Newbie'} Hacker\n                  </p>\n                </div>\n\n                {isCurrentUser && (\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => navigate('/settings')}\n                    className=\"border-dark-terminal text-dim-gray hover:text-matrix hover:bg-dark-terminal\"\n                  >\n                    <SettingsIcon className=\"mr-2 h-4 w-4\" />\n                    Edit Profile\n                  </Button>\n                )}\n              </div>\n\n              <div className=\"flex flex-wrap justify-center md:justify-start gap-4 mt-4\">\n                <div className=\"inline-flex items-center text-dim-gray text-sm\">\n                  <Award className=\"h-4 w-4 mr-2 text-electric-blue\" />\n                  <span>Reputation: <span className=\"text-green-500\">{user.reputation || 0}</span></span>\n                </div>\n\n                <div className=\"inline-flex items-center text-dim-gray text-sm\">\n                  <Calendar className=\"h-4 w-4 mr-2 text-electric-blue\" />\n                  <span>Joined: {formatDate(user.createdAt)}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Tabs */}\n        <Tabs defaultValue=\"overview\" value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"w-full border-b border-dark-terminal mb-6 bg-transparent h-auto p-0 justify-start\">\n            <TabsTrigger \n              value=\"overview\" \n              className={`px-4 py-2 ${activeTab === 'overview' ? 'border-b-2 border-matrix text-matrix' : 'text-dim-gray'}`}\n            >\n              Overview\n            </TabsTrigger>\n\n            {isCurrentUser && (\n              <>\n                <TabsTrigger \n                  value=\"submissions\" \n                  className={`px-4 py-2 ${activeTab === 'submissions' ? 'border-b-2 border-matrix text-matrix' : 'text-dim-gray'}`}\n                >\n                  Submissions\n                </TabsTrigger>\n\n                <TabsTrigger \n                  value=\"activity\" \n                  className={`px-4 py-2 ${activeTab === 'activity' ? 'border-b-2 border-matrix text-matrix' : 'text-dim-gray'}`}\n                >\n                  Activity\n                </TabsTrigger>\n              </>\n            )}\n          </TabsList>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\" className=\"p-0 mt-0\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Stats Card */}\n              <Card className=\"terminal-card border-dark-terminal\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-matrix flex items-center\">\n                    <BarChart className=\"mr-2 h-5 w-5\" />\n                    Hacker Statistics\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"p-3 bg-dark-terminal rounded-lg\">\n                      <p className=\"text-dim-gray text-sm mb-1\">Submissions</p>\n                      <p className=\"text-matrix text-xl\">{stats.totalSubmissions}</p>\n                    </div>\n\n                    <div className=\"p-3 bg-dark-terminal rounded-lg\">\n                      <p className=\"text-dim-gray text-sm mb-1\">Accepted</p>\n                      <p className=\"text-green-500 text-xl\">{stats.acceptedSubmissions}</p>\n                    </div>\n\n                    <div className=\"p-3 bg-dark-terminal rounded-lg\">\n                      <p className=\"text-dim-gray text-sm mb-1\">Pending</p>\n                      <p className=\"text-yellow-500 text-xl\">{stats.pendingSubmissions}</p>\n                    </div>\n\n                    <div className=\"p-3 bg-dark-terminal rounded-lg\">\n                      <p className=\"text-dim-gray text-sm mb-1\">Rejected</p>\n                      <p className=\"text-red-500 text-xl\">{stats.rejectedSubmissions}</p>\n                    </div>\n                  </div>\n\n                  {isCurrentUser && (\n                    <div className=\"mt-4 p-3 bg-dark-terminal rounded-lg\">\n                      <p className=\"text-dim-gray text-sm mb-1\">Total Rewards</p>\n                      <p className=\"text-yellow-400 text-xl\">${stats.totalRewards}</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Skills Card */}\n              <Card className=\"terminal-card border-dark-terminal\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-matrix flex items-center\">\n                    <Terminal className=\"mr-2 h-5 w-5\" />\n                    Vulnerability Expertise\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {severityDistribution.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {severityDistribution.map(({ severity, count, percentage }) => (\n                        <div key={severity} className=\"space-y-1\">\n                          <div className=\"flex justify-between items-center\">\n                            <span className=\"text-dim-gray text-sm\">{severity}</span>\n                            <span className=\"text-dim-gray text-sm\">{count} ({percentage}%)</span>\n                          </div>\n                          <div className=\"h-2 w-full bg-dark-terminal rounded-full overflow-hidden\">\n                            <div \n                              className={`h-full ${severity.toLowerCase() === 'critical' ? 'bg-red-500' : \n                                severity.toLowerCase() === 'high' ? 'bg-orange-500' : \n                                severity.toLowerCase() === 'medium' ? 'bg-yellow-500' : \n                                severity.toLowerCase() === 'low' ? 'bg-blue-500' : 'bg-green-500'}`}\n                              style={{ width: `${percentage}%` }}\n                            ></div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-col items-center justify-center h-40 text-center\">\n                      <Shield className=\"h-10 w-10 text-dim-gray mb-3\" />\n                      <p className=\"text-dim-gray mb-1\">No vulnerability data available</p>\n                      {isCurrentUser && (\n                        <p className=\"text-dim-gray text-sm\">\n                          Start submitting bug reports to build your profile\n                        </p>\n                      )}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Achievements Card */}\n              <Card className=\"terminal-card border-dark-terminal md:col-span-2\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-matrix flex items-center\">\n                    <Star className=\"mr-2 h-5 w-5\" />\n                    Achievements\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4\">\n                    <div className=\"terminal-card p-4 rounded-lg flex items-center\">\n                      <div className=\"h-10 w-10 bg-dark-terminal rounded-full flex items-center justify-center mr-3\">\n                        <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                      </div>\n                      <div>\n                        <p className=\"text-matrix text-sm font-medium\">Account Verified</p>\n                        <p className=\"text-dim-gray text-xs\">Email verification completed</p>\n                      </div>\n                    </div>\n\n                    {user.reputation >= 10 && (\n                      <div className=\"terminal-card p-4 rounded-lg flex items-center\">\n                        <div className=\"h-10 w-10 bg-dark-terminal rounded-full flex items-center justify-center mr-3\">\n                          <Terminal className=\"h-5 w-5 text-electric-blue\" />\n                        </div>\n                        <div>\n                          <p className=\"text-matrix text-sm font-medium\">Code Explorer</p>\n                          <p className=\"text-dim-gray text-xs\">Reached 10+ reputation points</p>\n                        </div>\n                      </div>\n                    )}\n\n                    {stats.totalSubmissions >= 1 && (\n                      <div className=\"terminal-card p-4 rounded-lg flex items-center\">\n                        <div className=\"h-10 w-10 bg-dark-terminal rounded-full flex items-center justify-center mr-3\">\n                          <Shield className=\"h-5 w-5 text-purple-400\" />\n                        </div>\n                        <div>\n                          <p className=\"text-matrix text-sm font-medium\">Bug Hunter</p>\n                          <p className=\"text-dim-gray text-xs\">Submitted first vulnerability</p>\n                        </div>\n                      </div>\n                    )}\n\n                    {stats.acceptedSubmissions >= 1 && (\n                      <div className=\"terminal-card p-4 rounded-lg flex items-center\">\n                        <div className=\"h-10 w-10 bg-dark-terminal rounded-full flex items-center justify-center mr-3\">\n                          <Award className=\"h-5 w-5 text-yellow-400\" />\n                        </div>\n                        <div>\n                          <p className=\"text-matrix text-sm font-medium\">First Blood</p>\n                          <p className=\"text-dim-gray text-xs\">First accepted vulnerability</p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Submissions Tab */}\n          <TabsContent value=\"submissions\" className=\"p-0 mt-0\">\n            {isSubmissionsLoading ? (\n              <div className=\"flex justify-center py-16\">\n                <Loader2 className=\"h-10 w-10 animate-spin text-matrix\" />\n              </div>\n            ) : submissionsError ? (\n              <div className=\"terminal-card p-8 rounded-lg text-center\">\n                <AlertTriangle className=\"h-12 w-12 text-alert-red mx-auto mb-4\" />\n                <p className=\"text-alert-red text-lg mb-2\">Failed to load submissions</p>\n                <p className=\"text-dim-gray\">An error occurred while fetching your submissions.</p>\n              </div>\n            ) : submissions && submissions.length > 0 ? (\n              <div className=\"space-y-4\">\n                {submissions.map(submission => (\n                  <div key={submission.id} className=\"terminal-card p-5 rounded-lg\">\n                    <div className=\"flex flex-col md:flex-row justify-between\">\n                      <div className=\"mb-4 md:mb-0\">\n                        <h3 className=\"text-matrix font-mono text-lg mb-1\">\n                          {submission.title}\n                        </h3>\n                        <div className=\"flex flex-wrap gap-2 mb-2\">\n                          <span \n                            className={`inline-flex items-center px-2 py-1 rounded text-xs ${\n                              submission.status === 'accepted' || submission.status === 'fixed' ? 'bg-green-900/20 text-green-500' : \n                              submission.status === 'pending' ? 'bg-yellow-900/20 text-yellow-500' :\n                              'bg-red-900/20 text-red-500'\n                            }`}\n                          >\n                            {submission.status.charAt(0).toUpperCase() + submission.status.slice(1)}\n                          </span>\n\n                          <span className=\"inline-flex items-center px-2 py-1 bg-dark-terminal rounded text-xs text-blue-400\">\n                            {submission.type}\n                          </span>\n\n                          <span className=\"inline-flex items-center px-2 py-1 bg-dark-terminal rounded text-xs text-purple-400\">\n                            {submission.severity}\n                          </span>\n                        </div>\n                        <p className=\"text-dim-gray text-sm line-clamp-2\">{submission.description}</p>\n                      </div>\n\n                      <div className=\"flex flex-col items-start md:items-end justify-between\">\n                        <span className=\"text-dim-gray text-sm\">\n                          Submitted on {formatDate(submission.createdAt)}\n                        </span>\n\n                        {submission.reward && (\n                          <span className=\"inline-flex items-center mt-2 text-yellow-400\">\n                            <Award className=\"h-4 w-4 mr-1\" />\n                            ${submission.reward}\n                          </span>\n                        )}\n\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\" \n                          onClick={() => navigate(`/submissions/${submission.id}`)}\n                          className=\"mt-2 border-dark-terminal hover:bg-dark-terminal\"\n                        >\n                          View Details\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"terminal-card p-8 rounded-lg text-center\">\n                <Shield className=\"h-12 w-12 text-dim-gray mx-auto mb-4\" />\n                <p className=\"text-matrix text-lg mb-2\">No submissions yet</p>\n                <p className=\"text-dim-gray mb-4\">You haven't submitted any bug reports yet.</p>\n                <Button \n                  variant=\"default\" \n                  onClick={() => navigate('/programs')}\n                  className=\"bg-matrix text-black hover:bg-matrix/80\"\n                >\n                  Browse Programs\n                </Button>\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Activity Tab */}\n          <TabsContent value=\"activity\" className=\"p-0 mt-0\">\n            {isActivitiesLoading ? (\n              <div className=\"flex justify-center py-16\">\n                <Loader2 className=\"h-10 w-10 animate-spin text-matrix\" />\n              </div>\n            ) : activitiesError ? (\n              <div className=\"terminal-card p-8 rounded-lg text-center\">\n                <AlertTriangle className=\"h-12 w-12 text-alert-red mx-auto mb-4\" />\n                <p className=\"text-alert-red text-lg mb-2\">Failed to load activities</p>\n                <p className=\"text-dim-gray\">An error occurred while fetching your activity history.</p>\n              </div>\n            ) : activities && activities.length > 0 ? (\n              <div className=\"relative border-l-2 border-dark-terminal ml-4 pl-6 py-2 space-y-8\">\n                {activities.map(activity => (\n                  <div key={activity.id} className=\"relative\">\n                    <div className=\"absolute -left-10 mt-1 h-4 w-4 rounded-full bg-matrix\"></div>\n                    <div className=\"terminal-card p-4 rounded-lg\">\n                      <div className=\"flex items-start\">\n                        <div className=\"h-8 w-8 bg-dark-terminal rounded-full flex items-center justify-center mr-3\">\n                          <ActivityIcon className=\"h-4 w-4 text-electric-blue\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <p className=\"text-matrix\">{activity.message}</p>\n                          <p className=\"text-dim-gray text-xs mt-1\">\n                            {formatDate(activity.createdAt)}\n                          </p>\n                        </div>\n                      </div>\n                      {activity.details && (\n                        <p className=\"text-dim-gray text-sm mt-2 pl-11\">{activity.details}</p>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"terminal-card p-8 rounded-lg text-center\">\n                <ActivityIcon className=\"h-12 w-12 text-dim-gray mx-auto mb-4\" />\n                <p className=\"text-matrix text-lg mb-2\">No activity yet</p>\n                <p className=\"text-dim-gray\">Start interacting with the platform to see your activity here.</p>\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n}","size_bytes":25244},"client/src/pages/program-detail-page.tsx":{"content":"import { useState } from 'react';\nimport { useParams, useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { \n  ArrowLeft, Shield, ExternalLink, CalendarDays, \n  Award, Tag, Info, Download, FileText, AlertTriangle,\n  Loader2, CheckCircle, BadgeCheck\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Program, Submission } from '@shared/schema';\nimport { Navbar } from '@/components/layout/navbar';\nimport { MatrixBackground } from '@/components/matrix-background';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/use-auth';\n\nexport default function ProgramDetailPage() {\n  const { id } = useParams();\n  const programId = parseInt(id);\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [activeTab, setActiveTab] = useState('overview');\n\n  // Fetch program details\n  const { \n    data: program,\n    isLoading: isProgramLoading,\n    error: programError\n  } = useQuery<Program>({ \n    queryKey: ['/api/programs', programId],\n    queryFn: () => fetch(`/api/programs/${programId}`).then(res => {\n      if (!res.ok) throw new Error('Failed to load program');\n      return res.json();\n    }),\n    enabled: !isNaN(programId)\n  });\n\n  // Fetch submissions for this program\n  const {\n    data: submissions,\n    isLoading: isSubmissionsLoading,\n  } = useQuery<Submission[]>({\n    queryKey: ['/api/submissions/program', programId],\n    queryFn: () => fetch(`/api/submissions/program/${programId}`).then(res => {\n      if (!res.ok) throw new Error('Failed to load submissions');\n      return res.json();\n    }),\n    enabled: !isNaN(programId) && user !== null\n  });\n\n  // Handle submission status badge color\n  const getStatusColor = (status: string) => {\n    switch(status.toLowerCase()) {\n      case 'accepted': return 'text-green-500 bg-green-900/20';\n      case 'pending': return 'text-yellow-500 bg-yellow-900/20';\n      case 'rejected': return 'text-red-500 bg-red-900/20';\n      case 'fixed': return 'text-blue-500 bg-blue-900/20';\n      default: return 'text-gray-400 bg-gray-800/20';\n    }\n  };\n\n  // Handle submit button click\n  const handleSubmitClick = () => {\n    if (!user) {\n      toast({\n        title: \"Authentication required\",\n        description: \"Please log in to submit a bug report\",\n        variant: \"destructive\",\n      });\n      navigate('/auth');\n      return;\n    }\n    \n    navigate(`/submit-bug?programId=${programId}`);\n  };\n\n  if (isProgramLoading) {\n    return (\n      <div className=\"min-h-screen bg-deep-black flex items-center justify-center\">\n        <Loader2 className=\"h-10 w-10 animate-spin text-matrix\" />\n      </div>\n    );\n  }\n\n  if (programError || !program) {\n    return (\n      <div className=\"min-h-screen bg-deep-black flex flex-col items-center justify-center p-4\">\n        <AlertTriangle className=\"h-16 w-16 text-alert-red mb-4\" />\n        <h2 className=\"text-xl text-alert-red mb-2 text-center\">Program not found</h2>\n        <p className=\"text-dim-gray text-center mb-6\">The requested program does not exist or could not be loaded.</p>\n        <Button variant=\"matrix\" onClick={() => navigate('/programs')}>\n          Back to Programs\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground className=\"opacity-20\" />\n      <Navbar />\n      \n      <main className=\"max-w-6xl mx-auto px-4 py-10 relative z-10\">\n        {/* Back button */}\n        <button \n          onClick={() => navigate('/programs')} \n          className=\"inline-flex items-center text-dim-gray hover:text-matrix transition-colors mb-6\"\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Back to Programs\n        </button>\n        \n        {/* Program header */}\n        <div className=\"terminal-card p-6 rounded-lg mb-8\">\n          <div className=\"flex flex-col md:flex-row gap-6\">\n            <div className=\"flex-shrink-0 h-20 w-20 flex items-center justify-center bg-matrix/10 rounded-xl\">\n              {program.logo ? (\n                <img src={program.logo} alt={`${program.name} logo`} className=\"h-16 w-16 object-contain\" />\n              ) : (\n                <Shield className=\"h-10 w-10 text-matrix\" />\n              )}\n            </div>\n            \n            <div className=\"flex-1\">\n              <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-4\">\n                <div>\n                  <h1 className=\"text-2xl md:text-3xl font-mono text-matrix mb-1\">{program.name}</h1>\n                  <p className=\"text-dim-gray text-lg\">{program.company}</p>\n                </div>\n                \n                <div className=\"flex items-center gap-3\">\n                  <span className={`inline-flex items-center px-3 py-1 rounded text-sm ${program.status === 'active' ? 'bg-green-900/20 text-green-500' : 'bg-gray-800/20 text-gray-400'}`}>\n                    {program.status.charAt(0).toUpperCase() + program.status.slice(1)}\n                  </span>\n                  \n                  <Button variant=\"matrix\" onClick={handleSubmitClick}>\n                    Submit a Bug\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"flex flex-wrap gap-4 mt-4\">\n                <div className=\"inline-flex items-center text-dim-gray text-sm\">\n                  <Award className=\"h-4 w-4 mr-2 text-electric-blue\" />\n                  <span>Rewards: {program.rewardsRange}</span>\n                </div>\n                \n                <div className=\"inline-flex items-center text-dim-gray text-sm\">\n                  <CalendarDays className=\"h-4 w-4 mr-2 text-electric-blue\" />\n                  <span>Created: {new Date(program.createdAt).toLocaleDateString('en-US', { \n                    year: 'numeric', \n                    month: 'short', \n                    day: 'numeric' \n                  })}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Program content tabs */}\n        <Tabs defaultValue=\"overview\" value={activeTab} onValueChange={setActiveTab} className=\"w-full mb-8\">\n          <TabsList className=\"w-full border-b border-dark-terminal mb-6 bg-transparent h-auto p-0 justify-start\">\n            <TabsTrigger \n              value=\"overview\" \n              className={`px-4 py-2 ${activeTab === 'overview' ? 'border-b-2 border-matrix text-matrix' : 'text-dim-gray'}`}\n            >\n              Overview\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"scope\" \n              className={`px-4 py-2 ${activeTab === 'scope' ? 'border-b-2 border-matrix text-matrix' : 'text-dim-gray'}`}\n            >\n              Scope\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"submissions\" \n              className={`px-4 py-2 ${activeTab === 'submissions' ? 'border-b-2 border-matrix text-matrix' : 'text-dim-gray'}`}\n            >\n              Your Submissions\n            </TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"overview\" className=\"p-0 mt-0\">\n            <div className=\"space-y-8\">\n              <div className=\"terminal-card p-6 rounded-lg\">\n                <h2 className=\"text-xl font-mono text-matrix mb-4\">Program Description</h2>\n                <p className=\"text-dim-gray whitespace-pre-line\">{program.description}</p>\n              </div>\n              \n              <div className=\"terminal-card p-6 rounded-lg\">\n                <h2 className=\"text-xl font-mono text-matrix mb-4\">Rewards</h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <h3 className=\"text-matrix mb-2 font-mono\">Reward Range</h3>\n                    <p className=\"text-dim-gray mb-1\">{program.rewardsRange}</p>\n                    <p className=\"text-dim-gray text-sm\">Rewards are determined based on the severity and impact of the vulnerability.</p>\n                  </div>\n                  <div>\n                    <h3 className=\"text-matrix mb-2 font-mono\">Eligibility</h3>\n                    <p className=\"text-dim-gray mb-1\">All verified security researchers</p>\n                    <p className=\"text-dim-gray text-sm\">Make sure to follow the submission guidelines for proper evaluation.</p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"terminal-card p-6 rounded-lg\">\n                <h2 className=\"text-xl font-mono text-matrix mb-4\">Rules</h2>\n                <ul className=\"space-y-3 text-dim-gray list-disc pl-5\">\n                  <li>Do not perform testing that could harm the integrity or availability of the systems</li>\n                  <li>Do not access, modify, or delete data that doesn't belong to your test account</li>\n                  <li>Do not perform social engineering or phishing attacks on employees</li>\n                  <li>Report vulnerabilities as soon as they are discovered</li>\n                  <li>Allow adequate time for remediation before public disclosure</li>\n                  <li>Follow responsible disclosure practices</li>\n                </ul>\n              </div>\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"scope\" className=\"p-0 mt-0\">\n            <div className=\"terminal-card p-6 rounded-lg\">\n              <h2 className=\"text-xl font-mono text-matrix mb-6\">In-Scope Assets</h2>\n              \n              <div className=\"space-y-6\">\n                {program.scope && Array.isArray(program.scope) && (program.scope as string[]).map((scope, index) => (\n                  <div key={index} className=\"p-4 border border-dark-terminal rounded-lg\">\n                    <div className=\"flex items-center mb-3\">\n                      <Tag className=\"h-5 w-5 text-electric-blue mr-2\" />\n                      <h3 className=\"text-lg text-matrix\">{scope}</h3>\n                    </div>\n                    <p className=\"text-dim-gray text-sm\">\n                      All security vulnerabilities related to {scope.toLowerCase()} are eligible for bounty rewards.\n                    </p>\n                  </div>\n                ))}\n                \n                {(!program.scope || !Array.isArray(program.scope) || (program.scope as string[]).length === 0) && (\n                  <div className=\"flex flex-col items-center justify-center py-8\">\n                    <Info className=\"h-10 w-10 text-dim-gray mb-4\" />\n                    <p className=\"text-dim-gray text-center\">No specific scope information available for this program.</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"submissions\" className=\"p-0 mt-0\">\n            {!user ? (\n              <div className=\"terminal-card p-8 rounded-lg text-center\">\n                <Shield className=\"h-12 w-12 text-dim-gray mx-auto mb-4\" />\n                <h3 className=\"text-lg text-matrix mb-2\">Authentication Required</h3>\n                <p className=\"text-dim-gray mb-4\">Please log in to view your submissions for this program.</p>\n                <Button variant=\"matrix\" onClick={() => navigate('/auth')}>\n                  Log In\n                </Button>\n              </div>\n            ) : isSubmissionsLoading ? (\n              <div className=\"flex justify-center py-16\">\n                <Loader2 className=\"h-10 w-10 animate-spin text-matrix\" />\n              </div>\n            ) : submissions && submissions.length > 0 ? (\n              <div className=\"space-y-4\">\n                {submissions.map((submission) => (\n                  <div key={submission.id} className=\"terminal-card p-4 rounded-lg\">\n                    <div className=\"flex flex-col md:flex-row justify-between gap-3\">\n                      <div>\n                        <div className=\"flex items-center mb-2\">\n                          <FileText className=\"h-5 w-5 text-electric-blue mr-2\" />\n                          <h3 className=\"text-lg text-matrix\">{submission.title}</h3>\n                        </div>\n                        <p className=\"text-dim-gray text-sm line-clamp-2\">{submission.description}</p>\n                      </div>\n                      <div className=\"flex flex-col md:flex-row items-start md:items-center gap-3\">\n                        <span className={`inline-flex items-center px-3 py-1 rounded text-sm ${getStatusColor(submission.status)}`}>\n                          {submission.status.charAt(0).toUpperCase() + submission.status.slice(1)}\n                        </span>\n                        <Button \n                          variant=\"matrix\" \n                          size=\"sm\"\n                          onClick={() => navigate(`/submissions/${submission.id}`)}\n                        >\n                          View Details\n                        </Button>\n                      </div>\n                    </div>\n                    <div className=\"flex flex-wrap gap-3 mt-3\">\n                      <span className=\"inline-flex items-center px-2 py-1 bg-dark-terminal rounded text-xs text-yellow-400\">\n                        {submission.severity}\n                      </span>\n                      <span className=\"inline-flex items-center px-2 py-1 bg-dark-terminal rounded text-xs text-purple-400\">\n                        {submission.type}\n                      </span>\n                      {submission.reward && (\n                        <span className=\"inline-flex items-center px-2 py-1 bg-dark-terminal rounded text-xs text-green-400\">\n                          <Award className=\"h-3 w-3 mr-1\" />\n                          ${submission.reward}\n                        </span>\n                      )}\n                      <span className=\"inline-flex items-center px-2 py-1 bg-dark-terminal rounded text-xs text-dim-gray\">\n                        <CalendarDays className=\"h-3 w-3 mr-1\" />\n                        {new Date(submission.createdAt).toLocaleDateString()}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"terminal-card p-8 rounded-lg text-center\">\n                <Info className=\"h-12 w-12 text-dim-gray mx-auto mb-4\" />\n                <h3 className=\"text-lg text-matrix mb-2\">No Submissions Yet</h3>\n                <p className=\"text-dim-gray mb-4\">You haven't submitted any bug reports for this program.</p>\n                <Button variant=\"matrix\" onClick={handleSubmitClick}>\n                  Submit a Bug\n                </Button>\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n}","size_bytes":14910},"client/src/pages/programs-page.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link } from \"wouter\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Program } from \"@shared/schema\";\n\nexport default function ProgramsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedType, setSelectedType] = useState(\"\");\n\n  // Fetch programs data\n  const { data: programs = [], isLoading, error } = useQuery<Program[]>({\n    queryKey: [\"/api/programs\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/programs\");\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch programs\");\n      }\n      return response.json();\n    }\n  });\n\n  // Filter programs based on search and type\n  const filteredPrograms = programs.filter(program => {\n    const matchesSearch = searchQuery === \"\" || \n      program.name.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesType = selectedType === \"\" || program.type === selectedType;\n    return matchesSearch && matchesType;\n  });\n\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground className=\"opacity-20\" />\n      <Navbar />\n\n      <main className=\"max-w-7xl mx-auto px-4 py-12 relative z-10\">\n        {/* Header Section */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-mono font-bold text-matrix mb-4\">Available Programs</h1>\n          <div className=\"flex gap-4 mb-6\">\n            <input\n              type=\"text\"\n              placeholder=\"Search programs...\"\n              className=\"flex-grow p-2 bg-terminal border border-matrix/30 rounded text-light-gray\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n            />\n            <select\n              className=\"p-2 bg-terminal border border-matrix/30 rounded text-light-gray\"\n              value={selectedType}\n              onChange={(e) => setSelectedType(e.target.value)}\n            >\n              <option value=\"\">All Types</option>\n              <option value=\"web\">Web</option>\n              <option value=\"api\">API</option>\n              <option value=\"mobile\">Mobile</option>\n              <option value=\"cloud\">Cloud</option>\n              <option value=\"iot\">IoT</option>\n              <option value=\"crypto\">Crypto</option>\n              <option value=\"network\">Network</option>\n            </select>\n          </div>\n        </div>\n\n        {isLoading ? (\n          <div className=\"text-center text-light-gray\">Loading programs...</div>\n        ) : error ? (\n          <div className=\"text-center text-red-500\">Error fetching programs: {error.message}</div>\n        ) : filteredPrograms.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredPrograms.map((program) => (\n              <div key={program.id} className=\"bg-terminal border border-matrix/30 rounded-lg p-6\">\n                <h2 className=\"text-xl font-bold text-matrix mb-2\">{program.name}</h2>\n                <p className=\"text-light-gray mb-4\">{program.description}</p>\n                <div className=\"mb-4\">\n                  <span className=\"text-dim-gray\">Reward Range: </span>\n                  <span className=\"text-matrix\">{program.rewardRange}</span>\n                </div>\n                <Link href={`/programs/${program.id}`}>\n                <button className=\"block w-full text-center py-2 bg-matrix/20 hover:bg-matrix/30 text-matrix rounded\">\n                  View Details\n                </button>\n              </Link>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center text-light-gray\">\n            No programs found matching your criteria.\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}","size_bytes":3888},"client/src/pages/researcher-payouts-page.tsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';\nimport { Button } from '../components/ui/button';\nimport { Input } from '../components/ui/input';\nimport { Label } from '../components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';\nimport { Badge } from '../components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '../components/ui/dialog';\nimport { Wallet, Clock, CheckCircle, XCircle, CreditCard } from 'lucide-react';\nimport { useAuth } from '../hooks/use-auth';\n\ninterface Payout {\n  id: number;\n  amount: number;\n  currency: string;\n  status: string;\n  completedAt: string | null;\n  createdAt: string;\n  submissionTitle: string;\n  paymentMethodName: string;\n}\n\ninterface PaymentMethod {\n  id: number;\n  name: string;\n  type: string;\n  supportedCurrencies: string[];\n}\n\nexport default function ResearcherPayoutsPage() {\n  const { user } = useAuth();\n  const [payouts, setPayouts] = useState<Payout[]>([]);\n  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([]);\n  const [submissions, setSubmissions] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  // Payout request form state\n  const [selectedSubmission, setSelectedSubmission] = useState('');\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState('');\n  const [paymentDetails, setPaymentDetails] = useState('');\n  const [requestLoading, setRequestLoading] = useState(false);\n  const [showRequestDialog, setShowRequestDialog] = useState(false);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      // Fetch payouts\n      const payoutsResponse = await fetch('/api/payouts', {\n        credentials: 'include'\n      });\n      if (payoutsResponse.ok) {\n        const payoutsData = await payoutsResponse.json();\n        setPayouts(payoutsData);\n      }\n\n      // Fetch payment methods\n      const methodsResponse = await fetch('/api/payment-methods', {\n        credentials: 'include'\n      });\n      if (methodsResponse.ok) {\n        const methodsData = await methodsResponse.json();\n        setPaymentMethods(methodsData);\n      }\n\n      // Fetch user submissions\n      const submissionsResponse = await fetch('/api/submissions', {\n        credentials: 'include'\n      });\n      if (submissionsResponse.ok) {\n        const submissionsData = await submissionsResponse.json();\n        // Filter approved submissions without payouts\n        const approvedSubmissions = submissionsData.filter(\n          (sub: any) => sub.status === 'approved' && sub.reward > 0\n        );\n        setSubmissions(approvedSubmissions);\n      }\n\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching payout data:', error);\n      setLoading(false);\n    }\n  };\n\n  const handleRequestPayout = async () => {\n    setRequestLoading(true);\n    try {\n      const response = await fetch('/api/payouts/request', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          submissionId: parseInt(selectedSubmission),\n          paymentMethodId: parseInt(selectedPaymentMethod),\n          paymentDetails: { destination: paymentDetails }\n        })\n      });\n\n      if (response.ok) {\n        setShowRequestDialog(false);\n        setSelectedSubmission('');\n        setSelectedPaymentMethod('');\n        setPaymentDetails('');\n        fetchData(); // Refresh data\n      } else {\n        const error = await response.json();\n        alert(`Error: ${error.message}`);\n      }\n    } catch (error) {\n      console.error('Error requesting payout:', error);\n      alert('Failed to request payout');\n    } finally {\n      setRequestLoading(false);\n    }\n  };\n\n  const formatCurrency = (amount: number, currency: string = 'USD') => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency\n    }).format(amount / 100);\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'failed':\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      case 'processing':\n        return <Clock className=\"h-4 w-4 text-yellow-500\" />;\n      default:\n        return <Clock className=\"h-4 w-4 text-blue-500\" />;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusColors = {\n      pending: 'bg-yellow-500',\n      processing: 'bg-blue-500',\n      completed: 'bg-green-500',\n      failed: 'bg-red-500',\n      cancelled: 'bg-gray-500'\n    };\n\n    return (\n      <Badge className={`${statusColors[status] || 'bg-gray-500'} text-white`}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const totalEarnings = payouts\n    .filter(p => p.status === 'completed')\n    .reduce((sum, p) => sum + p.amount, 0);\n\n  const pendingPayouts = payouts\n    .filter(p => ['pending', 'processing'].includes(p.status))\n    .reduce((sum, p) => sum + p.amount, 0);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-deep-black text-light-gray p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center\">Loading payout dashboard...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-deep-black text-light-gray p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-8 flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-mono font-bold text-matrix mb-2\">Payout Dashboard</h1>\n            <p className=\"text-dim-gray\">Manage your bounty payouts and earnings</p>\n          </div>\n          \n          <Dialog open={showRequestDialog} onOpenChange={setShowRequestDialog}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-matrix hover:bg-matrix-dark text-black font-mono\">\n                <Wallet className=\"mr-2 h-4 w-4\" />\n                Request Payout\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"bg-terminal border border-matrix/30 text-light-gray\">\n              <DialogHeader>\n                <DialogTitle className=\"text-matrix font-mono\">Request Payout</DialogTitle>\n                <DialogDescription className=\"text-dim-gray\">\n                  Request a payout for your approved submissions\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"submission\" className=\"text-light-gray\">Submission</Label>\n                  <Select value={selectedSubmission} onValueChange={setSelectedSubmission}>\n                    <SelectTrigger className=\"bg-terminal border-matrix/30 text-light-gray\">\n                      <SelectValue placeholder=\"Select submission\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {submissions.map((submission) => (\n                        <SelectItem key={submission.id} value={submission.id.toString()}>\n                          {submission.title} - {formatCurrency(submission.reward)}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"paymentMethod\" className=\"text-light-gray\">Payment Method</Label>\n                  <Select value={selectedPaymentMethod} onValueChange={setSelectedPaymentMethod}>\n                    <SelectTrigger className=\"bg-terminal border-matrix/30 text-light-gray\">\n                      <SelectValue placeholder=\"Select payment method\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {paymentMethods.map((method) => (\n                        <SelectItem key={method.id} value={method.id.toString()}>\n                          {method.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"paymentDetails\" className=\"text-light-gray\">Payment Details</Label>\n                  <Input\n                    id=\"paymentDetails\"\n                    placeholder=\"Email, wallet address, or account number\"\n                    value={paymentDetails}\n                    onChange={(e) => setPaymentDetails(e.target.value)}\n                    className=\"bg-terminal border-matrix/30 text-light-gray\"\n                  />\n                </div>\n                <Button \n                  onClick={handleRequestPayout}\n                  disabled={requestLoading || !selectedSubmission || !selectedPaymentMethod || !paymentDetails}\n                  className=\"w-full bg-matrix hover:bg-matrix-dark text-black font-mono\"\n                >\n                  {requestLoading ? 'Processing...' : 'Request Payout'}\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Overview Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card className=\"terminal-card\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-dim-gray\">Total Earnings</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-green-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-light-gray\">\n                {formatCurrency(totalEarnings)}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"terminal-card\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-dim-gray\">Pending Payouts</CardTitle>\n              <Clock className=\"h-4 w-4 text-yellow-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-light-gray\">\n                {formatCurrency(pendingPayouts)}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"terminal-card\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-dim-gray\">Available for Payout</CardTitle>\n              <Wallet className=\"h-4 w-4 text-matrix\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-light-gray\">\n                {submissions.length}\n              </div>\n              <p className=\"text-xs text-dim-gray\">Approved submissions</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Payouts Table */}\n        <Card className=\"terminal-card\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-mono text-matrix\">Payout History</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {payouts.length > 0 ? (\n              <div className=\"space-y-4\">\n                {payouts.map((payout) => (\n                  <div key={payout.id} className=\"flex items-center justify-between p-4 border border-matrix/20 rounded-lg\">\n                    <div className=\"flex items-center space-x-4\">\n                      {getStatusIcon(payout.status)}\n                      <div>\n                        <div className=\"font-mono text-light-gray\">{payout.submissionTitle}</div>\n                        <div className=\"text-sm text-dim-gray\">\n                          via {payout.paymentMethodName} • {new Date(payout.createdAt).toLocaleDateString()}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-mono text-lg text-matrix\">\n                        {formatCurrency(payout.amount, payout.currency)}\n                      </div>\n                      {getStatusBadge(payout.status)}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center text-dim-gray py-8\">\n                <Wallet className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p>No payouts yet</p>\n                <p className=\"text-sm\">Get some submissions approved to request payouts</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12973},"client/src/pages/resources-page.tsx":{"content":"import { Link } from \"wouter\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport {\n  FileText,\n  BookOpen,\n  ExternalLink,\n  Globe,\n  Youtube,\n  Code,\n  Search,\n  AlertTriangle,\n  ShieldCheck,\n  Terminal,\n  GraduationCap\n} from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function ResourcesPage() {\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground className=\"opacity-20\" />\n      <Navbar />\n      \n      <main className=\"max-w-6xl mx-auto px-4 py-12 relative z-10\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-mono font-bold text-matrix mb-2\">Hacker Resources</h1>\n          <p className=\"text-dim-gray\">\n            Resources, tools, and learning materials to help you become a more effective security researcher.\n          </p>\n        </div>\n        \n        <Tabs defaultValue=\"guides\" className=\"w-full\">\n          <TabsList className=\"w-full border-b border-dark-terminal mb-6 bg-transparent h-auto p-0 justify-start\">\n            <TabsTrigger \n              value=\"guides\" \n              className=\"px-4 py-2 data-[state=active]:border-b-2 data-[state=active]:border-matrix data-[state=active]:text-matrix text-dim-gray\"\n            >\n              Guides\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"tools\" \n              className=\"px-4 py-2 data-[state=active]:border-b-2 data-[state=active]:border-matrix data-[state=active]:text-matrix text-dim-gray\"\n            >\n              Tools\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"learning\" \n              className=\"px-4 py-2 data-[state=active]:border-b-2 data-[state=active]:border-matrix data-[state=active]:text-matrix text-dim-gray\"\n            >\n              Learning\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"community\" \n              className=\"px-4 py-2 data-[state=active]:border-b-2 data-[state=active]:border-matrix data-[state=active]:text-matrix text-dim-gray\"\n            >\n              Community\n            </TabsTrigger>\n          </TabsList>\n          \n          {/* Guides Tab */}\n          <TabsContent value=\"guides\" className=\"p-0 mt-0\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {[\n                {\n                  title: \"Web Vulnerability Guide\",\n                  icon: <Globe className=\"h-5 w-5 text-electric-blue\" />,\n                  description: \"Comprehensive guide to common web vulnerabilities including XSS, CSRF, SQL Injection, and more.\",\n                  link: \"#\"\n                },\n                {\n                  title: \"API Security Checklist\",\n                  icon: <Code className=\"h-5 w-5 text-green-500\" />,\n                  description: \"Best practices for securing RESTful and GraphQL APIs, with examples of common vulnerabilities.\",\n                  link: \"#\"\n                },\n                {\n                  title: \"Mobile Security Testing\",\n                  icon: <Terminal className=\"h-5 w-5 text-purple-400\" />,\n                  description: \"Guide to testing Android and iOS applications for security vulnerabilities.\",\n                  link: \"#\"\n                },\n                {\n                  title: \"Infrastructure Security\",\n                  icon: <ShieldCheck className=\"h-5 w-5 text-yellow-400\" />,\n                  description: \"How to identify and report vulnerabilities in cloud infrastructure, servers, and networks.\",\n                  link: \"#\"\n                },\n                {\n                  title: \"Effective Bug Reports\",\n                  icon: <FileText className=\"h-5 w-5 text-matrix\" />,\n                  description: \"How to write clear, comprehensive bug reports that maximize your chances of acceptance and rewards.\",\n                  link: \"#\"\n                },\n                {\n                  title: \"Recon Techniques\",\n                  icon: <Search className=\"h-5 w-5 text-red-400\" />,\n                  description: \"Advanced reconnaissance methods for discovering assets, subdomains, and attack surface mapping.\",\n                  link: \"#\"\n                }\n              ].map((guide, index) => (\n                <div key={index} className=\"terminal-card p-5 rounded-lg hover:bg-surface/50 transition-all duration-200 border border-matrix/30\">\n                  <div className=\"flex items-start\">\n                    <div className=\"h-10 w-10 rounded-md bg-terminal p-2 mr-4 border border-matrix/30 flex items-center justify-center\">\n                      {guide.icon}\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-mono text-light-gray mb-1 flex items-center\">\n                        {guide.title}\n                        <ExternalLink className=\"ml-2 h-3.5 w-3.5 text-dim-gray\" />\n                      </h3>\n                      <p className=\"text-sm text-dim-gray\">{guide.description}</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </TabsContent>\n          \n          {/* Tools Tab */}\n          <TabsContent value=\"tools\" className=\"p-0 mt-0\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {[\n                {\n                  title: \"Burp Suite\",\n                  icon: <Terminal className=\"h-5 w-5 text-red-500\" />,\n                  description: \"The leading web vulnerability scanner and proxy for security testing.\",\n                  link: \"https://portswigger.net/burp\"\n                },\n                {\n                  title: \"OWASP ZAP\",\n                  icon: <AlertTriangle className=\"h-5 w-5 text-orange-500\" />,\n                  description: \"Free and open-source web app scanner, great for automated testing.\",\n                  link: \"https://www.zaproxy.org/\"\n                },\n                {\n                  title: \"Metasploit\",\n                  icon: <ShieldCheck className=\"h-5 w-5 text-blue-500\" />,\n                  description: \"Penetration testing framework for discovering and exploiting vulnerabilities.\",\n                  link: \"https://www.metasploit.com/\"\n                },\n                {\n                  title: \"Amass\",\n                  icon: <Search className=\"h-5 w-5 text-green-500\" />,\n                  description: \"Network mapping of attack surfaces and external asset discovery.\",\n                  link: \"https://github.com/OWASP/Amass\"\n                },\n                {\n                  title: \"Nuclei\",\n                  icon: <Code className=\"h-5 w-5 text-yellow-400\" />,\n                  description: \"Fast and customizable vulnerability scanner based on templates.\",\n                  link: \"https://github.com/projectdiscovery/nuclei\"\n                },\n                {\n                  title: \"MobSF\",\n                  icon: <Terminal className=\"h-5 w-5 text-purple-400\" />,\n                  description: \"Mobile Security Framework for automated mobile app security assessment.\",\n                  link: \"https://github.com/MobSF/Mobile-Security-Framework-MobSF\"\n                }\n              ].map((tool, index) => (\n                <div key={index} className=\"terminal-card p-5 rounded-lg hover:bg-surface/50 transition-all duration-200 border border-matrix/30\">\n                  <div className=\"flex items-start\">\n                    <div className=\"h-10 w-10 rounded-md bg-terminal p-2 mr-4 border border-matrix/30 flex items-center justify-center\">\n                      {tool.icon}\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-mono text-light-gray mb-1 flex items-center\">\n                        {tool.title}\n                        <ExternalLink className=\"ml-2 h-3.5 w-3.5 text-dim-gray\" />\n                      </h3>\n                      <p className=\"text-sm text-dim-gray\">{tool.description}</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </TabsContent>\n          \n          {/* Learning Tab */}\n          <TabsContent value=\"learning\" className=\"p-0 mt-0\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {[\n                {\n                  title: \"OWASP Top 10\",\n                  icon: <AlertTriangle className=\"h-5 w-5 text-red-500\" />,\n                  description: \"Learn about the most critical web application security risks.\",\n                  link: \"https://owasp.org/www-project-top-ten/\"\n                },\n                {\n                  title: \"PortSwigger Academy\",\n                  icon: <GraduationCap className=\"h-5 w-5 text-blue-500\" />,\n                  description: \"Free, hands-on web security training with interactive labs.\",\n                  link: \"https://portswigger.net/web-security\"\n                },\n                {\n                  title: \"HackerOne CTF\",\n                  icon: <Terminal className=\"h-5 w-5 text-matrix\" />,\n                  description: \"Capture the Flag challenges designed to teach hacking skills.\",\n                  link: \"https://ctf.hacker101.com/\"\n                },\n                {\n                  title: \"TryHackMe\",\n                  icon: <Code className=\"h-5 w-5 text-orange-500\" />,\n                  description: \"Learn cybersecurity through hands-on exercises and challenges.\",\n                  link: \"https://tryhackme.com/\"\n                },\n                {\n                  title: \"Web Security Academy\",\n                  icon: <BookOpen className=\"h-5 w-5 text-green-500\" />,\n                  description: \"Free online training for web application security techniques.\",\n                  link: \"https://portswigger.net/web-security\"\n                },\n                {\n                  title: \"Cybersecurity Courses\",\n                  icon: <Youtube className=\"h-5 w-5 text-red-600\" />,\n                  description: \"Video tutorials and courses covering various security topics.\",\n                  link: \"#\"\n                }\n              ].map((resource, index) => (\n                <div key={index} className=\"terminal-card p-5 rounded-lg hover:bg-surface/50 transition-all duration-200 border border-matrix/30\">\n                  <div className=\"flex items-start\">\n                    <div className=\"h-10 w-10 rounded-md bg-terminal p-2 mr-4 border border-matrix/30 flex items-center justify-center\">\n                      {resource.icon}\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-mono text-light-gray mb-1 flex items-center\">\n                        {resource.title}\n                        <ExternalLink className=\"ml-2 h-3.5 w-3.5 text-dim-gray\" />\n                      </h3>\n                      <p className=\"text-sm text-dim-gray\">{resource.description}</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </TabsContent>\n          \n          {/* Community Tab */}\n          <TabsContent value=\"community\" className=\"p-0 mt-0\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {[\n                {\n                  title: \"CyberHunt Forums\",\n                  icon: <Globe className=\"h-5 w-5 text-matrix\" />,\n                  description: \"Join our community forums to discuss vulnerabilities, share tips, and get help.\",\n                  link: \"#\"\n                },\n                {\n                  title: \"Discord Community\",\n                  icon: <Terminal className=\"h-5 w-5 text-blue-400\" />,\n                  description: \"Chat in real-time with other security researchers and CyberHunt team members.\",\n                  link: \"#\"\n                },\n                {\n                  title: \"Bug Bounty Meetups\",\n                  icon: <Globe className=\"h-5 w-5 text-green-500\" />,\n                  description: \"Find local and virtual meetups for bug bounty hunters in your area.\",\n                  link: \"#\"\n                },\n                {\n                  title: \"CyberHunt Blog\",\n                  icon: <FileText className=\"h-5 w-5 text-purple-400\" />,\n                  description: \"Articles, tutorials, and case studies from the CyberHunt team and guest authors.\",\n                  link: \"#\"\n                },\n                {\n                  title: \"Twitter Community\",\n                  icon: <Search className=\"h-5 w-5 text-blue-500\" />,\n                  description: \"Follow us for updates, tips, and connections with other security researchers.\",\n                  link: \"#\"\n                },\n                {\n                  title: \"Mentorship Program\",\n                  icon: <GraduationCap className=\"h-5 w-5 text-yellow-400\" />,\n                  description: \"Connect with experienced security researchers for guidance and mentorship.\",\n                  link: \"#\"\n                }\n              ].map((community, index) => (\n                <div key={index} className=\"terminal-card p-5 rounded-lg hover:bg-surface/50 transition-all duration-200 border border-matrix/30\">\n                  <div className=\"flex items-start\">\n                    <div className=\"h-10 w-10 rounded-md bg-terminal p-2 mr-4 border border-matrix/30 flex items-center justify-center\">\n                      {community.icon}\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-mono text-light-gray mb-1 flex items-center\">\n                        {community.title}\n                        <ExternalLink className=\"ml-2 h-3.5 w-3.5 text-dim-gray\" />\n                      </h3>\n                      <p className=\"text-sm text-dim-gray\">{community.description}</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n}","size_bytes":14105},"client/src/pages/security-page.tsx":{"content":"import { Link } from \"wouter\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport {\n  Shield,\n  Lock,\n  Eye,\n  Key,\n  FileText,\n  AlertTriangle,\n  ShieldCheck,\n  Fingerprint,\n  HardDrive,\n  Network,\n  Server,\n  Globe,\n  Mail,\n  ChevronRight\n} from \"lucide-react\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function SecurityPage() {\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground className=\"opacity-20\" />\n      <Navbar />\n      \n      <main className=\"max-w-6xl mx-auto px-4 py-12 relative z-10\">\n        {/* Header Section */}\n        <div className=\"terminal-card p-8 rounded-lg mb-12\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 items-center\">\n            <div>\n              <h1 className=\"text-4xl font-mono font-bold text-matrix mb-4\">Security at CyberHunt</h1>\n              <p className=\"text-dim-gray mb-6\">\n                As a platform dedicated to cybersecurity, we take the security of our own systems \n                and your data extremely seriously. Learn about our comprehensive security measures, \n                vulnerability disclosure policy, and commitment to protecting our community.\n              </p>\n              <Link href=\"/auth?mode=register\">\n                <a className=\"inline-flex items-center px-4 py-2 border border-matrix bg-terminal rounded-md text-matrix hover:bg-matrix/10 transition duration-200 font-mono text-sm\">\n                  Join Our Security Community <ChevronRight className=\"ml-2 h-4 w-4\" />\n                </a>\n              </Link>\n            </div>\n            <div className=\"flex justify-center\">\n              <div className=\"glow-container w-64 h-64 relative\">\n                <div className=\"absolute inset-0 rounded-full bg-matrix/20 blur-xl\"></div>\n                <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-32 h-32 bg-terminal border-2 border-matrix rounded-full flex items-center justify-center\">\n                  <Shield className=\"h-16 w-16 text-matrix\" />\n                </div>\n                <div className=\"absolute top-0 left-0 w-full h-full animate-spin-slow\">\n                  <div className=\"absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-8 h-8 bg-terminal border-2 border-matrix rounded-full flex items-center justify-center\">\n                    <Lock className=\"h-4 w-4 text-matrix\" />\n                  </div>\n                  <div className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2 translate-y-1/2 w-8 h-8 bg-terminal border-2 border-matrix rounded-full flex items-center justify-center\">\n                    <Key className=\"h-4 w-4 text-electric-blue\" />\n                  </div>\n                  <div className=\"absolute left-0 top-1/2 transform -translate-x-1/2 -translate-y-1/2 w-8 h-8 bg-terminal border-2 border-matrix rounded-full flex items-center justify-center\">\n                    <Eye className=\"h-4 w-4 text-green-500\" />\n                  </div>\n                  <div className=\"absolute right-0 top-1/2 transform translate-x-1/2 -translate-y-1/2 w-8 h-8 bg-terminal border-2 border-matrix rounded-full flex items-center justify-center\">\n                    <AlertTriangle className=\"h-4 w-4 text-yellow-400\" />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Security Measures Section */}\n        <div className=\"mb-12\">\n          <h2 className=\"text-2xl font-mono font-bold text-matrix mb-6\">Our Security Measures</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"terminal-card p-6 rounded-lg border border-matrix/30\">\n              <div className=\"flex items-start mb-4\">\n                <div className=\"h-10 w-10 flex-shrink-0 bg-terminal border border-matrix/30 rounded-md flex items-center justify-center mr-4\">\n                  <Lock className=\"h-5 w-5 text-matrix\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-mono text-light-gray mb-2\">Access Control</h3>\n                  <p className=\"text-dim-gray text-sm\">\n                    We implement strict access controls using a principle of least privilege. Our systems\n                    utilize multi-factor authentication, role-based access control, and detailed audit\n                    logging to ensure only authorized personnel can access sensitive systems.\n                  </p>\n                </div>\n              </div>\n              <ul className=\"space-y-2 text-dim-gray text-sm pl-14\">\n                <li className=\"flex items-start\">\n                  <ShieldCheck className=\"h-4 w-4 text-matrix mr-2 mt-0.5 flex-shrink-0\" />\n                  <span>Multi-factor authentication for all internal systems</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <ShieldCheck className=\"h-4 w-4 text-matrix mr-2 mt-0.5 flex-shrink-0\" />\n                  <span>Granular permissions with regular access reviews</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <ShieldCheck className=\"h-4 w-4 text-matrix mr-2 mt-0.5 flex-shrink-0\" />\n                  <span>IP-based access restrictions for administrative functions</span>\n                </li>\n              </ul>\n            </div>\n            \n            <div className=\"terminal-card p-6 rounded-lg border border-matrix/30\">\n              <div className=\"flex items-start mb-4\">\n                <div className=\"h-10 w-10 flex-shrink-0 bg-terminal border border-matrix/30 rounded-md flex items-center justify-center mr-4\">\n                  <Fingerprint className=\"h-5 w-5 text-electric-blue\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-mono text-light-gray mb-2\">Authentication</h3>\n                  <p className=\"text-dim-gray text-sm\">\n                    User authentication is secured through industry-best practices including strong password\n                    policies, multi-factor authentication options, and secure session management.\n                    We never store plaintext passwords and use modern hashing algorithms.\n                  </p>\n                </div>\n              </div>\n              <ul className=\"space-y-2 text-dim-gray text-sm pl-14\">\n                <li className=\"flex items-start\">\n                  <ShieldCheck className=\"h-4 w-4 text-electric-blue mr-2 mt-0.5 flex-shrink-0\" />\n                  <span>TOTP-based multi-factor authentication support</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <ShieldCheck className=\"h-4 w-4 text-electric-blue mr-2 mt-0.5 flex-shrink-0\" />\n                  <span>OWASP-compliant password policy requirements</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <ShieldCheck className=\"h-4 w-4 text-electric-blue mr-2 mt-0.5 flex-shrink-0\" />\n                  <span>Rate-limiting and brute force protection</span>\n                </li>\n              </ul>\n            </div>\n            \n            <div className=\"terminal-card p-6 rounded-lg border border-matrix/30\">\n              <div className=\"flex items-start mb-4\">\n                <div className=\"h-10 w-10 flex-shrink-0 bg-terminal border border-matrix/30 rounded-md flex items-center justify-center mr-4\">\n                  <HardDrive className=\"h-5 w-5 text-green-500\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-mono text-light-gray mb-2\">Data Protection</h3>\n                  <p className=\"text-dim-gray text-sm\">\n                    All sensitive data is encrypted both in transit and at rest. We use industry-standard\n                    encryption protocols and algorithms. Database backups are encrypted and securely stored\n                    with strict retention policies and access controls.\n                  </p>\n                </div>\n              </div>\n              <ul className=\"space-y-2 text-dim-gray text-sm pl-14\">\n                <li className=\"flex items-start\">\n                  <ShieldCheck className=\"h-4 w-4 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\n                  <span>TLS 1.3 for all data in transit</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <ShieldCheck className=\"h-4 w-4 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\n                  <span>AES-256 encryption for data at rest</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <ShieldCheck className=\"h-4 w-4 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\n                  <span>Regular data protection audits and assessments</span>\n                </li>\n              </ul>\n            </div>\n            \n            <div className=\"terminal-card p-6 rounded-lg border border-matrix/30\">\n              <div className=\"flex items-start mb-4\">\n                <div className=\"h-10 w-10 flex-shrink-0 bg-terminal border border-matrix/30 rounded-md flex items-center justify-center mr-4\">\n                  <Network className=\"h-5 w-5 text-yellow-400\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-mono text-light-gray mb-2\">Network Security</h3>\n                  <p className=\"text-dim-gray text-sm\">\n                    Our infrastructure is protected by multiple layers of network security including\n                    firewalls, intrusion detection systems, and regular penetration testing.\n                    Network traffic is monitored 24/7 for suspicious activity.\n                  </p>\n                </div>\n              </div>\n              <ul className=\"space-y-2 text-dim-gray text-sm pl-14\">\n                <li className=\"flex items-start\">\n                  <ShieldCheck className=\"h-4 w-4 text-yellow-400 mr-2 mt-0.5 flex-shrink-0\" />\n                  <span>Web Application Firewall (WAF) protection</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <ShieldCheck className=\"h-4 w-4 text-yellow-400 mr-2 mt-0.5 flex-shrink-0\" />\n                  <span>DDoS mitigation systems</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <ShieldCheck className=\"h-4 w-4 text-yellow-400 mr-2 mt-0.5 flex-shrink-0\" />\n                  <span>Real-time threat intelligence integration</span>\n                </li>\n              </ul>\n            </div>\n            \n            <div className=\"terminal-card p-6 rounded-lg border border-matrix/30\">\n              <div className=\"flex items-start mb-4\">\n                <div className=\"h-10 w-10 flex-shrink-0 bg-terminal border border-matrix/30 rounded-md flex items-center justify-center mr-4\">\n                  <Server className=\"h-5 w-5 text-purple-400\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-mono text-light-gray mb-2\">Infrastructure Security</h3>\n                  <p className=\"text-dim-gray text-sm\">\n                    Our systems are continuously patched and maintained with the latest security updates.\n                    We employ infrastructure-as-code practices with security controls and compliance\n                    checks built into our CI/CD pipelines.\n                  </p>\n                </div>\n              </div>\n              <ul className=\"space-y-2 text-dim-gray text-sm pl-14\">\n                <li className=\"flex items-start\">\n                  <ShieldCheck className=\"h-4 w-4 text-purple-400 mr-2 mt-0.5 flex-shrink-0\" />\n                  <span>Automated vulnerability scanning and patching</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <ShieldCheck className=\"h-4 w-4 text-purple-400 mr-2 mt-0.5 flex-shrink-0\" />\n                  <span>Container security and image scanning</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <ShieldCheck className=\"h-4 w-4 text-purple-400 mr-2 mt-0.5 flex-shrink-0\" />\n                  <span>Immutable infrastructure patterns</span>\n                </li>\n              </ul>\n            </div>\n            \n            <div className=\"terminal-card p-6 rounded-lg border border-matrix/30\">\n              <div className=\"flex items-start mb-4\">\n                <div className=\"h-10 w-10 flex-shrink-0 bg-terminal border border-matrix/30 rounded-md flex items-center justify-center mr-4\">\n                  <Globe className=\"h-5 w-5 text-red-400\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-mono text-light-gray mb-2\">Application Security</h3>\n                  <p className=\"text-dim-gray text-sm\">\n                    Our development follows secure coding practices with security built into the SDLC.\n                    All code undergoes security review, static analysis, and dynamic security testing\n                    before deployment to production.\n                  </p>\n                </div>\n              </div>\n              <ul className=\"space-y-2 text-dim-gray text-sm pl-14\">\n                <li className=\"flex items-start\">\n                  <ShieldCheck className=\"h-4 w-4 text-red-400 mr-2 mt-0.5 flex-shrink-0\" />\n                  <span>OWASP Top 10 mitigation strategies</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <ShieldCheck className=\"h-4 w-4 text-red-400 mr-2 mt-0.5 flex-shrink-0\" />\n                  <span>Regular security-focused code reviews</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <ShieldCheck className=\"h-4 w-4 text-red-400 mr-2 mt-0.5 flex-shrink-0\" />\n                  <span>Continuous dependency vulnerability monitoring</span>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n        \n        {/* Vulnerability Disclosure Policy */}\n        <div className=\"mb-12\">\n          <h2 className=\"text-2xl font-mono font-bold text-matrix mb-6\">Vulnerability Disclosure Policy</h2>\n          <div className=\"terminal-card p-6 rounded-lg\">\n            <p className=\"text-dim-gray mb-6\">\n              We believe in the power of the security community to help identify and address vulnerabilities.\n              Our vulnerability disclosure policy is designed to provide security researchers with clear guidelines\n              for conducting security testing and reporting vulnerabilities.\n            </p>\n            \n            <Accordion type=\"single\" collapsible className=\"w-full\">\n              <AccordionItem value=\"scope\" className=\"border-b border-matrix/20\">\n                <AccordionTrigger className=\"text-light-gray hover:text-matrix font-mono py-4\">Scope of Testing</AccordionTrigger>\n                <AccordionContent className=\"text-dim-gray pb-4\">\n                  <p className=\"mb-3\">\n                    The following systems are in scope for security testing:\n                  </p>\n                  <ul className=\"space-y-2 pl-4\">\n                    <li className=\"flex items-start\">\n                      <ShieldCheck className=\"h-4 w-4 text-matrix mr-2 mt-0.5 flex-shrink-0\" />\n                      <span>*.cyberhunt.com</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <ShieldCheck className=\"h-4 w-4 text-matrix mr-2 mt-0.5 flex-shrink-0\" />\n                      <span>api.cyberhunt.com</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <ShieldCheck className=\"h-4 w-4 text-matrix mr-2 mt-0.5 flex-shrink-0\" />\n                      <span>CyberHunt mobile applications</span>\n                    </li>\n                  </ul>\n                  <p className=\"mt-3\">\n                    The following are explicitly out of scope:\n                  </p>\n                  <ul className=\"space-y-2 pl-4 mt-2\">\n                    <li className=\"flex items-start\">\n                      <AlertTriangle className=\"h-4 w-4 text-yellow-400 mr-2 mt-0.5 flex-shrink-0\" />\n                      <span>Physical attacks against CyberHunt offices or data centers</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <AlertTriangle className=\"h-4 w-4 text-yellow-400 mr-2 mt-0.5 flex-shrink-0\" />\n                      <span>Social engineering attacks against CyberHunt employees</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <AlertTriangle className=\"h-4 w-4 text-yellow-400 mr-2 mt-0.5 flex-shrink-0\" />\n                      <span>Denial of service attacks</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <AlertTriangle className=\"h-4 w-4 text-yellow-400 mr-2 mt-0.5 flex-shrink-0\" />\n                      <span>Third-party services used by CyberHunt</span>\n                    </li>\n                  </ul>\n                </AccordionContent>\n              </AccordionItem>\n              \n              <AccordionItem value=\"rules\" className=\"border-b border-matrix/20\">\n                <AccordionTrigger className=\"text-light-gray hover:text-matrix font-mono py-4\">Rules of Engagement</AccordionTrigger>\n                <AccordionContent className=\"text-dim-gray pb-4\">\n                  <p className=\"mb-3\">\n                    When conducting security testing against CyberHunt systems, please adhere to the following rules:\n                  </p>\n                  <ul className=\"space-y-2 pl-4\">\n                    <li className=\"flex items-start\">\n                      <ShieldCheck className=\"h-4 w-4 text-matrix mr-2 mt-0.5 flex-shrink-0\" />\n                      <span>Do not access, modify, or delete data that does not belong to you</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <ShieldCheck className=\"h-4 w-4 text-matrix mr-2 mt-0.5 flex-shrink-0\" />\n                      <span>Do not conduct testing that could degrade or disrupt our services</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <ShieldCheck className=\"h-4 w-4 text-matrix mr-2 mt-0.5 flex-shrink-0\" />\n                      <span>Do not share access to CyberHunt systems with other individuals</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <ShieldCheck className=\"h-4 w-4 text-matrix mr-2 mt-0.5 flex-shrink-0\" />\n                      <span>Do not conduct automated scanning without prior approval</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <ShieldCheck className=\"h-4 w-4 text-matrix mr-2 mt-0.5 flex-shrink-0\" />\n                      <span>Do not publicly disclose a vulnerability before we have had a chance to address it</span>\n                    </li>\n                  </ul>\n                </AccordionContent>\n              </AccordionItem>\n              \n              <AccordionItem value=\"reporting\" className=\"border-b border-matrix/20\">\n                <AccordionTrigger className=\"text-light-gray hover:text-matrix font-mono py-4\">Reporting a Vulnerability</AccordionTrigger>\n                <AccordionContent className=\"text-dim-gray pb-4\">\n                  <p className=\"mb-3\">\n                    To report a vulnerability to CyberHunt, please submit your findings through our dedicated security reporting channel:\n                  </p>\n                  <div className=\"bg-terminal p-4 rounded-md mb-4\">\n                    <div className=\"flex items-center\">\n                      <Mail className=\"h-5 w-5 text-matrix mr-2\" />\n                      <a href=\"mailto:security@cyberhunt.com\" className=\"text-matrix font-mono\">security@cyberhunt.com</a>\n                    </div>\n                  </div>\n                  <p className=\"mb-3\">Please include the following information in your report:</p>\n                  <ul className=\"space-y-2 pl-4\">\n                    <li className=\"flex items-start\">\n                      <ShieldCheck className=\"h-4 w-4 text-matrix mr-2 mt-0.5 flex-shrink-0\" />\n                      <span>A detailed description of the vulnerability</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <ShieldCheck className=\"h-4 w-4 text-matrix mr-2 mt-0.5 flex-shrink-0\" />\n                      <span>Steps to reproduce the issue</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <ShieldCheck className=\"h-4 w-4 text-matrix mr-2 mt-0.5 flex-shrink-0\" />\n                      <span>Potential impact of the vulnerability</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <ShieldCheck className=\"h-4 w-4 text-matrix mr-2 mt-0.5 flex-shrink-0\" />\n                      <span>Any supporting materials (screenshots, videos, etc.)</span>\n                    </li>\n                  </ul>\n                </AccordionContent>\n              </AccordionItem>\n              \n              <AccordionItem value=\"response\" className=\"border-b border-matrix/20\">\n                <AccordionTrigger className=\"text-light-gray hover:text-matrix font-mono py-4\">Our Response Process</AccordionTrigger>\n                <AccordionContent className=\"text-dim-gray pb-4\">\n                  <p className=\"mb-3\">When we receive a vulnerability report, you can expect the following response timeline:</p>\n                  <ul className=\"space-y-2 pl-4\">\n                    <li className=\"flex items-start\">\n                      <ShieldCheck className=\"h-4 w-4 text-matrix mr-2 mt-0.5 flex-shrink-0\" />\n                      <span><strong>Initial Response:</strong> We'll acknowledge receipt of your report within 24 hours</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <ShieldCheck className=\"h-4 w-4 text-matrix mr-2 mt-0.5 flex-shrink-0\" />\n                      <span><strong>Triage:</strong> We'll evaluate the report and determine its impact and validity within 3 business days</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <ShieldCheck className=\"h-4 w-4 text-matrix mr-2 mt-0.5 flex-shrink-0\" />\n                      <span><strong>Remediation:</strong> We'll work to address valid vulnerabilities, with timelines based on severity</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <ShieldCheck className=\"h-4 w-4 text-matrix mr-2 mt-0.5 flex-shrink-0\" />\n                      <span><strong>Verification:</strong> We'll validate that our fix addresses the reported issue</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <ShieldCheck className=\"h-4 w-4 text-matrix mr-2 mt-0.5 flex-shrink-0\" />\n                      <span><strong>Disclosure:</strong> We'll coordinate with you on public disclosure, if applicable</span>\n                    </li>\n                  </ul>\n                </AccordionContent>\n              </AccordionItem>\n              \n              <AccordionItem value=\"rewards\" className=\"border-b-0\">\n                <AccordionTrigger className=\"text-light-gray hover:text-matrix font-mono py-4\">Rewards & Recognition</AccordionTrigger>\n                <AccordionContent className=\"text-dim-gray pb-4\">\n                  <p className=\"mb-3\">\n                    While we don't operate a formal bug bounty program for our platform, we do recognize and appreciate\n                    the efforts of security researchers who help us improve our security:\n                  </p>\n                  <ul className=\"space-y-2 pl-4\">\n                    <li className=\"flex items-start\">\n                      <ShieldCheck className=\"h-4 w-4 text-matrix mr-2 mt-0.5 flex-shrink-0\" />\n                      <span>Public acknowledgment on our security hall of fame (with your permission)</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <ShieldCheck className=\"h-4 w-4 text-matrix mr-2 mt-0.5 flex-shrink-0\" />\n                      <span>Letter of appreciation that can be used as a reference</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <ShieldCheck className=\"h-4 w-4 text-matrix mr-2 mt-0.5 flex-shrink-0\" />\n                      <span>Occasional rewards at our discretion for exceptional findings</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <ShieldCheck className=\"h-4 w-4 text-matrix mr-2 mt-0.5 flex-shrink-0\" />\n                      <span>Reputation points and special badges on your CyberHunt profile</span>\n                    </li>\n                  </ul>\n                </AccordionContent>\n              </AccordionItem>\n            </Accordion>\n          </div>\n        </div>\n        \n        {/* Certifications & Compliance */}\n        <div className=\"mb-12\">\n          <h2 className=\"text-2xl font-mono font-bold text-matrix mb-6\">Certifications & Compliance</h2>\n          <div className=\"terminal-card p-6 rounded-lg\">\n            <p className=\"text-dim-gray mb-6\">\n              CyberHunt is committed to maintaining the highest standards of security and privacy.\n              We adhere to industry best practices and maintain several security certifications:\n            </p>\n            \n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-6\">\n              <div className=\"border border-matrix/30 rounded-lg p-5 hover:bg-matrix/5 transition duration-200\">\n                <div className=\"flex items-center mb-3\">\n                  <div className=\"h-10 w-10 rounded-md bg-terminal border border-matrix/30 flex items-center justify-center mr-4\">\n                    <ShieldCheck className=\"h-5 w-5 text-matrix\" />\n                  </div>\n                  <h3 className=\"text-lg font-mono text-light-gray\">SOC 2 Type II</h3>\n                </div>\n                <p className=\"text-dim-gray text-sm mb-4\">\n                  Our platform has successfully completed SOC 2 Type II audits, demonstrating our commitment\n                  to security, availability, processing integrity, confidentiality, and privacy.\n                </p>\n                <div className=\"flex justify-end\">\n                  <Link href=\"/security/certifications\">\n                    <a className=\"text-matrix text-sm flex items-center\">\n                      Learn More <ChevronRight className=\"ml-1 h-4 w-4\" />\n                    </a>\n                  </Link>\n                </div>\n              </div>\n              \n              <div className=\"border border-matrix/30 rounded-lg p-5 hover:bg-matrix/5 transition duration-200\">\n                <div className=\"flex items-center mb-3\">\n                  <div className=\"h-10 w-10 rounded-md bg-terminal border border-matrix/30 flex items-center justify-center mr-4\">\n                    <ShieldCheck className=\"h-5 w-5 text-electric-blue\" />\n                  </div>\n                  <h3 className=\"text-lg font-mono text-light-gray\">ISO 27001</h3>\n                </div>\n                <p className=\"text-dim-gray text-sm mb-4\">\n                  CyberHunt maintains ISO 27001 certification, the international standard for information\n                  security management systems (ISMS).\n                </p>\n                <div className=\"flex justify-end\">\n                  <Link href=\"/security/certifications\">\n                    <a className=\"text-matrix text-sm flex items-center\">\n                      Learn More <ChevronRight className=\"ml-1 h-4 w-4\" />\n                    </a>\n                  </Link>\n                </div>\n              </div>\n              \n              <div className=\"border border-matrix/30 rounded-lg p-5 hover:bg-matrix/5 transition duration-200\">\n                <div className=\"flex items-center mb-3\">\n                  <div className=\"h-10 w-10 rounded-md bg-terminal border border-matrix/30 flex items-center justify-center mr-4\">\n                    <ShieldCheck className=\"h-5 w-5 text-green-500\" />\n                  </div>\n                  <h3 className=\"text-lg font-mono text-light-gray\">GDPR Compliance</h3>\n                </div>\n                <p className=\"text-dim-gray text-sm mb-4\">\n                  Our platform is fully compliant with the General Data Protection Regulation (GDPR),\n                  providing robust privacy protections for users in the European Union.\n                </p>\n                <div className=\"flex justify-end\">\n                  <Link href=\"/privacy-policy\">\n                    <a className=\"text-matrix text-sm flex items-center\">\n                      Learn More <ChevronRight className=\"ml-1 h-4 w-4\" />\n                    </a>\n                  </Link>\n                </div>\n              </div>\n              \n              <div className=\"border border-matrix/30 rounded-lg p-5 hover:bg-matrix/5 transition duration-200\">\n                <div className=\"flex items-center mb-3\">\n                  <div className=\"h-10 w-10 rounded-md bg-terminal border border-matrix/30 flex items-center justify-center mr-4\">\n                    <ShieldCheck className=\"h-5 w-5 text-yellow-400\" />\n                  </div>\n                  <h3 className=\"text-lg font-mono text-light-gray\">CCPA Compliance</h3>\n                </div>\n                <p className=\"text-dim-gray text-sm mb-4\">\n                  CyberHunt complies with the California Consumer Privacy Act (CCPA), respecting the\n                  privacy rights of California residents.\n                </p>\n                <div className=\"flex justify-end\">\n                  <Link href=\"/privacy-policy\">\n                    <a className=\"text-matrix text-sm flex items-center\">\n                      Learn More <ChevronRight className=\"ml-1 h-4 w-4\" />\n                    </a>\n                  </Link>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Security Contact */}\n        <div className=\"terminal-card p-8 rounded-lg text-center\">\n          <h2 className=\"text-2xl font-mono font-bold text-matrix mb-3\">Contact Our Security Team</h2>\n          <p className=\"text-dim-gray mb-6 max-w-2xl mx-auto\">\n            For security-related inquiries, vulnerability reports, or concerns, please contact our\n            dedicated security team. We take all security matters seriously and appreciate your help\n            in keeping CyberHunt secure.\n          </p>\n          <div className=\"flex justify-center mb-6\">\n            <a \n              href=\"mailto:security@cyberhunt.com\" \n              className=\"inline-flex items-center px-6 py-3 bg-matrix text-black rounded-md font-mono hover:bg-matrix/80 transition duration-200\"\n            >\n              <Mail className=\"mr-2 h-5 w-5\" />\n              security@cyberhunt.com\n            </a>\n          </div>\n          <p className=\"text-xs text-dim-gray\">\n            For non-security issues, please contact <a href=\"mailto:support@cyberhunt.com\" className=\"text-matrix\">support@cyberhunt.com</a>\n          </p>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":31888},"client/src/pages/settings-page.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { z } from 'zod';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { \n  User, Bell, Lock, LogOut, \n  Eye, EyeOff, CheckCircle, Loader2, Save, AlertTriangle \n} from 'lucide-react';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Navbar } from '@/components/layout/navbar';\nimport { MatrixBackground } from '@/components/matrix-background';\nimport { apiRequest } from '@/lib/queryClient';\n\n// Form schema for profile update\nconst profileUpdateSchema = z.object({\n  username: z.string().min(3, { message: 'Username must be at least 3 characters long' }).optional(),\n  email: z.string().email({ message: 'Please enter a valid email address' }).optional(),\n});\n\n// Form schema for password update\nconst passwordUpdateSchema = z.object({\n  currentPassword: z.string().min(1, { message: 'Current password is required' }),\n  newPassword: z.string().min(6, { message: 'Password must be at least 6 characters long' }),\n  confirmPassword: z.string().min(1, { message: 'Please confirm your password' }),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype ProfileUpdateFormValues = z.infer<typeof profileUpdateSchema>;\ntype PasswordUpdateFormValues = z.infer<typeof passwordUpdateSchema>;\n\n// Notification settings interface\ninterface NotificationSettings {\n  emailNotifications: boolean;\n  programUpdates: boolean;\n  submissionUpdates: boolean;\n  securityAlerts: boolean;\n  marketingEmails: boolean;\n}\n\nexport default function SettingsPage() {\n  const [, navigate] = useLocation();\n  const { user, logoutMutation } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState('profile');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [notificationSettings, setNotificationSettings] = useState<NotificationSettings>({\n    emailNotifications: true,\n    programUpdates: true,\n    submissionUpdates: true,\n    securityAlerts: true,\n    marketingEmails: false,\n  });\n\n  // Initialize the profile form\n  const profileForm = useForm<ProfileUpdateFormValues>({\n    resolver: zodResolver(profileUpdateSchema),\n    defaultValues: {\n      username: user?.username || '',\n      email: user?.email || '',\n    },\n  });\n\n  // Initialize the password form\n  const passwordForm = useForm<PasswordUpdateFormValues>({\n    resolver: zodResolver(passwordUpdateSchema),\n    defaultValues: {\n      currentPassword: '',\n      newPassword: '',\n      confirmPassword: '',\n    },\n  });\n\n  // Handle profile update\n  const profileUpdateMutation = useMutation({\n    mutationFn: async (data: ProfileUpdateFormValues) => {\n      const res = await apiRequest('PATCH', '/api/user', data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user'] });\n      toast({\n        title: 'Profile updated',\n        description: 'Your profile has been successfully updated.',\n        variant: 'default',\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Failed to update profile',\n        description: error.message || 'Something went wrong.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Handle password update\n  const passwordUpdateMutation = useMutation({\n    mutationFn: async (data: PasswordUpdateFormValues) => {\n      const res = await apiRequest('POST', '/api/user/change-password', {\n        currentPassword: data.currentPassword,\n        newPassword: data.newPassword,\n      });\n      return await res.json();\n    },\n    onSuccess: () => {\n      passwordForm.reset();\n      toast({\n        title: 'Password updated',\n        description: 'Your password has been successfully changed.',\n        variant: 'default',\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Failed to update password',\n        description: error.message || 'Something went wrong.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Handle notification settings update\n  const updateNotificationSettings = () => {\n    toast({\n      title: 'Notification settings updated',\n      description: 'Your notification preferences have been saved.',\n      variant: 'default',\n    });\n  };\n\n  // Handle profile form submission\n  const onProfileSubmit = (data: ProfileUpdateFormValues) => {\n    profileUpdateMutation.mutate(data);\n  };\n\n  // Handle password form submission\n  const onPasswordSubmit = (data: PasswordUpdateFormValues) => {\n    passwordUpdateMutation.mutate(data);\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    logoutMutation.mutate(undefined, {\n      onSuccess: () => {\n        navigate('/auth');\n        toast({\n          title: 'Logged out',\n          description: 'You have been successfully logged out.',\n          variant: 'default',\n        });\n      },\n    });\n  };\n\n  // Handle resend verification email\n  const resendVerificationEmail = () => {\n    toast({\n      title: 'Verification email sent',\n      description: 'Please check your inbox for the verification link.',\n      variant: 'default',\n    });\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-deep-black flex flex-col items-center justify-center p-4\">\n        <AlertTriangle className=\"h-16 w-16 text-alert-red mb-4\" />\n        <h2 className=\"text-xl text-alert-red mb-2 text-center\">Authentication Required</h2>\n        <p className=\"text-dim-gray text-center mb-6\">You need to be logged in to view this page.</p>\n        <Button \n          variant=\"default\" \n          onClick={() => navigate('/auth')}\n          className=\"bg-matrix text-black hover:bg-matrix/80\"\n        >\n          Log In\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground className=\"opacity-20\" />\n      <Navbar />\n      \n      <main className=\"max-w-4xl mx-auto px-4 py-12 relative z-10\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-mono font-bold text-matrix mb-2\">Account Settings</h1>\n          <p className=\"text-dim-gray\">\n            Manage your account preferences, security settings, and notification options.\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-[220px_1fr] gap-6\">\n          {/* Sidebar */}\n          <div className=\"terminal-card p-4 rounded-lg h-fit\">\n            <nav className=\"space-y-1\">\n              <button\n                onClick={() => setActiveTab('profile')}\n                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-md transition-colors ${\n                  activeTab === 'profile' ? 'bg-matrix text-black' : 'text-dim-gray hover:text-matrix hover:bg-dark-terminal'\n                }`}\n              >\n                <User size={18} />\n                <span>Profile</span>\n              </button>\n              \n              <button\n                onClick={() => setActiveTab('security')}\n                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-md transition-colors ${\n                  activeTab === 'security' ? 'bg-matrix text-black' : 'text-dim-gray hover:text-matrix hover:bg-dark-terminal'\n                }`}\n              >\n                <Lock size={18} />\n                <span>Security</span>\n              </button>\n              \n              <button\n                onClick={() => setActiveTab('notifications')}\n                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-md transition-colors ${\n                  activeTab === 'notifications' ? 'bg-matrix text-black' : 'text-dim-gray hover:text-matrix hover:bg-dark-terminal'\n                }`}\n              >\n                <Bell size={18} />\n                <span>Notifications</span>\n              </button>\n              \n              <hr className=\"border-dark-terminal my-2\" />\n              \n              <button\n                onClick={handleLogout}\n                className=\"w-full flex items-center space-x-3 px-3 py-2 rounded-md text-alert-red hover:bg-alert-red/10 transition-colors\"\n              >\n                <LogOut size={18} />\n                <span>Logout</span>\n              </button>\n            </nav>\n          </div>\n          \n          {/* Main content */}\n          <div>\n            {activeTab === 'profile' && (\n              <Card className=\"terminal-card border-dark-terminal\">\n                <CardHeader>\n                  <CardTitle className=\"text-matrix\">Profile Information</CardTitle>\n                  <CardDescription>\n                    Update your account profile information and preferences.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={profileForm.handleSubmit(onProfileSubmit)} className=\"space-y-6\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"username\">Username</Label>\n                      <Input\n                        id=\"username\"\n                        className=\"terminal-input\"\n                        {...profileForm.register('username')}\n                      />\n                      {profileForm.formState.errors.username && (\n                        <p className=\"text-alert-red text-sm mt-1\">\n                          {profileForm.formState.errors.username.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"email\">Email</Label>\n                      <div className=\"flex flex-col space-y-2\">\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          className=\"terminal-input\"\n                          {...profileForm.register('email')}\n                        />\n                        {!user.isEmailVerified && (\n                          <div className=\"flex items-center justify-between p-2 bg-dark-terminal rounded\">\n                            <div className=\"flex items-center\">\n                              <AlertTriangle className=\"h-4 w-4 text-yellow-500 mr-2\" />\n                              <span className=\"text-sm text-yellow-500\">Email not verified</span>\n                            </div>\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={resendVerificationEmail}\n                              className=\"text-xs\"\n                            >\n                              Resend Verification\n                            </Button>\n                          </div>\n                        )}\n                        {user.isEmailVerified && (\n                          <div className=\"flex items-center p-2 bg-dark-terminal rounded\">\n                            <CheckCircle className=\"h-4 w-4 text-green-500 mr-2\" />\n                            <span className=\"text-sm text-green-500\">Email verified</span>\n                          </div>\n                        )}\n                      </div>\n                      {profileForm.formState.errors.email && (\n                        <p className=\"text-alert-red text-sm mt-1\">\n                          {profileForm.formState.errors.email.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <Button \n                      type=\"submit\" \n                      disabled={profileUpdateMutation.isPending}\n                      className=\"w-full bg-matrix text-black hover:bg-matrix/80\"\n                    >\n                      {profileUpdateMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          Updating...\n                        </>\n                      ) : (\n                        <>\n                          <Save className=\"mr-2 h-4 w-4\" />\n                          Save Changes\n                        </>\n                      )}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            )}\n            \n            {activeTab === 'security' && (\n              <Card className=\"terminal-card border-dark-terminal\">\n                <CardHeader>\n                  <CardTitle className=\"text-matrix\">Security Settings</CardTitle>\n                  <CardDescription>\n                    Update your password and manage your account security.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={passwordForm.handleSubmit(onPasswordSubmit)} className=\"space-y-6\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"currentPassword\">Current Password</Label>\n                      <div className=\"relative\">\n                        <Input\n                          id=\"currentPassword\"\n                          type={showPassword ? \"text\" : \"password\"}\n                          className=\"terminal-input pr-10\"\n                          {...passwordForm.register('currentPassword')}\n                        />\n                        <button\n                          type=\"button\"\n                          className=\"absolute right-3 top-1/2 -translate-y-1/2 text-dim-gray hover:text-matrix\"\n                          onClick={() => setShowPassword(!showPassword)}\n                        >\n                          {showPassword ? <EyeOff size={16} /> : <Eye size={16} />}\n                        </button>\n                      </div>\n                      {passwordForm.formState.errors.currentPassword && (\n                        <p className=\"text-alert-red text-sm mt-1\">\n                          {passwordForm.formState.errors.currentPassword.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"newPassword\">New Password</Label>\n                      <div className=\"relative\">\n                        <Input\n                          id=\"newPassword\"\n                          type={showNewPassword ? \"text\" : \"password\"}\n                          className=\"terminal-input pr-10\"\n                          {...passwordForm.register('newPassword')}\n                        />\n                        <button\n                          type=\"button\"\n                          className=\"absolute right-3 top-1/2 -translate-y-1/2 text-dim-gray hover:text-matrix\"\n                          onClick={() => setShowNewPassword(!showNewPassword)}\n                        >\n                          {showNewPassword ? <EyeOff size={16} /> : <Eye size={16} />}\n                        </button>\n                      </div>\n                      {passwordForm.formState.errors.newPassword && (\n                        <p className=\"text-alert-red text-sm mt-1\">\n                          {passwordForm.formState.errors.newPassword.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"confirmPassword\">Confirm New Password</Label>\n                      <Input\n                        id=\"confirmPassword\"\n                        type=\"password\"\n                        className=\"terminal-input\"\n                        {...passwordForm.register('confirmPassword')}\n                      />\n                      {passwordForm.formState.errors.confirmPassword && (\n                        <p className=\"text-alert-red text-sm mt-1\">\n                          {passwordForm.formState.errors.confirmPassword.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <Button \n                      type=\"submit\" \n                      disabled={passwordUpdateMutation.isPending}\n                      className=\"w-full bg-matrix text-black hover:bg-matrix/80\"\n                    >\n                      {passwordUpdateMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          Updating...\n                        </>\n                      ) : (\n                        <>\n                          <Save className=\"mr-2 h-4 w-4\" />\n                          Update Password\n                        </>\n                      )}\n                    </Button>\n                  </form>\n\n                  <div className=\"mt-8 p-4 border border-dark-terminal rounded-lg\">\n                    <h3 className=\"text-matrix text-lg mb-2\">Session Information</h3>\n                    <p className=\"text-dim-gray text-sm mb-4\">\n                      Your session is secure. If you're concerned about unauthorized access, you can log out from all devices.\n                    </p>\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full hover:bg-dark-terminal hover:text-alert-red border-dark-terminal\"\n                    >\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      Logout from all devices\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n            \n            {activeTab === 'notifications' && (\n              <Card className=\"terminal-card border-dark-terminal\">\n                <CardHeader>\n                  <CardTitle className=\"text-matrix\">Notification Preferences</CardTitle>\n                  <CardDescription>\n                    Control which notifications you receive and how they are delivered.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label className=\"text-light-gray\">Email Notifications</Label>\n                        <p className=\"text-dim-gray text-sm\">\n                          Receive notifications via email\n                        </p>\n                      </div>\n                      <Switch\n                        checked={notificationSettings.emailNotifications}\n                        onCheckedChange={(checked) => \n                          setNotificationSettings({...notificationSettings, emailNotifications: checked})\n                        }\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label className=\"text-light-gray\">Program Updates</Label>\n                        <p className=\"text-dim-gray text-sm\">\n                          Get notified when programs are added or updated\n                        </p>\n                      </div>\n                      <Switch\n                        checked={notificationSettings.programUpdates}\n                        onCheckedChange={(checked) => \n                          setNotificationSettings({...notificationSettings, programUpdates: checked})\n                        }\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label className=\"text-light-gray\">Submission Updates</Label>\n                        <p className=\"text-dim-gray text-sm\">\n                          Get notified when your submissions change status\n                        </p>\n                      </div>\n                      <Switch\n                        checked={notificationSettings.submissionUpdates}\n                        onCheckedChange={(checked) => \n                          setNotificationSettings({...notificationSettings, submissionUpdates: checked})\n                        }\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label className=\"text-light-gray\">Security Alerts</Label>\n                        <p className=\"text-dim-gray text-sm\">\n                          Get notified about security-related events on your account\n                        </p>\n                      </div>\n                      <Switch\n                        checked={notificationSettings.securityAlerts}\n                        onCheckedChange={(checked) => \n                          setNotificationSettings({...notificationSettings, securityAlerts: checked})\n                        }\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label className=\"text-light-gray\">Marketing Emails</Label>\n                        <p className=\"text-dim-gray text-sm\">\n                          Receive promotional offers and newsletters\n                        </p>\n                      </div>\n                      <Switch\n                        checked={notificationSettings.marketingEmails}\n                        onCheckedChange={(checked) => \n                          setNotificationSettings({...notificationSettings, marketingEmails: checked})\n                        }\n                      />\n                    </div>\n\n                    <Button \n                      onClick={updateNotificationSettings}\n                      className=\"w-full bg-matrix text-black hover:bg-matrix/80\"\n                    >\n                      <Save className=\"mr-2 h-4 w-4\" />\n                      Save Notification Settings\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":22854},"client/src/pages/simple-admin-login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Link, useLocation } from \"wouter\";\nimport { Loader2, Shield, Eye, EyeOff, ArrowLeft, Terminal, Lock } from \"lucide-react\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst adminLoginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype AdminLoginFormValues = z.infer<typeof adminLoginSchema>;\n\nexport default function SimpleAdminLogin() {\n  const [, navigate] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<AdminLoginFormValues>({\n    resolver: zodResolver(adminLoginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: AdminLoginFormValues) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"/api/admin/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\",\n        body: JSON.stringify(data),\n      });\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        throw new Error(result.message || \"Login failed\");\n      }\n\n      // Store the admin token in localStorage for API calls\n      if (result.token) {\n        localStorage.setItem('adminToken', result.token);\n      }\n\n      toast({\n        title: \"Access Granted\",\n        description: \"Welcome to the cyber command center\",\n      });\n\n      navigate(\"/admin/dashboard\");\n    } catch (error) {\n      toast({\n        title: \"Access Denied\",\n        description: error instanceof Error ? error.message : \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-deep-black flex items-center justify-center p-4 relative overflow-hidden\">\n      <MatrixBackground />\n      \n      {/* Back button */}\n      <Link \n        to=\"/\" \n        className=\"absolute top-6 left-6 text-matrix hover:text-matrix/80 flex items-center gap-2 z-20 transition-colors duration-300\"\n      >\n        <ArrowLeft className=\"h-5 w-5\" />\n        <span className=\"text-sm font-mono\">BACK_TO_HOME</span>\n      </Link>\n\n      {/* Main login container */}\n      <div className=\"w-full max-w-md relative z-10\">\n        {/* Glowing effects */}\n        <div className=\"absolute -top-20 -left-20 w-40 h-40 bg-matrix/20 rounded-full blur-3xl animate-pulse\"></div>\n        <div className=\"absolute -bottom-20 -right-20 w-40 h-40 bg-matrix/10 rounded-full blur-3xl animate-pulse\"></div>\n        \n        {/* Login card */}\n        <div className=\"relative bg-terminal/90 backdrop-blur-sm border border-matrix/30 rounded-lg p-8 shadow-2xl\">\n          {/* Animated border effect */}\n          <div className=\"absolute inset-0 bg-gradient-to-r from-matrix/0 via-matrix/20 to-matrix/0 rounded-lg\">\n            <div className=\"absolute inset-[1px] bg-terminal/90 rounded-lg\"></div>\n          </div>\n          \n          <div className=\"relative z-10\">\n            {/* Header section */}\n            <div className=\"text-center mb-8\">\n              <div className=\"flex justify-center mb-6\">\n                <div className=\"relative\">\n                  <div className=\"absolute inset-0 bg-matrix/30 rounded-full blur-xl\"></div>\n                  <div className=\"relative h-16 w-16 bg-terminal border-2 border-matrix rounded-full flex items-center justify-center\">\n                    <Shield className=\"h-8 w-8 text-matrix\" />\n                  </div>\n                </div>\n              </div>\n              \n              <h1 className=\"text-4xl font-mono font-bold text-matrix mb-2 tracking-wider\">\n                CYBER HUNT\n              </h1>\n              <h2 className=\"text-2xl font-mono font-bold text-light-gray mb-3 tracking-wide\">\n                ADMIN PANEL\n              </h2>\n              <div className=\"flex items-center justify-center gap-2 text-matrix/70 text-sm font-mono\">\n                <Lock className=\"h-4 w-4\" />\n                <span>RESTRICTED_ACCESS_ONLY</span>\n              </div>\n            </div>\n\n            {/* Login form */}\n            <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n              {/* Email field */}\n              <div className=\"space-y-2\">\n                <label className=\"block text-matrix text-sm font-mono tracking-wide\">\n                  &gt; EMAIL_ADDRESS\n                </label>\n                <div className=\"relative\">\n                  <input\n                    type=\"email\"\n                    className=\"w-full bg-terminal/50 border border-matrix/30 rounded px-4 py-3 font-mono text-light-gray placeholder-dim-gray focus:outline-none focus:border-matrix focus:ring-2 focus:ring-matrix/30 transition-all duration-300\"\n                    placeholder=\"admin@cyberhunt.com\"\n                    style={{ caretColor: '#00ff00' }}\n                    {...register('email')}\n                    autoComplete=\"email\"\n                  />\n                  <div className=\"absolute inset-0 border border-matrix/20 rounded pointer-events-none opacity-0 hover:opacity-100 transition-opacity duration-300\"></div>\n                </div>\n                {errors.email && (\n                  <div className=\"text-alert-red text-xs font-mono flex items-center gap-1\">\n                    <span>&gt;</span>\n                    {errors.email.message}\n                  </div>\n                )}\n              </div>\n\n              {/* Password field */}\n              <div className=\"space-y-2\">\n                <label className=\"block text-matrix text-sm font-mono tracking-wide\">\n                  &gt; PASSWORD\n                </label>\n                <div className=\"relative\">\n                  <input\n                    type={showPassword ? \"text\" : \"password\"}\n                    className=\"w-full bg-terminal/50 border border-matrix/30 rounded px-4 py-3 pr-12 font-mono text-light-gray placeholder-dim-gray focus:outline-none focus:border-matrix focus:ring-2 focus:ring-matrix/30 transition-all duration-300\"\n                    placeholder=\"••••••••••••\"\n                    style={{ caretColor: '#00ff00' }}\n                    {...register('password')}\n                    autoComplete=\"current-password\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-1/2 -translate-y-1/2 text-dim-gray hover:text-matrix transition-colors duration-200\"\n                  >\n                    {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                  </button>\n                </div>\n                {errors.password && (\n                  <div className=\"text-alert-red text-xs font-mono flex items-center gap-1\">\n                    <span>&gt;</span>\n                    {errors.password.message}\n                  </div>\n                )}\n              </div>\n\n              {/* Login button */}\n              <div className=\"pt-4\">\n                <Button\n                  type=\"submit\"\n                  disabled={isLoading}\n                  className=\"w-full bg-matrix/10 hover:bg-matrix/20 border-2 border-matrix text-matrix font-mono text-lg py-3 rounded transition-all duration-300 hover:shadow-[0_0_20px_rgba(0,255,0,0.3)] disabled:opacity-50 disabled:cursor-not-allowed tracking-wider\"\n                >\n                  {isLoading ? (\n                    <span className=\"flex items-center justify-center\">\n                      <Loader2 className=\"mr-3 h-5 w-5 animate-spin\" />\n                      AUTHENTICATING...\n                    </span>\n                  ) : (\n                    <span className=\"flex items-center justify-center\">\n                      <Terminal className=\"mr-3 h-5 w-5\" />\n                      INITIATE_LOGIN\n                    </span>\n                  )}\n                </Button>\n              </div>\n            </form>\n\n            {/* Footer */}\n            <div className=\"mt-8 text-center\">\n              <p className=\"text-gray-500 text-xs font-mono\">\n                UNAUTHORIZED_ACCESS_PROHIBITED\n              </p>\n              <div className=\"flex justify-center mt-2\">\n                <div className=\"w-16 h-[1px] bg-gradient-to-r from-transparent via-green-400/50 to-transparent\"></div>\n              </div>\n            </div>\n\n            {/* Credentials hint for testing */}\n            <div className=\"mt-6 p-4 bg-green-400/5 border border-green-400/20 rounded text-center\">\n              <p className=\"text-green-400/80 text-xs font-mono mb-2\">DEFAULT CREDENTIALS:</p>\n              <p className=\"text-white text-xs font-mono\">Email: admin@cyberhunt.com</p>\n              <p className=\"text-white text-xs font-mono\">Password: AdminSecure123!</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Scanning line effect */}\n        <div className=\"absolute inset-0 pointer-events-none\">\n          <div className=\"absolute top-0 left-0 w-full h-[2px] bg-gradient-to-r from-transparent via-green-400/60 to-transparent animate-pulse\"></div>\n        </div>\n      </div>\n\n      {/* Additional matrix effects */}\n      <div className=\"absolute top-1/4 left-10 w-1 h-32 bg-gradient-to-b from-green-400/0 via-green-400/40 to-green-400/0 animate-pulse\"></div>\n      <div className=\"absolute bottom-1/4 right-10 w-1 h-24 bg-gradient-to-b from-green-400/0 via-green-400/40 to-green-400/0 animate-pulse\"></div>\n    </div>\n  );\n}","size_bytes":9977},"client/src/pages/submit-bug-page.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { insertSubmissionSchema, Program } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { BugPriceEstimator } from \"@/components/bug-price-estimator\";\nimport { z } from \"zod\";\nimport { Redirect } from \"wouter\";\nimport { Loader2, Send, AlertTriangle, Bug } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { BugReportTemplates } from \"@/components/bug-report-templates\";\nimport { AIReportEnhancer } from \"@/components/ai-report-enhancer\";\nimport { VulnerabilityGradingForm } from \"@/components/vulnerability-grading-form\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\n// Extended submission schema with validation\nconst submitBugSchema = insertSubmissionSchema.extend({\n  title: z.string().min(5, \"Title must be at least 5 characters\"),\n  description: z.string().min(20, \"Description must be at least 20 characters\"),\n  type: z.string().min(1, \"Please select a bug type\"),\n  severity: z.string().min(1, \"Please select a severity level\"),\n  programId: z.number().min(1, \"Please select a program\"),\n});\n\ntype SubmitBugFormValues = z.infer<typeof submitBugSchema>;\n\nexport default function SubmitBugPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  // Fetch available programs\n  const {\n    data: programs,\n    isLoading: programsLoading,\n    error: programsError\n  } = useQuery<Program[]>({\n    queryKey: [\"/api/programs\"],\n  });\n\n  // Bug submission form\n  const form = useForm<SubmitBugFormValues>({\n    resolver: zodResolver(submitBugSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      type: \"\",\n      severity: \"\",\n      programId: undefined,\n    },\n  });\n\n  // Submission mutation\n  const submitMutation = useMutation({\n    mutationFn: async (data: SubmitBugFormValues) => {\n      const res = await apiRequest(\"POST\", \"/api/submissions\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Bug report submitted\",\n        description: \"Your bug has been successfully submitted for review.\",\n        variant: \"default\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/activities\"] });\n      setIsSubmitted(true);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Submission failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle applying a template to the description field\n  const handleTemplateSelect = (template: string) => {\n    form.setValue(\"description\", template);\n  };\n\n  // Handle form submission\n  const onSubmit = (data: SubmitBugFormValues) => {\n    submitMutation.mutate(data);\n  };\n\n  // If a bug was just submitted, redirect to dashboard\n  if (isSubmitted) {\n    return <Redirect to=\"/\" />;\n  }\n\n  // Bug type options\n  const bugTypes = [\n    \"Cross-Site Scripting (XSS)\",\n    \"SQL Injection\",\n    \"Cross-Site Request Forgery (CSRF)\",\n    \"Remote Code Execution (RCE)\",\n    \"Authentication Bypass\",\n    \"Authorization Bypass\",\n    \"Information Disclosure\",\n    \"Server-Side Request Forgery (SSRF)\",\n    \"XML External Entity (XXE)\",\n    \"Open Redirect\",\n    \"Business Logic Vulnerability\",\n    \"Other\"\n  ];\n\n  // Severity levels\n  const severityLevels = [\n    \"Critical\",\n    \"High\",\n    \"Medium\",\n    \"Low\",\n    \"Info\"\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground />\n\n      <Navbar />\n\n      <main className=\"max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-8 relative z-10\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-2xl font-mono font-bold text-light-gray mb-2\">Submit Bug Report</h1>\n          <p className=\"text-dim-gray font-mono\">\n            Report a security vulnerability you've discovered and get rewarded.\n          </p>\n        </div>\n\n        {/* Vulnerability Grading Tool */}\n        <div className=\"mb-8\">\n          <VulnerabilityGradingForm />\n        </div>\n\n        <div className=\"terminal-card p-6 rounded-lg\">\n          {programsLoading ? (\n            <div className=\"flex justify-center py-16\">\n              <Loader2 className=\"h-10 w-10 animate-spin text-matrix\" />\n            </div>\n          ) : programsError ? (\n            <div className=\"text-center py-8\">\n              <AlertTriangle className=\"h-12 w-12 text-alert-red mx-auto mb-4\" />\n              <p className=\"text-alert-red font-mono\">Failed to load programs</p>\n              <p className=\"text-dim-gray font-mono mt-2\">Please try again later</p>\n            </div>\n          ) : (\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"programId\"\n                  render={({ field }) => (\n                    <FormItem className=\"space-y-1\">\n                      <FormLabel className=\"block text-sm font-mono text-dim-gray\">Target Program</FormLabel>\n                      <FormControl>\n                        <Select\n                          value={field.value?.toString() || \"\"}\n                          onValueChange={(value) => field.onChange(parseInt(value))}\n                        >\n                          <SelectTrigger className=\"terminal-input\">\n                            <SelectValue placeholder=\"Select a program\" />\n                          </SelectTrigger>\n                          <SelectContent className=\"bg-terminal border border-primary/30\">\n                            {programs?.map((program) => (\n                              <SelectItem key={program.id} value={program.id.toString()}>\n                                {program.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage className=\"text-alert-red text-xs\" />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem className=\"space-y-1\">\n                      <FormLabel className=\"block text-sm font-mono text-dim-gray\">Bug Title</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          className=\"terminal-input w-full\"\n                          placeholder=\"e.g. XSS in search functionality\"\n                        />\n                      </FormControl>\n                      <FormMessage className=\"text-alert-red text-xs\" />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"type\"\n                    render={({ field }) => (\n                      <FormItem className=\"space-y-1\">\n                        <FormLabel className=\"block text-sm font-mono text-dim-gray\">Bug Type</FormLabel>\n                        <FormControl>\n                          <Select\n                            value={field.value}\n                            onValueChange={field.onChange}\n                          >\n                            <SelectTrigger className=\"terminal-input\">\n                              <SelectValue placeholder=\"Select bug type\" />\n                            </SelectTrigger>\n                            <SelectContent className=\"bg-terminal border border-primary/30\">\n                              {bugTypes.map((type) => (\n                                <SelectItem key={type} value={type}>\n                                  {type}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </FormControl>\n                        <FormMessage className=\"text-alert-red text-xs\" />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"severity\"\n                    render={({ field }) => (\n                      <FormItem className=\"space-y-1\">\n                        <FormLabel className=\"block text-sm font-mono text-dim-gray\">Severity</FormLabel>\n                        <FormControl>\n                          <Select\n                            value={field.value}\n                            onValueChange={field.onChange}\n                          >\n                            <SelectTrigger className=\"terminal-input\">\n                              <SelectValue placeholder=\"Select severity\" />\n                            </SelectTrigger>\n                            <SelectContent className=\"bg-terminal border border-primary/30\">\n                              {severityLevels.map((level) => (\n                                <SelectItem key={level} value={level}>\n                                  {level}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </FormControl>\n                        <FormMessage className=\"text-alert-red text-xs\" />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"space-y-4 mb-4\">\n                  <BugReportTemplates onSelectTemplate={handleTemplateSelect} />\n                  <BugPriceEstimator \n                    bugType={form.getValues(\"type\")}\n                    severity={form.getValues(\"severity\")}\n                    programId={parseInt(form.getValues(\"programId\"))}\n                  />\n                  <AIReportEnhancer\n                    currentReport={{\n                      title: form.getValues(\"title\"),\n                      type: form.getValues(\"type\"),\n                      severity: form.getValues(\"severity\"),\n                      description: form.getValues(\"description\")\n                    }}\n                    onEnhancedReport={(enhanced) => {\n                      form.setValue(\"title\", enhanced.title);\n                      form.setValue(\"type\", enhanced.type);\n                      form.setValue(\"severity\", enhanced.severity);\n                      form.setValue(\"description\", enhanced.description);\n                    }}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem className=\"space-y-1\">\n                      <FormLabel className=\"block text-sm font-mono text-dim-gray\">Detailed Description</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          {...field}\n                          className=\"terminal-input w-full min-h-[200px]\"\n                          placeholder=\"Describe the vulnerability in detail. Include steps to reproduce, affected components, and potential impact.\"\n                        />\n                      </FormControl>\n                      <FormMessage className=\"text-alert-red text-xs\" />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end pt-4\">\n                  <Button\n                    type=\"submit\"\n                    disabled={submitMutation.isPending}\n                    className=\"glow-button flex items-center\"\n                  >\n                    {submitMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        SUBMITTING...\n                      </>\n                    ) : (\n                      <>\n                        <Bug className=\"mr-2 h-4 w-4\" />\n                        SUBMIT BUG REPORT\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":13072},"client/src/pages/terms-of-service.tsx":{"content":"\nimport { Link } from \"wouter\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function TermsOfServicePage() {\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground className=\"opacity-20\" />\n      <Navbar />\n      \n      <main className=\"max-w-4xl mx-auto px-4 py-12 relative z-10\">\n        <Link href=\"/auth\">\n          <Button variant=\"outline\" size=\"sm\" className=\"mb-8\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Registration\n          </Button>\n        </Link>\n        \n        <div className=\"terminal-card p-8 rounded-lg mb-6\">\n          <h1 className=\"text-3xl font-mono font-bold text-matrix mb-6\">Terms of Service</h1>\n          \n          <div className=\"space-y-6 text-dim-gray\">\n            <section>\n              <h2 className=\"text-xl font-mono text-light-gray mb-3\">1. Introduction and Acceptance of Terms</h2>\n              <p>\n                Welcome to CyberHunt, a cybersecurity bug bounty platform operated by CyberHunt Ltd. (\"CyberHunt\", \"we\", \"us\", or \"our\"). \n                By accessing or using the CyberHunt platform (the \"Service\"), you agree to be bound by these Terms of Service (\"Terms\"). \n                If you disagree with any part of these terms, you may not access or use the Service.\n              </p>\n              <p className=\"mt-2\">\n                These Terms constitute a legally binding agreement between you and CyberHunt. Your use of the Service confirms your \n                acceptance of these Terms and our Privacy Policy.\n              </p>\n            </section>\n            \n            <section>\n              <h2 className=\"text-xl font-mono text-light-gray mb-3\">2. Platform Overview and Services</h2>\n              <p>\n                CyberHunt is a cybersecurity bug bounty platform that facilitates responsible vulnerability disclosure between \n                security researchers (\"Researchers\") and participating organizations (\"Companies\"). The platform serves as a \n                neutral third-party intermediary to ensure fair compensation, professional communication, and secure handling \n                of vulnerability reports.\n              </p>\n              <p className=\"mt-2\">\n                Our services include vulnerability report management, payment processing, dispute resolution, and maintaining \n                professional standards for both Researchers and Companies.\n              </p>\n            </section>\n            \n            <section>\n              <h2 className=\"text-xl font-mono text-light-gray mb-3\">3. Company Responsibilities and Obligations</h2>\n              <p className=\"mb-3\">\n                Companies participating in CyberHunt bug bounty programs agree to the following obligations:\n              </p>\n              <div className=\"space-y-3\">\n                <div>\n                  <h4 className=\"text-lg font-mono text-matrix mb-2\">3.1 Fair Compensation Commitment</h4>\n                  <p>\n                    Companies must commit to providing fair and reasonable bounty rewards for all valid vulnerability reports. \n                    Compensation must be commensurate with the severity, impact, and exploitability of the reported vulnerability \n                    as defined in the program's published reward structure.\n                  </p>\n                </div>\n                <div>\n                  <h4 className=\"text-lg font-mono text-matrix mb-2\">3.2 Response Timeline Requirements</h4>\n                  <p>\n                    Upon receiving a valid vulnerability report, Companies must provide an initial response within thirty (30) \n                    calendar days. This response must include acknowledgment of receipt, initial assessment, and expected timeline \n                    for final determination. Final resolution and payment must be completed within ninety (90) calendar days \n                    unless extraordinary circumstances warrant extension.\n                  </p>\n                </div>\n                <div>\n                  <h4 className=\"text-lg font-mono text-matrix mb-2\">3.3 Prohibition Against Silent Fixes</h4>\n                  <p>\n                    Companies are strictly prohibited from implementing fixes for reported vulnerabilities without proper \n                    acknowledgment and fair compensation to the reporting Researcher. Any attempt to silently address \n                    vulnerabilities without engaging the reporting process constitutes a material breach of these Terms.\n                  </p>\n                </div>\n                <div>\n                  <h4 className=\"text-lg font-mono text-matrix mb-2\">3.4 Payment Security Requirements</h4>\n                  <p>\n                    Companies may be required to maintain escrow funds or provide upfront payment guarantees to ensure \n                    researchers receive timely compensation. CyberHunt reserves the right to request advance funding for \n                    high-value programs or new Company accounts.\n                  </p>\n                </div>\n              </div>\n            </section>\n            \n            <section>\n              <h2 className=\"text-xl font-mono text-light-gray mb-3\">4. Security Researcher Responsibilities and Code of Conduct</h2>\n              <p className=\"mb-3\">\n                Security Researchers using CyberHunt agree to maintain the highest professional and ethical standards:\n              </p>\n              <div className=\"space-y-3\">\n                <div>\n                  <h4 className=\"text-lg font-mono text-matrix mb-2\">4.1 Responsible Disclosure</h4>\n                  <p>\n                    Researchers must report vulnerabilities exclusively through the CyberHunt platform and only to authorized \n                    programs. All testing must remain within the defined scope and rules established by each program. \n                    Researchers must not exploit vulnerabilities for personal gain or malicious purposes.\n                  </p>\n                </div>\n                <div>\n                  <h4 className=\"text-lg font-mono text-matrix mb-2\">4.2 Quality and Detail Requirements</h4>\n                  <p>\n                    All vulnerability reports must include sufficient technical detail to allow reproduction and verification. \n                    Reports must be accurate, complete, and include proof-of-concept demonstrations where appropriate. \n                    Researchers are responsible for ensuring the quality and validity of their submissions.\n                  </p>\n                </div>\n                <div>\n                  <h4 className=\"text-lg font-mono text-matrix mb-2\">4.3 Confidentiality and Non-Disclosure</h4>\n                  <p>\n                    Researchers agree to maintain strict confidentiality regarding all vulnerability information and Company \n                    data encountered during testing. Information may not be shared, published, or disclosed outside the \n                    CyberHunt platform without explicit written authorization from the affected Company.\n                  </p>\n                </div>\n                <div>\n                  <h4 className=\"text-lg font-mono text-matrix mb-2\">4.4 Testing Limitations</h4>\n                  <p>\n                    Researchers must avoid any testing that could harm system availability, data integrity, or user privacy. \n                    Social engineering, physical attacks, and denial of service testing are prohibited unless explicitly \n                    authorized. Researchers must use only test accounts and avoid accessing production data.\n                  </p>\n                </div>\n              </div>\n            </section>\n            \n            <section>\n              <h2 className=\"text-xl font-mono text-light-gray mb-3\">5. CyberHunt Platform Rules and Authority</h2>\n              <div className=\"space-y-3\">\n                <div>\n                  <h4 className=\"text-lg font-mono text-matrix mb-2\">5.1 Neutral Third-Party Role</h4>\n                  <p>\n                    CyberHunt serves as a neutral intermediary between Companies and Researchers. We facilitate communication, \n                    manage payments, and ensure compliance with platform standards. Our role includes verification of \n                    vulnerability reports and mediation of disputes when necessary.\n                  </p>\n                </div>\n                <div>\n                  <h4 className=\"text-lg font-mono text-matrix mb-2\">5.2 Fund Management Authority</h4>\n                  <p>\n                    CyberHunt reserves the right to withhold, freeze, or escrow funds in case of disputes, suspected fraud, \n                    or violations of these Terms. Funds will be released only upon resolution of any outstanding issues and \n                    verification of compliance with platform requirements.\n                  </p>\n                </div>\n                <div>\n                  <h4 className=\"text-lg font-mono text-matrix mb-2\">5.3 Platform Commission</h4>\n                  <p>\n                    CyberHunt charges a service commission of fifteen to twenty percent (15-20%) on all paid bounties. \n                    This commission covers platform maintenance, payment processing, dispute resolution, and administrative \n                    services. The exact commission rate may vary based on program volume and service level.\n                  </p>\n                </div>\n                <div>\n                  <h4 className=\"text-lg font-mono text-matrix mb-2\">5.4 Public Disclosure Authority</h4>\n                  <p>\n                    In cases where Companies refuse to provide fair compensation without proper justification, CyberHunt \n                    reserves the right to authorize public disclosure of vulnerability information after appropriate review \n                    and consideration of all factors including public safety and responsible disclosure principles.\n                  </p>\n                </div>\n              </div>\n            </section>\n            \n            <section>\n              <h2 className=\"text-xl font-mono text-light-gray mb-3\">6. Payment Processing and Financial Terms</h2>\n              <div className=\"space-y-3\">\n                <div>\n                  <h4 className=\"text-lg font-mono text-matrix mb-2\">6.1 Payment Flow</h4>\n                  <p>\n                    All bounty payments must be processed through the CyberHunt platform. Companies deposit funds to the \n                    platform, CyberHunt deducts applicable commissions and fees, and releases payment to Researchers upon \n                    Company approval and platform verification.\n                  </p>\n                </div>\n                <div>\n                  <h4 className=\"text-lg font-mono text-matrix mb-2\">6.2 Escrow and Security</h4>\n                  <p>\n                    CyberHunt may require Companies to maintain escrow accounts or provide advance funding to guarantee payment \n                    availability. This requirement applies particularly to new accounts, high-value programs, or accounts with \n                    previous payment disputes.\n                  </p>\n                </div>\n                <div>\n                  <h4 className=\"text-lg font-mono text-matrix mb-2\">6.3 Payment Timeline</h4>\n                  <p>\n                    Upon Company approval of a bounty payment, CyberHunt will process payment to the Researcher within seven (7) \n                    business days, subject to standard banking and payment processor timelines.\n                  </p>\n                </div>\n              </div>\n            </section>\n            \n            <section>\n              <h2 className=\"text-xl font-mono text-light-gray mb-3\">7. Dispute Resolution and Enforcement</h2>\n              <div className=\"space-y-3\">\n                <div>\n                  <h4 className=\"text-lg font-mono text-matrix mb-2\">7.1 Final Authority</h4>\n                  <p>\n                    CyberHunt maintains final decision-making authority in all disputes between Companies and Researchers. \n                    Our decisions are based on technical merit, platform policies, industry standards, and fair dealing principles. \n                    All parties agree to accept CyberHunt's determinations as final and binding.\n                  </p>\n                </div>\n                <div>\n                  <h4 className=\"text-lg font-mono text-matrix mb-2\">7.2 Account Termination</h4>\n                  <p>\n                    Repeated violations of these Terms, abusive behavior, or attempts to circumvent platform processes will \n                    result in account suspension or permanent ban. CyberHunt reserves the right to terminate accounts immediately \n                    for serious violations including fraud, malicious activity, or legal compliance issues.\n                  </p>\n                </div>\n                <div>\n                  <h4 className=\"text-lg font-mono text-matrix mb-2\">7.3 Appeals Process</h4>\n                  <p>\n                    Users may appeal CyberHunt decisions through our formal appeals process within thirty (30) days of the \n                    original decision. Appeals must include new evidence or demonstrate procedural errors in the original determination.\n                  </p>\n                </div>\n              </div>\n            </section>\n            \n            <section>\n              <h2 className=\"text-xl font-mono text-light-gray mb-3\">8. Legal Framework and Jurisdiction</h2>\n              <div className=\"space-y-3\">\n                <div>\n                  <h4 className=\"text-lg font-mono text-matrix mb-2\">8.1 Governing Law</h4>\n                  <p>\n                    These Terms are governed by the laws of Tunisia and applicable international commercial law principles. \n                    For international disputes, the platform operates under established freelance and digital services frameworks \n                    recognized in international commerce.\n                  </p>\n                </div>\n                <div>\n                  <h4 className=\"text-lg font-mono text-matrix mb-2\">8.2 Limitation of Liability</h4>\n                  <p>\n                    CyberHunt serves as a mediator and platform provider. We are not liable for direct damages, losses, or \n                    disputes between Companies and Researchers beyond our role as facilitator. Our maximum liability is limited \n                    to the commission fees collected for the specific transaction in dispute.\n                  </p>\n                </div>\n                <div>\n                  <h4 className=\"text-lg font-mono text-matrix mb-2\">8.3 Legal Compliance</h4>\n                  <p>\n                    All platform users must comply with applicable laws in their jurisdiction regarding cybersecurity research, \n                    data protection, and computer security. Users are solely responsible for ensuring their activities comply \n                    with local legal requirements.\n                  </p>\n                </div>\n              </div>\n            </section>\n            \n            <section>\n              <h2 className=\"text-xl font-mono text-light-gray mb-3\">9. Intellectual Property and Data Rights</h2>\n              <p>\n                Vulnerability information and research methodologies remain the intellectual property of the discovering Researcher, \n                subject to confidentiality obligations. Companies retain ownership of their systems and data. CyberHunt claims no \n                ownership over user content but requires necessary licenses to operate the platform and facilitate services.\n              </p>\n            </section>\n            \n            <section>\n              <h2 className=\"text-xl font-mono text-light-gray mb-3\">10. Platform Modifications and Updates</h2>\n              <p>\n                CyberHunt reserves the right to modify these Terms, platform features, and service offerings with appropriate \n                notice to users. Material changes will be communicated at least thirty (30) days in advance. Continued use \n                of the platform after changes constitutes acceptance of updated Terms.\n              </p>\n            </section>\n            \n            <section>\n              <h2 className=\"text-xl font-mono text-light-gray mb-3\">11. Account Registration and Verification</h2>\n              <p>\n                Users must provide accurate, current, and complete information during registration. CyberHunt may require \n                identity verification, particularly for payment processing and high-value transactions. False information \n                or impersonation will result in immediate account termination.\n              </p>\n            </section>\n            \n            <section>\n              <h2 className=\"text-xl font-mono text-light-gray mb-3\">12. Contact Information and Support</h2>\n              <p>\n                For questions regarding these Terms, disputes, or platform support, users may contact CyberHunt through our \n                official support channels. Legal notices must be sent to legal@cyberhunt.com. Emergency security issues \n                should be reported to security@cyberhunt.com.\n              </p>\n            </section>\n            \n            <section>\n              <h2 className=\"text-xl font-mono text-light-gray mb-3\">13. Severability and Entire Agreement</h2>\n              <p>\n                If any provision of these Terms is found to be unenforceable, the remaining provisions will continue in full \n                force and effect. These Terms, together with our Privacy Policy, constitute the entire agreement between users \n                and CyberHunt regarding the platform services.\n              </p>\n            </section>\n            \n            <div className=\"pt-6 border-t border-dark-terminal\">\n              <div className=\"bg-matrix/10 border border-matrix/30 rounded-lg p-4\">\n                <h3 className=\"text-lg font-mono text-matrix mb-2\">Important Notice</h3>\n                <p className=\"text-sm text-dim-gray\">\n                  These Terms of Service constitute a legally binding contract. By using CyberHunt, you acknowledge that you \n                  have read, understood, and agree to be bound by these terms. If you are representing a company or organization, \n                  you warrant that you have the authority to bind that entity to these Terms.\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"pt-4 border-t border-dark-terminal text-center mt-6\">\n              <p className=\"text-matrix font-mono\">Last updated: January 15, 2025</p>\n              <p className=\"text-sm text-dim-gray mt-1\">Version 2.0 - CyberHunt Bug Bounty Platform</p>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":19278},"client/src/pages/triage-dashboard-page.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { \n  Shield, \n  Clock, \n  AlertTriangle, \n  CheckCircle, \n  Users, \n  MessageSquare, \n  DollarSign,\n  Settings,\n  Plus,\n  Eye\n} from \"lucide-react\";\n\nconst triageServiceSchema = z.object({\n  serviceName: z.string().min(1, \"Service name is required\"),\n  serviceType: z.enum([\"managed_triage\", \"consultation\", \"remediation\"]),\n  pricingModel: z.enum([\"per_report\", \"monthly\", \"annual\"]),\n  pricePerReport: z.number().min(0),\n  monthlyPrice: z.number().min(0),\n  annualPrice: z.number().min(0),\n  triageLevel: z.enum([\"basic\", \"standard\", \"premium\"]),\n  maxReportsPerMonth: z.number().min(1),\n  responseTimeHours: z.number().min(1),\n  autoAssignTriage: z.boolean(),\n  includedServices: z.array(z.string()).optional()\n});\n\ntype TriageServiceFormData = z.infer<typeof triageServiceSchema>;\n\nfunction TriageDashboardPage() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [selectedTab, setSelectedTab] = useState(\"overview\");\n  const [isCreateServiceOpen, setIsCreateServiceOpen] = useState(false);\n  const [selectedReport, setSelectedReport] = useState<any>(null);\n\n  // Redirect if not a company user\n  if (!user || user.userType !== 'company') {\n    return (\n      <div className=\"min-h-screen bg-terminal text-matrix flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Shield className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n          <h1 className=\"text-2xl font-bold mb-2\">Access Denied</h1>\n          <p className=\"text-matrix/80\">Only company users can access the triage dashboard.</p>\n        </div>\n      </div>\n    );\n  }\n\n  const form = useForm<TriageServiceFormData>({\n    resolver: zodResolver(triageServiceSchema),\n    defaultValues: {\n      serviceName: \"Managed Vulnerability Triage\",\n      serviceType: \"managed_triage\",\n      pricingModel: \"per_report\",\n      pricePerReport: 50,\n      monthlyPrice: 500,\n      annualPrice: 5000,\n      triageLevel: \"standard\",\n      maxReportsPerMonth: 50,\n      responseTimeHours: 24,\n      autoAssignTriage: true,\n      includedServices: [\n        \"Vulnerability validation\",\n        \"Severity assessment\",\n        \"Technical analysis\",\n        \"Remediation recommendations\",\n        \"Progress tracking\"\n      ]\n    }\n  });\n\n  // Fetch triage services\n  const { data: services = [], isLoading: servicesLoading } = useQuery({\n    queryKey: [\"/api/triage-services\"],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", \"/api/triage-services\");\n      return res.json();\n    }\n  });\n\n  // Fetch triage reports\n  const { data: reports = [], isLoading: reportsLoading } = useQuery({\n    queryKey: [\"/api/triage-reports\"],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", \"/api/triage-reports\");\n      return res.json();\n    }\n  });\n\n  // Fetch triage subscriptions\n  const { data: subscriptions = [], isLoading: subscriptionsLoading } = useQuery({\n    queryKey: [\"/api/triage-subscriptions\"],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", \"/api/triage-subscriptions\");\n      return res.json();\n    }\n  });\n\n  // Create triage service mutation\n  const createServiceMutation = useMutation({\n    mutationFn: async (data: TriageServiceFormData) => {\n      const res = await apiRequest(\"POST\", \"/api/triage-services\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Service created\",\n        description: \"Triage service has been created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/triage-services\"] });\n      setIsCreateServiceOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create service\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Request triage for submission\n  const requestTriageMutation = useMutation({\n    mutationFn: async ({ submissionId, triageServiceId }: { submissionId: number; triageServiceId: number }) => {\n      const res = await apiRequest(\"POST\", \"/api/triage-reports\", {\n        submissionId,\n        triageServiceId\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Triage requested\",\n        description: \"Vulnerability triage has been requested and assigned to an analyst\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/triage-reports\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to request triage\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const onSubmit = (data: TriageServiceFormData) => {\n    // Convert prices from dollars to cents\n    const serviceData = {\n      ...data,\n      pricePerReport: Math.round(data.pricePerReport * 100),\n      monthlyPrice: Math.round(data.monthlyPrice * 100),\n      annualPrice: Math.round(data.annualPrice * 100)\n    };\n    createServiceMutation.mutate(serviceData);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\": return \"bg-yellow-500/20 text-yellow-500\";\n      case \"in_progress\": return \"bg-blue-500/20 text-blue-500\";\n      case \"completed\": return \"bg-green-500/20 text-green-500\";\n      case \"escalated\": return \"bg-red-500/20 text-red-500\";\n      default: return \"bg-gray-500/20 text-gray-500\";\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"low\": return \"bg-green-500/20 text-green-500\";\n      case \"medium\": return \"bg-yellow-500/20 text-yellow-500\";\n      case \"high\": return \"bg-orange-500/20 text-orange-500\";\n      case \"critical\": return \"bg-red-500/20 text-red-500\";\n      default: return \"bg-gray-500/20 text-gray-500\";\n    }\n  };\n\n  const formatPrice = (cents: number) => {\n    return `$${(cents / 100).toFixed(2)}`;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-terminal text-matrix\">\n      <div className=\"container mx-auto p-6\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">Managed Vulnerability Triage</h1>\n          <p className=\"text-matrix/80\">\n            Professional vulnerability assessment and triage services for your security programs\n          </p>\n        </div>\n\n        <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"services\">Services</TabsTrigger>\n            <TabsTrigger value=\"reports\">Reports</TabsTrigger>\n            <TabsTrigger value=\"subscriptions\">Subscriptions</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <Card className=\"terminal-card\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Active Services</CardTitle>\n                  <Shield className=\"h-4 w-4 text-matrix\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{services.filter((s: any) => s.isActive).length}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {services.length} total services\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"terminal-card\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Pending Reports</CardTitle>\n                  <Clock className=\"h-4 w-4 text-matrix\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{reports.filter((r: any) => r.status === 'pending').length}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {reports.length} total reports\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"terminal-card\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Critical Issues</CardTitle>\n                  <AlertTriangle className=\"h-4 w-4 text-matrix\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{reports.filter((r: any) => r.priority === 'critical').length}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Require immediate attention\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"terminal-card\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Completed</CardTitle>\n                  <CheckCircle className=\"h-4 w-4 text-matrix\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{reports.filter((r: any) => r.status === 'completed').length}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    This month\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card className=\"terminal-card\">\n                <CardHeader>\n                  <CardTitle>Recent Triage Reports</CardTitle>\n                  <CardDescription>Latest vulnerability assessments</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {reports.slice(0, 5).map((report: any) => (\n                      <div key={report.id} className=\"flex items-center justify-between p-3 rounded-lg bg-terminal/50 border border-matrix/20\">\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium\">{report.submissionTitle}</p>\n                          <div className=\"flex items-center gap-2 mt-1\">\n                            <Badge className={`text-xs ${getStatusColor(report.status)}`}>\n                              {report.status}\n                            </Badge>\n                            <Badge className={`text-xs ${getPriorityColor(report.priority)}`}>\n                              {report.priority}\n                            </Badge>\n                          </div>\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setSelectedReport(report)}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"terminal-card\">\n                <CardHeader>\n                  <CardTitle>Service Performance</CardTitle>\n                  <CardDescription>Triage service metrics</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Average Response Time</span>\n                      <span className=\"text-sm font-medium text-matrix\">18 hours</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Completion Rate</span>\n                      <span className=\"text-sm font-medium text-matrix\">96%</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Customer Satisfaction</span>\n                      <span className=\"text-sm font-medium text-matrix\">4.8/5</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Active Analysts</span>\n                      <span className=\"text-sm font-medium text-matrix\">8</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"services\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-semibold\">Triage Services</h2>\n              <Dialog open={isCreateServiceOpen} onOpenChange={setIsCreateServiceOpen}>\n                <DialogTrigger asChild>\n                  <Button className=\"bg-matrix/20 border-matrix/30 hover:bg-matrix/30\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Create Service\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"terminal-card max-w-2xl\">\n                  <DialogHeader>\n                    <DialogTitle>Create Triage Service</DialogTitle>\n                  </DialogHeader>\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"serviceName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Service Name</FormLabel>\n                            <FormControl>\n                              <Input {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"serviceType\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Service Type</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select service type\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"managed_triage\">Managed Triage</SelectItem>\n                                  <SelectItem value=\"consultation\">Consultation</SelectItem>\n                                  <SelectItem value=\"remediation\">Remediation</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"triageLevel\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Triage Level</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select triage level\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"basic\">Basic</SelectItem>\n                                  <SelectItem value=\"standard\">Standard</SelectItem>\n                                  <SelectItem value=\"premium\">Premium</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"pricingModel\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Pricing Model</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select pricing model\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"per_report\">Per Report</SelectItem>\n                                <SelectItem value=\"monthly\">Monthly</SelectItem>\n                                <SelectItem value=\"annual\">Annual</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-3 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"pricePerReport\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Price per Report ($)</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\" \n                                  {...field}\n                                  onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"monthlyPrice\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Monthly Price ($)</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\" \n                                  {...field}\n                                  onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"annualPrice\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Annual Price ($)</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\" \n                                  {...field}\n                                  onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"maxReportsPerMonth\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Max Reports per Month</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\" \n                                  {...field}\n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"responseTimeHours\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Response Time (hours)</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\" \n                                  {...field}\n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"autoAssignTriage\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n                            <div className=\"space-y-0.5\">\n                              <FormLabel>Auto-assign Triage</FormLabel>\n                              <FormDescription>\n                                Automatically assign triage to new submissions\n                              </FormDescription>\n                            </div>\n                            <FormControl>\n                              <Switch\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                              />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={() => setIsCreateServiceOpen(false)}\n                        >\n                          Cancel\n                        </Button>\n                        <Button \n                          type=\"submit\" \n                          className=\"bg-matrix/20 border-matrix/30 hover:bg-matrix/30\"\n                          disabled={createServiceMutation.isPending}\n                        >\n                          {createServiceMutation.isPending ? \"Creating...\" : \"Create Service\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {servicesLoading ? (\n                <div className=\"col-span-full text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-matrix mx-auto\"></div>\n                  <p className=\"mt-2 text-matrix/80\">Loading services...</p>\n                </div>\n              ) : services.length === 0 ? (\n                <div className=\"col-span-full text-center py-8\">\n                  <Shield className=\"h-12 w-12 text-matrix/50 mx-auto mb-4\" />\n                  <p className=\"text-matrix/80\">No triage services configured</p>\n                  <p className=\"text-sm text-matrix/60 mt-1\">Create your first triage service to get started</p>\n                </div>\n              ) : (\n                services.map((service: any) => (\n                  <Card key={service.id} className=\"terminal-card\">\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle className=\"text-lg\">{service.serviceName}</CardTitle>\n                        <Badge className={service.isActive ? \"bg-green-500/20 text-green-500\" : \"bg-red-500/20 text-red-500\"}>\n                          {service.isActive ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                      </div>\n                      <CardDescription>{service.serviceType.replace('_', ' ')}</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Triage Level:</span>\n                          <span className=\"font-medium text-matrix\">{service.triageLevel}</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Pricing:</span>\n                          <span className=\"font-medium text-matrix\">\n                            {service.pricingModel === 'per_report' && formatPrice(service.pricePerReport)}\n                            {service.pricingModel === 'monthly' && `${formatPrice(service.monthlyPrice)}/month`}\n                            {service.pricingModel === 'annual' && `${formatPrice(service.annualPrice)}/year`}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Response Time:</span>\n                          <span className=\"font-medium text-matrix\">{service.responseTimeHours}h</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Max Reports:</span>\n                          <span className=\"font-medium text-matrix\">{service.maxReportsPerMonth}/month</span>\n                        </div>\n                      </div>\n                      <div className=\"mt-4 flex gap-2\">\n                        <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                          <Settings className=\"h-4 w-4 mr-2\" />\n                          Configure\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"reports\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-semibold\">Triage Reports</h2>\n              <div className=\"flex gap-2\">\n                <Select defaultValue=\"all\">\n                  <SelectTrigger className=\"w-[180px]\">\n                    <SelectValue placeholder=\"Filter by status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Reports</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                    <SelectItem value=\"completed\">Completed</SelectItem>\n                    <SelectItem value=\"escalated\">Escalated</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 gap-4\">\n              {reportsLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-matrix mx-auto\"></div>\n                  <p className=\"mt-2 text-matrix/80\">Loading reports...</p>\n                </div>\n              ) : reports.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <AlertTriangle className=\"h-12 w-12 text-matrix/50 mx-auto mb-4\" />\n                  <p className=\"text-matrix/80\">No triage reports found</p>\n                  <p className=\"text-sm text-matrix/60 mt-1\">Reports will appear here when vulnerability triage is requested</p>\n                </div>\n              ) : (\n                reports.map((report: any) => (\n                  <Card key={report.id} className=\"terminal-card\">\n                    <CardContent className=\"pt-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-semibold text-lg\">{report.submissionTitle}</h3>\n                          <p className=\"text-sm text-matrix/80 mt-1\">{report.submissionDescription}</p>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Badge className={`${getStatusColor(report.status)}`}>\n                            {report.status}\n                          </Badge>\n                          <Badge className={`${getPriorityColor(report.priority)}`}>\n                            {report.priority}\n                          </Badge>\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                        <div>\n                          <span className=\"text-matrix/60\">Analyst:</span>\n                          <p className=\"font-medium\">{report.analystUsername || \"Unassigned\"}</p>\n                        </div>\n                        <div>\n                          <span className=\"text-matrix/60\">Severity:</span>\n                          <p className=\"font-medium\">{report.severity || \"Unknown\"}</p>\n                        </div>\n                        <div>\n                          <span className=\"text-matrix/60\">Due Date:</span>\n                          <p className=\"font-medium\">\n                            {report.dueDate ? new Date(report.dueDate).toLocaleDateString() : \"No due date\"}\n                          </p>\n                        </div>\n                        <div>\n                          <span className=\"text-matrix/60\">Created:</span>\n                          <p className=\"font-medium\">{new Date(report.createdAt).toLocaleDateString()}</p>\n                        </div>\n                      </div>\n\n                      <div className=\"mt-4 flex gap-2\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => setSelectedReport(report)}\n                        >\n                          <Eye className=\"h-4 w-4 mr-2\" />\n                          View Details\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <MessageSquare className=\"h-4 w-4 mr-2\" />\n                          Messages\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"subscriptions\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-semibold\">Triage Subscriptions</h2>\n              <Button className=\"bg-matrix/20 border-matrix/30 hover:bg-matrix/30\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                New Subscription\n              </Button>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {subscriptionsLoading ? (\n                <div className=\"col-span-full text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-matrix mx-auto\"></div>\n                  <p className=\"mt-2 text-matrix/80\">Loading subscriptions...</p>\n                </div>\n              ) : subscriptions.length === 0 ? (\n                <div className=\"col-span-full text-center py-8\">\n                  <DollarSign className=\"h-12 w-12 text-matrix/50 mx-auto mb-4\" />\n                  <p className=\"text-matrix/80\">No active subscriptions</p>\n                  <p className=\"text-sm text-matrix/60 mt-1\">Subscribe to triage services for ongoing support</p>\n                </div>\n              ) : (\n                subscriptions.map((subscription: any) => (\n                  <Card key={subscription.id} className=\"terminal-card\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center justify-between\">\n                        <span>{subscription.serviceName}</span>\n                        <Badge className={subscription.status === 'active' ? \"bg-green-500/20 text-green-500\" : \"bg-red-500/20 text-red-500\"}>\n                          {subscription.status}\n                        </Badge>\n                      </CardTitle>\n                      <CardDescription>\n                        {subscription.serviceType} • {subscription.triageLevel} tier\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Billing:</span>\n                          <span className=\"font-medium text-matrix\">{subscription.subscriptionType}</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Reports Processed:</span>\n                          <span className=\"font-medium text-matrix\">{subscription.reportsProcessed}</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Total Cost:</span>\n                          <span className=\"font-medium text-matrix\">{formatPrice(subscription.totalCost)}</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Next Billing:</span>\n                          <span className=\"font-medium text-matrix\">\n                            {subscription.nextBillingDate ? new Date(subscription.nextBillingDate).toLocaleDateString() : \"N/A\"}\n                          </span>\n                        </div>\n                      </div>\n                      <div className=\"mt-4 flex gap-2\">\n                        <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                          Manage\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                          Billing\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Report Details Dialog */}\n      {selectedReport && (\n        <Dialog open={!!selectedReport} onOpenChange={() => setSelectedReport(null)}>\n          <DialogContent className=\"terminal-card max-w-4xl\">\n            <DialogHeader>\n              <DialogTitle>Triage Report Details</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-matrix/80\">Submission</label>\n                  <p className=\"text-sm\">{selectedReport.submissionTitle}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-matrix/80\">Status</label>\n                  <Badge className={`${getStatusColor(selectedReport.status)} ml-2`}>\n                    {selectedReport.status}\n                  </Badge>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-matrix/80\">Priority</label>\n                  <Badge className={`${getPriorityColor(selectedReport.priority)} ml-2`}>\n                    {selectedReport.priority}\n                  </Badge>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-matrix/80\">Analyst</label>\n                  <p className=\"text-sm\">{selectedReport.analystUsername || \"Unassigned\"}</p>\n                </div>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-matrix/80\">Description</label>\n                <p className=\"text-sm mt-1\">{selectedReport.submissionDescription}</p>\n              </div>\n              <div className=\"flex justify-end\">\n                <Button variant=\"outline\" onClick={() => setSelectedReport(null)}>\n                  Close\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n}\n\nexport default TriageDashboardPage;","size_bytes":38844},"client/src/pages/verify-email-page.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Loader2, CheckCircle, XCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\n\nenum VerificationStatus {\n  VERIFYING = \"verifying\",\n  SUCCESS = \"success\",\n  ERROR = \"error\",\n}\n\nexport default function VerifyEmailPage() {\n  const [status, setStatus] = useState<VerificationStatus>(VerificationStatus.VERIFYING);\n  const [errorMessage, setErrorMessage] = useState<string>(\"\");\n  const [, setLocation] = useLocation();\n\n  // Extract the token from the URL query parameters\n  const searchParams = new URLSearchParams(window.location.search);\n  const token = searchParams.get(\"token\");\n\n  useEffect(() => {\n    const verifyEmail = async () => {\n      try {\n        if (!token) {\n          setStatus(VerificationStatus.ERROR);\n          setErrorMessage(\"Verification token is missing.\");\n          return;\n        }\n\n        // Send the token to the backend for verification\n        const response = await apiRequest(\"GET\", `/api/verify-email?token=${token}`);\n        \n        if (response.ok) {\n          // If verification successful, send welcome email\n          try {\n            await apiRequest(\"POST\", \"/api/send-welcome-email\");\n          } catch (welcomeError) {\n            console.error(\"Error sending welcome email:\", welcomeError);\n            // Continue with success flow even if welcome email fails\n          }\n          \n          setStatus(VerificationStatus.SUCCESS);\n        } else {\n          const data = await response.json();\n          setStatus(VerificationStatus.ERROR);\n          setErrorMessage(data.message || \"Failed to verify email.\");\n        }\n      } catch (error) {\n        console.error(\"Error during email verification:\", error);\n        setStatus(VerificationStatus.ERROR);\n        setErrorMessage(\"An error occurred during verification. Please try again later.\");\n      }\n    };\n\n    verifyEmail();\n  }, [token]);\n\n  const renderContent = () => {\n    switch (status) {\n      case VerificationStatus.VERIFYING:\n        return (\n          <div className=\"flex flex-col items-center justify-center space-y-6\">\n            <Loader2 className=\"h-16 w-16 text-matrix animate-spin\" />\n            <h2 className=\"text-xl font-mono text-matrix animate-pulse\">Verifying Email...</h2>\n            <p className=\"text-dim-gray text-center\">\n              Please wait while we verify your email address\n            </p>\n          </div>\n        );\n\n      case VerificationStatus.SUCCESS:\n        return (\n          <div className=\"flex flex-col items-center justify-center space-y-6\">\n            <div className=\"relative\">\n              <CheckCircle className=\"h-16 w-16 text-green-500\" />\n              <div className=\"absolute -top-2 -right-2 w-6 h-6 bg-yellow-400 rounded-full flex items-center justify-center animate-pulse\">\n                <span className=\"text-black font-bold text-xs\">+10</span>\n              </div>\n            </div>\n            <h2 className=\"text-2xl font-mono text-matrix\">Email Verified!</h2>\n            <div className=\"text-dim-gray text-center space-y-3\">\n              <p>\n                <span className=\"text-green-400\">Success!</span> Your email has been verified and your account is now fully activated.\n              </p>\n              <p>\n                You've received <span className=\"text-yellow-400\">10 reputation points</span> for completing this important security step.\n              </p>\n              <p className=\"text-blue-400\">\n                Check your inbox for a welcome email with helpful tips to get started.\n              </p>\n            </div>\n            <div className=\"w-full space-y-3\">\n              <Button className=\"glow-button w-full\" onClick={() => setLocation(\"/dashboard\")}>\n                Continue to Dashboard\n              </Button>\n              <p className=\"text-xs text-dim-gray text-center mt-2\">\n                You can now access all features of the platform\n              </p>\n            </div>\n          </div>\n        );\n\n      case VerificationStatus.ERROR:\n        return (\n          <div className=\"flex flex-col items-center justify-center space-y-6\">\n            <XCircle className=\"h-16 w-16 text-red-500\" />\n            <h2 className=\"text-2xl font-mono text-alert-red\">Verification Failed</h2>\n            <p className=\"text-dim-gray text-center\">{errorMessage}</p>\n            <div className=\"flex flex-col w-full space-y-3\">\n              <Button className=\"glow-button-secondary w-full\" onClick={() => setLocation(\"/auth\")}>\n                Back to Login\n              </Button>\n              <Button className=\"glow-button w-full\" onClick={() => window.location.reload()}>\n                Try Again\n              </Button>\n            </div>\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 relative\">\n      <MatrixBackground />\n      \n      <div className=\"terminal-card w-full max-w-md p-8 rounded-lg relative overflow-hidden z-10\">\n        <div className=\"terminal-header mb-6 flex justify-center\">\n          <h1 className=\"text-matrix text-3xl font-mono font-bold\">Email Verification</h1>\n        </div>\n        \n        {renderContent()}\n        \n        <div className=\"absolute -bottom-10 -right-10 w-40 h-40 bg-matrix/5 rounded-full blur-3xl\"></div>\n        <div className=\"absolute -top-10 -left-10 w-40 h-40 bg-electric-blue/5 rounded-full blur-3xl\"></div>\n      </div>\n    </div>\n  );\n}","size_bytes":5622},"client/src/pages/wallet-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { MatrixBackground } from \"@/components/matrix-background\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select } from \"@/components/ui/select\";\n\nexport default function WalletPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [amount, setAmount] = useState(\"\");\n  const [method, setMethod] = useState(\"paypal\");\n  const [destination, setDestination] = useState(\"\");\n\n  const { data: wallet, isLoading: walletLoading } = useQuery({\n    queryKey: [\"/api/wallet\"],\n  });\n\n  const { data: withdrawals, isLoading: withdrawalsLoading } = useQuery({\n    queryKey: [\"/api/withdrawals\"],\n  });\n\n  const handleWithdraw = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      const response = await fetch(\"/api/withdrawals\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ amount: Number(amount), method, destination }),\n      });\n\n      if (!response.ok) throw new Error();\n\n      toast({\n        title: \"Success\",\n        description: \"Withdrawal request submitted successfully\",\n      });\n\n      setAmount(\"\");\n      setDestination(\"\");\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit withdrawal request\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const formatCurrency = (cents: number) => {\n    return `$${(cents / 100).toFixed(2)}`;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  // Redirect hackers to crypto withdrawal page\n  if (user?.userType === 'hacker') {\n    return (\n      <div className=\"min-h-screen bg-deep-black relative\">\n        <MatrixBackground className=\"opacity-20\" />\n        <Navbar />\n        <div className=\"flex items-center justify-center min-h-[80vh]\">\n          <div className=\"terminal-card p-8 text-center max-w-md\">\n            <h2 className=\"text-2xl font-mono text-matrix mb-4\">Crypto Withdrawals Only</h2>\n            <p className=\"text-dim-gray mb-6\">\n              Researchers can only withdraw earnings via cryptocurrency. Please use the crypto withdrawal page to manage your funds.\n            </p>\n            <Button \n              onClick={() => window.location.href = '/crypto/withdrawals'}\n              className=\"terminal-button\"\n            >\n              Go to Crypto Withdrawals\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (walletLoading) {\n    return (\n      <div className=\"min-h-screen bg-deep-black relative\">\n        <MatrixBackground className=\"opacity-20\" />\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-matrix mx-auto mb-4\"></div>\n            <p className=\"text-dim-gray\">Loading wallet...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-deep-black relative\">\n      <MatrixBackground />\n      <Navbar />\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 relative z-10\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n          {/* Balance Card */}\n          <div className=\"terminal-card p-6 rounded-lg border border-matrix/30\">\n            <h2 className=\"text-xl font-mono font-bold text-light-gray mb-4\">Wallet Balance</h2>\n            <div className=\"text-3xl font-mono text-matrix\">\n              ${walletLoading ? \"...\" : wallet?.balance || 0}\n            </div>\n\n\n          </div>\n\n          {/* Withdrawal Form */}\n          <div className=\"terminal-card p-6 rounded-lg border border-matrix/30\">\n              <div className=\"mb-4\">\n                <h2 className=\"text-xl font-mono font-bold text-light-gray mb-2\">Earnings</h2>\n                <p className=\"text-dim-gray font-mono text-sm\">Your earnings are automatically updated when rewards are processed by our team.</p>\n              </div>\n              <h2 className=\"text-xl font-mono font-bold text-light-gray mb-4\">Request Withdrawal</h2>\n              <form onSubmit={handleWithdraw} className=\"space-y-4\">\n                <div>\n                  <Input\n                    type=\"number\"\n                    value={amount}\n                    onChange={(e) => setAmount(e.target.value)}\n                    placeholder=\"Amount\"\n                    min=\"1\"\n                    required\n                  />\n                </div>\n              <div>\n                <select\n                  value={method}\n                  onChange={(e) => setMethod(e.target.value)}\n                  className=\"w-full bg-surface border border-matrix/30 rounded p-2 text-light-gray\"\n                >\n                  <option value=\"paypal\">PayPal</option>\n                  <option value=\"wise\">Wise</option>\n                  <option value=\"crypto\">Cryptocurrency</option>\n                </select>\n              </div>\n              <div>\n                <Input\n                  type=\"text\"\n                  value={destination}\n                  onChange={(e) => setDestination(e.target.value)}\n                  placeholder={method === 'crypto' ? 'Wallet Address' : 'Email'}\n                  required\n                />\n              </div>\n              <Button type=\"submit\" className=\"w-full\">\n                Request Withdrawal\n              </Button>\n            </form>\n          </div>\n        </div>\n\n        {/* Withdrawal History */}\n        <div className=\"mt-8\">\n          <h2 className=\"text-xl font-mono font-bold text-light-gray mb-4\">Withdrawal History</h2>\n          <div className=\"terminal-card p-4 rounded-lg border border-matrix/30\">\n            {withdrawalsLoading ? (\n              <p className=\"text-dim-gray\">Loading...</p>\n            ) : withdrawals?.length ? (\n              <div className=\"space-y-4\">\n                {withdrawals.map((withdrawal: any) => (\n                  <div key={withdrawal.id} className=\"p-4 bg-surface rounded border border-matrix/30\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-light-gray\">${withdrawal.amount}</span>\n                      <span className={`text-sm ${\n                        withdrawal.status === 'completed' ? 'text-green-500' :\n                        withdrawal.status === 'pending' ? 'text-yellow-500' :\n                        'text-red-500'\n                      }`}>\n                        {withdrawal.status}\n                      </span>\n                    </div>\n                    <div className=\"text-sm text-dim-gray mt-2\">\n                      via {withdrawal.method} • {new Date(withdrawal.createdAt).toLocaleDateString()}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className=\"text-dim-gray\">No withdrawal history</p>\n            )}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":7281},"src/components/ui/toaster.tsx":{"content":"import React from 'react';\nimport { useToast } from '../../hooks/use-toast';\n\nexport function Toaster() {\n  const { toast, dismiss } = useToast();\n  // The useToast hook doesn't have toasts exposed anymore, since we use the ToastContainer in the hook\n  // This is just a placeholder component that will be properly connected when all components are in place\n  \n  return (\n    <div className=\"fixed top-0 right-0 z-50 flex flex-col p-4 space-y-4 w-full max-w-md\"></div>\n  );\n}","size_bytes":475},"client/src/components/layout/navbar.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Link, useLocation } from \"wouter\";\nimport { Menu, ChevronDown } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport function Navbar() {\n  const { user, logoutMutation } = useAuth();\n  const [location] = useLocation();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  // Navigation links\n  const navLinks = [\n    { name: \"Dashboard\", path: \"/dashboard\" },\n    { name: \"Programs\", path: \"/programs\" },\n    { name: \"Leaderboard\", path: \"/leaderboard\" },\n    { name: \"Hacktivity\", path: \"/hacktivity\" },\n  ];\n\n  // Resource links for dropdown\n  const resourceLinks = [\n    { name: \"Features\", path: \"/features\" },\n    { name: \"How It Works\", path: \"/how-it-works\" },\n    { name: \"Legal\", path: \"/legal\" },\n    { name: \"About\", path: \"/about\" },\n    { name: \"Help Center\", path: \"/help-center\" }\n  ];\n\n  // Footer links (not visible in the top nav)\n  const footerLinks = [\n    { name: \"Resources\", path: \"/resources\" },\n    { name: \"Legal\", path: \"/legal\" },\n    { name: \"Terms\", path: \"/terms-of-service\" },\n    { name: \"Privacy\", path: \"/privacy-policy\" },\n    { name: \"Security\", path: \"/security\" },\n    { name: \"About\", path: \"/about\" },\n  ];\n\n  // Function to check if the link is active\n  const isActive = (path: string) => {\n    return location.startsWith(path);\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  // Toggle mobile menu\n  const toggleMobileMenu = () => {\n    setMobileMenuOpen(!mobileMenuOpen);\n  };\n\n  return (\n    <nav className=\"bg-terminal border-b border-matrix/30 sticky top-0 z-30\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between h-16\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0 flex items-center\">\n              <Link href=\"/dashboard\">\n                <div className=\"text-matrix text-xl font-mono font-bold cursor-pointer\">CyberHunt_</div>\n              </Link>\n            </div>\n            <div className=\"hidden sm:ml-6 sm:flex sm:space-x-6\">\n              {navLinks.map((link) => (\n                <Link key={link.path} href={link.path}>\n                  <div\n                    className={`${\n                      isActive(link.path)\n                        ? \"text-light-gray border-matrix\"\n                        : \"text-dim-gray border-transparent hover:text-matrix\"\n                    } border-b-2 px-3 pt-5 pb-3 text-sm font-mono cursor-pointer`}\n                  >\n                    {link.name}\n                  </div>\n                </Link>\n              ))}\n              {user?.userType === 'hacker' && (\n                <Link href=\"/crypto/withdrawals\">\n                  <div className={`${\n                      isActive('/crypto/withdrawals')\n                        ? \"text-light-gray border-matrix\"\n                        : \"text-dim-gray border-transparent hover:text-matrix\"\n                    } border-b-2 px-3 pt-5 pb-3 text-sm font-mono cursor-pointer`}>\n                    Crypto Wallet\n                  </div>\n                </Link>\n              )}\n              {user?.userType === 'company' && (\n                <>\n                  <Link href=\"/company/dashboard\">\n                    <div className={`${\n                      isActive('/company/dashboard')\n                        ? \"text-light-gray border-matrix\"\n                        : \"text-dim-gray border-transparent hover:text-matrix\"\n                    } border-b-2 px-3 pt-5 pb-3 text-sm font-mono cursor-pointer`}>\n                      Dashboard\n                    </div>\n                  </Link>\n                  <Link href=\"/crypto/payment\">\n                    <div className={`${\n                      isActive('/crypto/payment')\n                        ? \"text-light-gray border-matrix\"\n                        : \"text-dim-gray border-transparent hover:text-matrix\"\n                    } border-b-2 px-3 pt-5 pb-3 text-sm font-mono cursor-pointer`}>\n                      Crypto Wallet\n                    </div>\n                  </Link>\n                </>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex items-center\">\n            <DropdownMenu>\n              <DropdownMenuTrigger className=\"flex items-center space-x-2 text-light-gray hover:text-matrix focus:outline-none\">\n                <div className=\"h-8 w-8 rounded-full bg-matrix/20 flex items-center justify-center border border-matrix/30\">\n                  <span className=\"text-xs font-mono text-matrix\">\n                    {user?.username?.substring(0, 2).toUpperCase() || \"U\"}\n                  </span>\n                </div>\n                <span className=\"hidden md:block text-sm font-mono\">{user?.username || \"user\"}</span>\n                <ChevronDown className=\"h-4 w-4 text-dim-gray\" />\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"bg-terminal border border-matrix/30 mt-1\">\n                <Link href=\"/profile\">\n                  <DropdownMenuItem className=\"text-light-gray hover:bg-matrix/10 cursor-pointer font-mono text-sm\">\n                    Profile\n                  </DropdownMenuItem>\n                </Link>\n                <Link href=\"/settings\">\n                  <DropdownMenuItem className=\"text-light-gray hover:bg-matrix/10 cursor-pointer font-mono text-sm\">\n                    Settings\n                  </DropdownMenuItem>\n                </Link>\n                <DropdownMenuSeparator className=\"bg-matrix/20\" />\n\n                {resourceLinks.map((link) => (\n                  <Link key={link.path} href={link.path}>\n                    <DropdownMenuItem className=\"text-light-gray hover:bg-matrix/10 cursor-pointer font-mono text-sm\">\n                      {link.name}\n                    </DropdownMenuItem>\n                  </Link>\n                ))}\n\n                <DropdownMenuSeparator className=\"bg-matrix/20\" />\n                <DropdownMenuItem \n                  className=\"text-alert-red hover:bg-matrix/10 cursor-pointer font-mono text-sm\"\n                  onClick={handleLogout}\n                >\n                  Logout\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n\n            <div className=\"flex items-center sm:hidden ml-4\">\n              <button\n                onClick={toggleMobileMenu}\n                className=\"text-light-gray hover:text-matrix focus:outline-none\"\n              >\n                <Menu className=\"h-6 w-6\" />\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile menu */}\n      {mobileMenuOpen && (\n        <div className=\"sm:hidden border-t border-matrix/30\">\n          <div className=\"px-2 pt-2 pb-3 space-y-1\">\n            {navLinks.map((link) => (\n              <Link key={link.path} href={link.path}>\n                <div\n                  className={`block px-3 py-2 rounded-md text-base font-mono cursor-pointer ${\n                    isActive(link.path)\n                      ? \"text-light-gray bg-matrix/10 border-l-2 border-matrix\"\n                      : \"text-dim-gray hover:bg-matrix/10 hover:text-light-gray\"\n                  }`}\n                  onClick={() => setMobileMenuOpen(false)}\n                >\n                  {link.name}\n                </div>\n              </Link>\n            ))}\n            {user?.userType === 'hacker' && (\n              <Link href=\"/crypto/withdrawals\">\n                <div\n                  className={`block px-3 py-2 rounded-md text-base font-mono cursor-pointer ${\n                    isActive('/crypto/withdrawals')\n                      ? \"text-light-gray bg-matrix/10 border-l-2 border-matrix\"\n                      : \"text-dim-gray hover:bg-matrix/10 hover:text-light-gray\"\n                  }`}\n                  onClick={() => setMobileMenuOpen(false)}\n                >\n                  Crypto Wallet\n                </div>\n              </Link>\n            )}\n            {user?.userType === 'company' && (\n              <>\n                <Link href=\"/company/dashboard\">\n                  <div\n                    className={`block px-3 py-2 rounded-md text-base font-mono cursor-pointer ${\n                      isActive('/company/dashboard')\n                        ? \"text-light-gray bg-matrix/10 border-l-2 border-matrix\"\n                        : \"text-dim-gray hover:bg-matrix/10 hover:text-light-gray\"\n                    }`}\n                    onClick={() => setMobileMenuOpen(false)}\n                  >\n                    Dashboard\n                  </div>\n                </Link>\n                <Link href=\"/crypto/payment\">\n                  <div\n                    className={`block px-3 py-2 rounded-md text-base font-mono cursor-pointer ${\n                      isActive('/crypto/payment')\n                        ? \"text-light-gray bg-matrix/10 border-l-2 border-matrix\"\n                        : \"text-dim-gray hover:bg-matrix/10 hover:text-light-gray\"\n                    }`}\n                    onClick={() => setMobileMenuOpen(false)}\n                  >\n                    Crypto Wallet\n                  </div>\n                </Link>\n              </>\n            )}\n            <Link href=\"/profile\">\n              <div\n                className=\"block px-3 py-2 rounded-md text-base font-mono text-dim-gray hover:bg-matrix/10 hover:text-light-gray cursor-pointer\"\n                onClick={() => setMobileMenuOpen(false)}\n              >\n                Profile\n              </div>\n            </Link>\n            <Link href=\"/settings\">\n              <div\n                className=\"block px-3 py-2 rounded-md text-base font-mono text-dim-gray hover:bg-matrix/10 hover:text-light-gray cursor-pointer\"\n                onClick={() => setMobileMenuOpen(false)}\n              >\n                Settings\n              </div>\n            </Link>\n            {/* Footer links */}\n            <div className=\"mt-4 pt-2 border-t border-matrix/20\">\n              {footerLinks.map((link) => (\n                <Link key={link.path} href={link.path}>\n                  <div\n                    className=\"block px-3 py-2 rounded-md text-sm font-mono text-dim-gray hover:bg-matrix/10 hover:text-light-gray cursor-pointer\"\n                    onClick={() => setMobileMenuOpen(false)}\n                  >\n                    {link.name}\n                  </div>\n                </Link>\n              ))}\n            </div>\n\n            <button\n              className=\"block w-full text-left px-3 py-2 rounded-md text-base font-mono text-alert-red hover:bg-matrix/10 mt-2\"\n              onClick={() => {\n                handleLogout();\n                setMobileMenuOpen(false);\n              }}\n            >\n              Logout\n            </button>\n          </div>\n        </div>\n      )}\n    </nav>\n  );\n}","size_bytes":11059},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/activity-item.tsx":{"content":"import { Activity } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { Check, AlertCircle, Medal } from \"lucide-react\";\n\ninterface ActivityItemProps {\n  activity: Activity;\n}\n\nexport default function ActivityItem({ activity }: ActivityItemProps) {\n  // Get the appropriate icon based on activity type\n  const getActivityIcon = () => {\n    switch (activity.type) {\n      case \"submission_accepted\":\n        return <Check className=\"text-matrix text-sm\" />;\n      case \"submission_pending\":\n        return <AlertCircle className=\"text-warning-yellow text-sm\" />;\n      case \"achievement_unlocked\":\n        return <Medal className=\"text-electric-blue text-sm\" />;\n      default:\n        return <AlertCircle className=\"text-dim-gray text-sm\" />;\n    }\n  };\n\n  // Format the timestamp\n  const getTimeAgo = () => {\n    if (!activity.createdAt) return \"Unknown time\";\n    \n    const date = typeof activity.createdAt === \"string\" \n      ? new Date(activity.createdAt) \n      : activity.createdAt;\n    \n    return formatDistanceToNow(date, { addSuffix: true });\n  };\n\n  return (\n    <div className=\"flex items-start\">\n      <div className=\"h-8 w-8 rounded-full bg-terminal p-1 mr-3 border border-matrix/30 flex items-center justify-center flex-shrink-0\">\n        {getActivityIcon()}\n      </div>\n      <div>\n        <p className=\"text-light-gray text-sm font-mono\">{activity.message}</p>\n        <p className=\"text-dim-gray text-xs font-mono\">{activity.details}</p>\n        <p className=\"text-dim-gray text-xs font-mono mt-1\">{getTimeAgo()}</p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1596},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2609},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7361},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"client/src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":845},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"client/src/components/ui/program-card.tsx":{"content":"import { Program } from \"@shared/schema\";\nimport { Link } from \"wouter\";\n\ninterface ProgramCardProps {\n  program: Program;\n}\n\nexport default function ProgramCard({ program }: ProgramCardProps) {\n  // Handle scope array consistently\n  const scopes = Array.isArray(program.scope) ? program.scope : [];\n\n  return (\n    <div className=\"terminal-card p-4 rounded-lg hover:bg-surface/50 transition-all duration-200 border border-matrix/30\">\n      <div className=\"flex items-start\">\n        <div className=\"h-12 w-12 rounded-md bg-terminal p-2 mr-4 border border-matrix/30 flex items-center justify-center\">\n          <span className=\"text-matrix font-mono text-lg\">{program.logo || program.name.substring(0, 2).toUpperCase()}</span>\n        </div>\n        <div className=\"flex-1\">\n          <div className=\"flex justify-between items-start\">\n            <h3 className=\"text-lg font-mono text-light-gray mb-1\">{program.name}</h3>\n            <span className={`text-xs font-mono ${\n              program.status === \"active\" \n                ? \"bg-matrix/10 text-matrix\" \n                : program.isPrivate \n                  ? \"bg-warning-yellow/20 text-warning-yellow\" \n                  : \"bg-accent/10 text-accent\"\n            } px-2 py-1 rounded-full`}>\n              {program.isPrivate ? \"Invite Only\" : program.status}\n            </span>\n          </div>\n          <p className=\"text-sm text-dim-gray mb-2\">{program.description}</p>\n          <div className=\"flex flex-wrap gap-2 mb-3\">\n            {scopes.map((scope, index) => (\n              <span key={index} className=\"text-xs bg-surface px-2 py-1 rounded text-dim-gray font-mono\">\n                {scope}\n              </span>\n            ))}\n          </div>\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <span className=\"text-xs text-dim-gray font-mono\">Rewards: </span>\n              <span className=\"text-xs text-warning-yellow font-mono\">{program.rewardsRange}</span>\n            </div>\n            <button \n              onClick={() => window.location.href = `/programs/${program.id}`} \n              className=\"text-xs text-matrix hover:text-matrix-dark font-mono cursor-pointer\"\n            >\n              View Details\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2317},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface ProgressProps extends React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root> {\n  indicatorClassName?: string;\n}\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  ProgressProps\n>(({ className, value, indicatorClassName, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className={cn(\"h-full w-full flex-1 bg-primary transition-all\", indicatorClassName)}\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":905},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"import * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4267},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        if (setOpenProp) {\n          return setOpenProp?.(\n            typeof value === \"function\" ? value(open) : value\n          )\n        }\n\n        _setOpen(value)\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full text-sidebar-foreground has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23337},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145}}}